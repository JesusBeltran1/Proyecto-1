import processing.core.*; 
import processing.data.*; 
import processing.event.*; 
import processing.opengl.*; 

import ddf.minim.*; 
import ddf.minim.analysis.*; 
import ddf.minim.effects.*; 
import ddf.minim.signals.*; 
import ddf.minim.spi.*; 
import ddf.minim.ugens.*; 

import java.util.HashMap; 
import java.util.ArrayList; 
import java.io.File; 
import java.io.BufferedReader; 
import java.io.PrintWriter; 
import java.io.InputStream; 
import java.io.OutputStream; 
import java.io.IOException; 

public class The_Incredibles extends PApplet {








PFont titulo_y_seleccion, texto_de_danio;
int pantalla = 0;
boolean sujeto_1 = false;
boolean sujeto_2 = false;
int turno = 0;
int danio_sujeto_1, danio_sujeto_2, seleccion_personaje_1, seleccion_personaje_2;
//PImage pantalla_ganador, japon, peru, brasil, panama, mexico, pantalla_de_inicio, pantalla_de_seleccion, pantalla_de_pelea;

Minim musica;
AudioSample musica_los_increibles;

Carta personaje1j1;
Carta personaje2j1;
Carta personaje3j1;
Carta personaje4j1;
Carta personaje5j1;

Carta personaje1j2;
Carta personaje2j2;
Carta personaje3j2;
Carta personaje4j2;
Carta personaje5j2;

Carta jugador1;
Carta jugador2;

public void setup() {
  
  musica = new Minim(this);
  musica_los_increibles = musica.loadSample("incredibles theme song.mp3", 1024);
  titulo_y_seleccion = loadFont("Impact-48.vlw");
  texto_de_danio = loadFont("Calibri-LightItalic-48.vlw");
  /*ganador = loadImage("Ganador.png");
  japon = loadImage("Japón.png");
  peru = loadImage("Perú.png");
  brasil = loadImage("Brasil.png");
  panama = loadImage("Panamá.png");
  mexico = loadImage("México.png");
  pantalla_de_inicio = loadImage("Pantalla de inicio.png");
  pantalla_de_seleccion = loadImage("Pantalla de selección.png");
  pantalla_de_pelea = loadImage("Pantalla de pelea.png");*/
  
  personaje1j1 = new CMrIncreible(20, 1, 0);
  personaje2j1 = new CElastigirl(15, 1, 1);
  personaje3j1 = new CDash(20, 1, 2);
  personaje4j1 = new CJackJack(15, 1, 3);
  personaje5j1 = new CVioletaAlterna(20, 1, 4);

  personaje1j2 = new CMrIncreible(20, 1, 0);
  personaje2j2 = new CElastigirl(15, 1, 1);
  personaje3j2 = new CDash(20, 1, 2);
  personaje4j2 = new CJackJack(15, 1, 3);
  personaje5j2 = new CVioletaAlterna(20, 1, 4);
}

public void draw() {
  switch(pantalla) {
    case 0:
     inicio();
    break;
    
    case 1:
     seleccion();
    break;
    
    case 2:
     pelea();
    break;
    
    case 3:
     gameover();
    break;
  } 
}

public void inicio() {
  pushMatrix();
  strokeWeight(60);
  stroke(0xffEAE700);
  fill(0xff9B1A00);
  rect(0, 0, 1360, 700);
  textFont(titulo_y_seleccion);
  textAlign(LEFT, TOP);
  fill(0xffF2F2F2);
  textSize(105);
  text("LOS INCREIBLES", 355, 175);
  textSize(55);
  fill(0xffF57700);
  text("Presione       para comenzar", 355, 445);
  fill(0xff1A1A1A);
  text("[ i ]", 572, 445);
  popMatrix();

  keyPressed();
  if (key == 'i' || key == 'I') {
      musica_los_increibles.trigger();
    pantalla = 1;
  }
}

public void seleccion() {
  stroke(0xff9B1A00);
  fill(0xffEAE700);
  strokeWeight(60);
  rect(0, 0, 1360, 700);
  fill(0xff1A1A1A);
  textAlign(LEFT);
  text("Seleccione los personajes", 695, 95);
  textAlign(RIGHT);
  text("Primero el J2", 675, 95);
  strokeWeight(0);
  translate(27,0);
  scale(0.975f);
  
  pushMatrix();
  //Rectángulo del Personaje 1
  rect(20, 160, 244, 480, 20);
  //Rectángulo del Personaje 2
  rect(284, 160, 244, 480, 20);
  //Rectángulo del Personaje 3
  rect(548, 160, 244, 480, 20);
  //Rectángulo del Personaje 4
  rect(812, 160, 244, 480, 20);
  //Rectángulo del Personaje 5
  rect(1076, 160, 244, 480, 20);
  popMatrix();
  
  noStroke();
  textFont(titulo_y_seleccion);
  textSize(55);
  textAlign(CENTER, TOP);
  
  //A
  fill(0xffF57700);
  text('A', 142, 520);
  //B
  text('B', 406, 520);
  //C
  text('C', 670, 520);
  //D
  text('D', 934, 520);
  //E
  text('E', 1198, 520);
  
  //F
  text('F', 142, 580);
  //G
  text('G', 406, 580);
  //H
  text('H', 670, 580);
  //I
  text('I', 934, 580);
  //J
  text('J', 1198, 580);
  
  personaje1j1.forma();
  personaje2j1.forma();
  personaje3j1.forma();
  personaje4j1.forma();
  personaje5j1.forma();
  
  if (sujeto_1 && sujeto_2) {
    pantalla = 2;
    turno += 0;
  }
  
  if (keyPressed) {
    switch(key) {
      case 'a':
      jugador1 = personaje1j1;
      danio_sujeto_1 = jugador1.danio();
      sujeto_1 = true;
      break;
      
      case 'A':
      jugador1 = personaje1j1;
      danio_sujeto_1 = jugador1.danio();
      sujeto_1 = true;
      break;
      
      case 'b':
      jugador1 = personaje2j1;
      danio_sujeto_1 = jugador1.danio();
      sujeto_1 = true;
      break;
      
      case 'B':
      jugador1 = personaje2j1;
      danio_sujeto_1 = jugador1.danio();
      sujeto_1 = true;
      break;
      
      case 'c':
      jugador1 = personaje3j1;
      danio_sujeto_1 = jugador1.danio();
      sujeto_1 = true;
      break;
      
      case 'C':
      jugador1 = personaje3j1;
      danio_sujeto_1 = jugador1.danio();
      sujeto_1 = true;
      break;
      
      case 'd':
      jugador1 = personaje4j1;
      danio_sujeto_1 = jugador1.danio();
      sujeto_1 = true;
      break;
      
      case 'D':
      jugador1 = personaje4j1;
      danio_sujeto_1 = jugador1.danio();
      sujeto_1 = true;
      break;
      
      case 'e':
      jugador1 = personaje5j1;
      danio_sujeto_1 = jugador1.danio();
      sujeto_1 = true;
      break;
      
      case 'E':
      jugador1 = personaje5j1;
      danio_sujeto_1 = jugador1.danio();
      sujeto_1 = true;
      break;
      
      case 'f':
      jugador2 = personaje1j2;
      danio_sujeto_2 = jugador2.danio();
      sujeto_2 = true;
      break;
      
      case 'F':
      jugador2 = personaje1j2;
      danio_sujeto_2 = jugador2.danio();
      sujeto_2 = true;
      break;
      
      case 'g':
      jugador2 = personaje2j2;
      danio_sujeto_2 = jugador2.danio();
      sujeto_2 = true;
      break;
      
      case 'G':
      jugador2 = personaje2j2;
      danio_sujeto_2 = jugador2.danio();
      sujeto_2 = true;
      break;
      
      case 'h':
      jugador2 = personaje3j2;
      danio_sujeto_2 = jugador2.danio();
      sujeto_2 = true;
      break;
      
      case 'H':
      jugador2 = personaje3j2;
      danio_sujeto_2 = jugador2.danio();
      sujeto_2 = true;
      break;
      
      case 'i':
      jugador2 = personaje4j2;
      danio_sujeto_2 = jugador2.danio();
      sujeto_2 = true;
      break;
      
      case 'I':
      jugador2 = personaje4j2;
      danio_sujeto_2 = jugador2.danio();
      sujeto_2 = true;
      break;
      
      case 'j':
      jugador2 = personaje5j2;
      danio_sujeto_2 = jugador2.danio();
      sujeto_2 = true;
      break;
      
      case 'J':
      jugador2 = personaje5j2;
      danio_sujeto_2 = jugador2.danio();
      sujeto_2 = true;
      break;
    }
  }
 }

public void pelea() {
  
  stroke(0xff9B1A00);
  fill(0xffF57700);
  strokeWeight(60);
  rect(0, 0, 1360, 700);
  fill(0xff1A1A1A);
  textAlign(RIGHT);
  textFont(texto_de_danio);
  text("FIGHT", 195, 95);
  text("DAÑO", 680, 195);
  
    if (jugador1 == personaje1j1) {
    seleccion_personaje_1 = 0;
    personaje1j1.gamer_1();
  }
  
  if (jugador1 == personaje2j1) {
    seleccion_personaje_1 = 1;
    personaje2j1.gamer_1();
  }
  
  if (jugador1 == personaje3j1) {
    seleccion_personaje_1 = 2;
    personaje3j1.gamer_1();
  }
  
  if (jugador1 == personaje4j1) {
    seleccion_personaje_1 = 3;
    personaje4j1.gamer_1();
  }
  
  if (jugador1 == personaje5j1) {
    seleccion_personaje_1 = 4;
    personaje5j1.gamer_1();
  }
  
  //Jugador 2
  if (jugador2 == personaje1j2) {
    seleccion_personaje_2 = 0;
    personaje1j1.gamer_2();
  }
  
  if (jugador2 == personaje2j2) {
    seleccion_personaje_2 = 1;
    personaje2j1.gamer_2();
  }
  
  if (jugador2 == personaje3j2) {
    seleccion_personaje_2 = 2;
    personaje3j1.gamer_2();
  }
  
  if (jugador2 == personaje4j2) {
    seleccion_personaje_2 = 3;
    personaje4j1.gamer_2();
  }
  
  if (jugador2 == personaje5j2) {
    seleccion_personaje_2 = 4;
    personaje5j1.gamer_2();
  }

  switch (turno) {
    case 0:
    
    keyPressed();
    if ((key == 'k' || key == 'K') && turno == 0) {
      danio_sujeto_2 += 10;
      turno = 1;
    }
    
    break;
    
    case 1:
    
    keyPressed();
    if ((key=='l') || (key == 'L') && turno == 1) {
      danio_sujeto_1 += 10;
      turno = 0;
    }
    
    break;
  }

  //Barra de Daño del J1
  pushMatrix();
  fill(0xffEAE700);
  rect(40, 200, (danio_sujeto_1*1), 30);
  popMatrix();
  
  if (danio_sujeto_1 >= 100 || danio_sujeto_2 >= 100) {
    pantalla = 3;
  }

  //Barra de Daño del J2
  pushMatrix();
  fill(0xff7200AD);
  rect(1120, 200, (danio_sujeto_2*1), 30);
  popMatrix();
  
  if (danio_sujeto_1 >= 100 || danio_sujeto_2 >= 100) {
    pantalla = 3;
  }
  
  textSize(100);
  textFont(texto_de_danio);
  fill(0xffF2F2F2);
  textAlign(LEFT, TOP);
  text("J1 Ataca con K", 20, 632);
  
  fill(0xffF2F2F2);
  text("J2 Ataca con L", 1000, 632);
}

public void gameover() {
  if (danio_sujeto_1 >= 100) {
    
    pushMatrix();
    strokeWeight(60);
  stroke(0xffEAE700);
  fill(0xff9B1A00);
  rect(0, 0, 1360, 700);
  textFont(titulo_y_seleccion);
  textAlign(LEFT, TOP);
  fill(0xffF2F2F2);
  textSize(105);
  text("GANASTE", 355, 175);
    
    textSize(100);
    fill(random(255), random(255), random(255));
    noStroke();
    textFont(texto_de_danio);
    frameRate(15);
    text("Jugador 2", 600, 410);
    fill(random(255), random(255), random(255));
  frameRate(15);
    text("Presione  [I]  para volver a iniciar", 540, 610);
    popMatrix();
  }
  
  if (danio_sujeto_2 >= 100) {
    pushMatrix();
    strokeWeight(60);
  stroke(0xffEAE700);
  fill(0xff9B1A00);
  rect(0, 0, 1360, 700);
  textFont(titulo_y_seleccion);
  textAlign(LEFT, TOP);
  fill(0xffF2F2F2);
  textSize(105);
  text("GANASTE", 355, 175);
  
    textSize(100);
    fill(random(255), random(255), random(255));
    noStroke();
    textFont(texto_de_danio);
    frameRate(15);
    text("Jugador 1", 600, 410);
    fill(random(255), random(255), random(255));
    frameRate(15);
    text("Presione  [I]  para volver a iniciar", 540, 610);
    popMatrix();
  }
  
  keyPressed();
  if (key == 'i' || key == 'I') {
    pantalla = 1;
    sujeto_1 = false;
    sujeto_2 = false;
    turno = 0;
    danio_sujeto_1 = 0;
    danio_sujeto_2 = 0;
  }
}
interface Carta {
  public void forma();
  public void gamer_1();
  public void gamer_2();
  public int danio();  
}
class CMrIncreible implements Carta{
  int ataque;
  int danio;
  int forma;
  CMrIncreible(int ataque_, int danio_, int forma_) {
    ataque = ataque_;
    danio = danio_;
    forma = forma_;
  }
  
public void forma() {
    switch(forma) {
    case 0:
      
pushMatrix();
translate(143, 400);
noStroke();
fill(182, 19, 0);
rect(-42.333f, -176.333f, 94, 43.333f);
beginShape();
vertex(-37.386f, -133);
vertex(-32.788f, -82.954f);
vertex(20.086f, -82.954f);
vertex(39.625f, -133);
//vertex(-680, -0.5);
endShape(CLOSE);
beginShape();
vertex(51.667f, -176.333f);
vertex(77.965f, -154.667f);
vertex(51.667f, -133);
endShape(CLOSE);
beginShape();
vertex(-42.333f, -176.333f);
vertex(-68.631f, -154.667f);
vertex(-42.333f, -133);
endShape(CLOSE);
rect(-86.363f, -149.637f, 31.304f, 46.846f);
rect(62.313f, -149.637f, 31.304f, 46.846f);
fill(21, 19, 19);
beginShape();
vertex(-97.428f, -117.277f);
vertex(-72.677f, -98.112f);
vertex(-97.428f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(104.682f, -117.277f);
vertex(79.931f, -98.112f);
vertex(104.682f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(-97.122f, -98.112f);
vertex(-85.052f, -77.207f);
vertex(-72.983f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(80.236f, -98.112f);
vertex(92.306f, -77.207f);
vertex(104.375f, -98.112f);
endShape(CLOSE);
ellipse(-89.896f, -73.759f, 16.092f, 16.092f);
ellipse(92.307f, -73.759f, 16.092f, 16.092f);
fill(255, 120, 0);
rect(-32.788f, -82.954f, 53.282f, 9.195f);
fill(21, 19, 19);
beginShape();
vertex(-32.788f, -73.759f);
vertex(20.494f, -73.759f);
vertex(0, -42.725f);
vertex(-12.41f, -42.725f);
endShape(CLOSE);
fill(182, 19, 0);
beginShape();
vertex(-12.41f, -42.725f);
vertex(-32.788f, 0);
vertex(-68.631f, -21.362f);
vertex(-32.788f, -73.759f);
endShape(CLOSE);
beginShape();
vertex(1.119f, -42.725f);
vertex(21.497f, 0);
vertex(57.34f, -21.362f);
vertex(21.497f, -73.759f);
endShape(CLOSE);
beginShape();
vertex(-68.631f, -21.362f);
vertex(-32.788f, 0);
vertex(-62.265f, 31.988f);
endShape(CLOSE);
beginShape();
vertex(57.547f, -21.362f);
vertex(21.704f, 0);
vertex(51.181f, 31.988f);
endShape(CLOSE);
fill(21, 19, 19);
beginShape();
vertex(-82.026f, 54.977f);
vertex(-59.96f, 16.759f);
vertex(-37.896f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(25.25f, 54.977f);
vertex(47.315f, 16.759f);
vertex(69.381f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(-82.026f, 54.977f);
vertex(-59.961f, 97.506f);
vertex(-37.896f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(25.25f, 54.977f);
vertex(47.314f, 97.506f);
vertex(69.381f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(-59.961f, 83.712f);
vertex(-55.482f, 105.552f);
vertex(-89.896f, 105.552f);
endShape(CLOSE);
beginShape();
vertex(44.818f, 86.586f);
vertex(40.34f, 108.426f);
vertex(74.754f, 108.426f);
endShape(CLOSE);
fill(232, 148, 98);
beginShape();
vertex(-18.354f, -176.333f);
vertex(2.06f, -211.69f);
vertex(22.473f, -176.333f);
endShape(CLOSE);
ellipse(2.06f, -204.855f, 46.29f, 38.523f);
fill(236, 232, 0);
beginShape();
vertex(-12.41f, -225.772f);
vertex(16.529f, -225.772f);
bezierVertex(16.529f, -225.772f, 1.813f, -242.153f, -12.41f, -225.772f);
endShape();
fill(243, 241, 241);
stroke(182, 19, 0);
beginShape();
vertex(-12.41f, -194.012f);
vertex(16.529f, -194.012f);
bezierVertex(16.529f, -194.012f, 1.813f, -177.631f, -12.41f, -194.012f);
endShape();
fill(21, 19, 19);
noStroke();
beginShape();
vertex(-16.805f, -218.074f);
vertex(20.494f, -219.117f);
vertex(23.349f, -204.855f);
vertex(-19.231f, -204.855f);
bezierVertex(-19.23f, -204.855f, -21.931f, -217.931f, -16.805f, -218.074f);
endShape();
fill(243, 241, 241);
ellipse(-6.724f, -211.69f, 4.598f, 4.598f);
ellipse(10.844f, -211.987f, 4.598f, 4.598f);
fill(255, 120, 0);
beginShape();
vertex(-27.611f, -141.419f);
bezierVertex(-27.611f, -141.937f, -27.611f, -142.454f, -27.611f, -142.971f);
bezierVertex(-27.534f, -143.163f, -27.549f, -143.369f, -27.521f, -143.569f);
bezierVertex(-27.284f, -145.229f, -26.683f, -146.751f, -25.78f, -148.157f);
bezierVertex(-24.393f, -150.317f, -22.532f, -151.995f, -20.393f, -153.376f);
bezierVertex(-16.815f, -155.686f, -12.87f, -157.02f, -8.695f, -157.732f);
bezierVertex(-8.702f, -157.699f, -8.705f, -157.666f, -8.718f, -157.636f);
bezierVertex(-9.006f, -156.97f, -9.167f, -156.279f, -9.235f, -155.553f);
bezierVertex(-9.312f, -154.731f, -9.2f, -153.94f, -8.963f, -153.161f);
bezierVertex(-8.796f, -152.61f, -8.525f, -152.106f, -8.227f, -151.615f);
bezierVertex(-8.896f, -151.487f, -9.562f, -151.342f, -10.222f, -151.169f);
bezierVertex(-12.965f, -150.45f, -15.556f, -149.386f, -17.885f, -147.743f);
bezierVertex(-19.456f, -146.635f, -20.814f, -145.315f, -21.777f, -143.631f);
bezierVertex(-22.886f, -141.69f, -23.244f, -139.631f, -22.672f, -137.447f);
bezierVertex(-22.251f, -135.839f, -21.387f, -134.478f, -20.267f, -133.271f);
bezierVertex(-18.977f, -131.881f, -17.451f, -130.802f, -15.783f, -129.917f);
bezierVertex(-13.771f, -128.85f, -11.643f, -128.099f, -9.425f, -127.594f);
bezierVertex(-8.676f, -127.424f, -7.925f, -127.268f, -7.163f, -127.167f);
bezierVertex(-7.131f, -126.929f, -7.223f, -126.695f, -7.182f, -126.457f);
bezierVertex(-7.34f, -126.472f, -7.499f, -126.479f, -7.655f, -126.503f);
bezierVertex(-9.345f, -126.753f, -11.018f, -127.092f, -12.66f, -127.57f);
bezierVertex(-15.609f, -128.43f, -18.398f, -129.636f, -20.935f, -131.386f);
bezierVertex(-22.656f, -132.573f, -24.184f, -133.962f, -25.401f, -135.674f);
bezierVertex(-26.487f, -137.203f, -27.234f, -138.873f, -27.507f, -140.741f);
bezierVertex(-27.541f, -140.969f, -27.526f, -141.202f, -27.611f, -141.419f);
endShape();
fill(236, 232, 0);
beginShape();
vertex(-7.181f, -126.458f);
bezierVertex(-7.222f, -126.696f, -7.13f, -126.931f, -7.162f, -127.168f);
bezierVertex(-7.162f, -132.619f, -7.159f, -138.069f, -7.166f, -143.52f);
bezierVertex(-7.166f, -143.725f, -7.112f, -143.801f, -6.913f, -143.846f);
bezierVertex(-3.963f, -144.512f, -1.016f, -145.185f, 1.933f, -145.857f);
bezierVertex(2.159f, -145.908f, 2.16f, -145.909f, 2.16f, -145.679f);
bezierVertex(2.16f, -141.382f, 2.16f, -137.085f, 2.16f, -132.788f);
bezierVertex(2.16f, -132.702f, 2.163f, -132.616f, 2.164f, -132.53f);
bezierVertex(2.163f, -130.478f, 2.163f, -128.426f, 2.163f, -126.374f);
bezierVertex(1.816f, -126.299f, 1.462f, -126.296f, 1.112f, -126.252f);
bezierVertex(1.049f, -126.244f, 0.979f, -126.276f, 0.929f, -126.212f);
bezierVertex(-1.128f, -126.212f, -3.184f, -126.212f, -5.24f, -126.212f);
bezierVertex(-5.428f, -126.285f, -5.628f, -126.267f, -5.822f, -126.29f);
bezierVertex(-6.276f, -126.345f, -6.733f, -126.368f, -7.181f, -126.458f);
endShape();
beginShape();
vertex(-8.694f, -157.732f);
bezierVertex(-8.455f, -158.136f, -8.238f, -158.553f, -7.942f, -158.922f);
bezierVertex(-6.846f, -160.29f, -5.434f, -161.095f, -3.693f, -161.319f);
bezierVertex(-3.65f, -161.325f, -3.597f, -161.309f, -3.569f, -161.361f);
bezierVertex(-3.211f, -161.361f, -2.852f, -161.361f, -2.494f, -161.361f);
bezierVertex(-2.16f, -161.286f, -1.816f, -161.268f, -1.483f, -161.182f);
bezierVertex(0.227f, -160.742f, 1.52f, -159.75f, 2.427f, -158.243f);
bezierVertex(2.472f, -158.169f, 2.517f, -158.096f, 2.562f, -158.023f);
bezierVertex(2.672f, -157.767f, 2.783f, -157.511f, 2.892f, -157.255f);
bezierVertex(3.063f, -156.749f, 3.181f, -156.231f, 3.239f, -155.701f);
bezierVertex(3.287f, -155.247f, 3.267f, -154.797f, 3.213f, -154.339f);
bezierVertex(3.147f, -153.794f, 3.018f, -153.271f, 2.82f, -152.766f);
bezierVertex(2.429f, -151.772f, 1.814f, -150.938f, 0.991f, -150.251f);
bezierVertex(0.403f, -149.76f, -0.25f, -149.389f, -0.971f, -149.141f);
bezierVertex(-1.896f, -148.823f, -2.843f, -148.711f, -3.819f, -148.857f);
bezierVertex(-4.375f, -148.94f, -4.912f, -149.078f, -5.427f, -149.298f);
bezierVertex(-6.587f, -149.795f, -7.501f, -150.59f, -8.225f, -151.615f);
bezierVertex(-8.522f, -152.106f, -8.793f, -152.61f, -8.961f, -153.161f);
bezierVertex(-9.198f, -153.94f, -9.31f, -154.731f, -9.233f, -155.553f);
bezierVertex(-9.165f, -156.278f, -9.004f, -156.97f, -8.716f, -157.636f);
bezierVertex(-8.705f, -157.666f, -8.702f, -157.7f, -8.694f, -157.732f);
endShape();
beginShape();
vertex(0.215f, -155.096f);
bezierVertex(0.214f, -156.847f, -1.226f, -158.301f, -2.964f, -158.303f);
bezierVertex(-4.725f, -158.305f, -6.189f, -156.845f, -6.186f, -155.09f);
bezierVertex(-6.183f, -153.323f, -4.715f, -151.851f, -2.958f, -151.853f);
bezierVertex(-1.23f, -151.854f, 0.216f, -153.333f, 0.215f, -155.096f);
endShape();
fill(255, 120, 0);
beginShape();
vertex(2.891f, -157.256f);
bezierVertex(2.782f, -157.512f, 2.671f, -157.768f, 2.561f, -158.024f);
bezierVertex(3.198f, -157.99f, 3.824f, -157.875f, 4.45f, -157.769f);
bezierVertex(6.701f, -157.386f, 8.901f, -156.81f, 11.034f, -155.993f);
bezierVertex(13.612f, -155.005f, 16.024f, -153.722f, 18.165f, -151.961f);
bezierVertex(19.989f, -150.46f, 21.503f, -148.707f, 22.481f, -146.53f);
bezierVertex(22.901f, -145.594f, 23.198f, -144.619f, 23.324f, -143.601f);
bezierVertex(23.374f, -143.189f, 23.317f, -142.766f, 23.343f, -142.349f);
bezierVertex(23.512f, -139.478f, 22.372f, -137.081f, 20.629f, -134.915f);
bezierVertex(19.052f, -132.956f, 17.077f, -131.47f, 14.9f, -130.241f);
bezierVertex(12.251f, -128.744f, 9.413f, -127.741f, 6.454f, -127.067f);
bezierVertex(5.103f, -126.76f, 3.737f, -126.538f, 2.36f, -126.383f);
bezierVertex(2.296f, -126.376f, 2.229f, -126.378f, 2.163f, -126.377f);
bezierVertex(2.163f, -128.429f, 2.163f, -130.481f, 2.164f, -132.533f);
bezierVertex(2.243f, -132.539f, 2.323f, -132.543f, 2.401f, -132.554f);
bezierVertex(4.479f, -132.842f, 6.514f, -133.306f, 8.489f, -134.021f);
bezierVertex(10.6f, -134.785f, 12.588f, -135.785f, 14.361f, -137.176f);
bezierVertex(15.72f, -138.242f, 16.886f, -139.482f, 17.704f, -141.018f);
bezierVertex(18.665f, -142.821f, 18.98f, -144.724f, 18.52f, -146.729f);
bezierVertex(18.143f, -148.371f, 17.305f, -149.77f, 16.19f, -151.011f);
bezierVertex(14.794f, -152.565f, 13.107f, -153.733f, 11.256f, -154.679f);
bezierVertex(9.235f, -155.713f, 7.098f, -156.421f, 4.883f, -156.904f);
bezierVertex(4.224f, -157.046f, 3.563f, -157.179f, 2.891f, -157.256f);
endShape();
fill(21, 19, 19);
beginShape();
vertex(2.891f, -157.256f);
bezierVertex(3.563f, -157.179f, 4.224f, -157.046f, 4.883f, -156.902f);
bezierVertex(7.098f, -156.42f, 9.235f, -155.712f, 11.256f, -154.677f);
bezierVertex(13.107f, -153.731f, 14.794f, -152.563f, 16.19f, -151.009f);
bezierVertex(17.305f, -149.767f, 18.143f, -148.369f, 18.52f, -146.727f);
bezierVertex(18.98f, -144.721f, 18.665f, -142.819f, 17.704f, -141.016f);
bezierVertex(16.887f, -139.479f, 15.721f, -138.24f, 14.361f, -137.174f);
bezierVertex(12.588f, -135.783f, 10.6f, -134.783f, 8.489f, -134.019f);
bezierVertex(6.514f, -133.305f, 4.479f, -132.84f, 2.401f, -132.552f);
bezierVertex(2.323f, -132.541f, 2.243f, -132.538f, 2.164f, -132.531f);
bezierVertex(2.163f, -132.617f, 2.16f, -132.703f, 2.16f, -132.789f);
bezierVertex(2.16f, -137.086f, 2.16f, -141.383f, 2.16f, -145.68f);
bezierVertex(2.16f, -145.909f, 2.159f, -145.909f, 1.933f, -145.858f);
bezierVertex(-1.015f, -145.186f, -3.963f, -144.512f, -6.913f, -143.847f);
bezierVertex(-7.112f, -143.802f, -7.166f, -143.726f, -7.166f, -143.521f);
bezierVertex(-7.159f, -138.07f, -7.162f, -132.62f, -7.162f, -127.169f);
bezierVertex(-7.924f, -127.27f, -8.675f, -127.426f, -9.424f, -127.596f);
bezierVertex(-11.642f, -128.1f, -13.771f, -128.851f, -15.782f, -129.919f);
bezierVertex(-17.45f, -130.803f, -18.976f, -131.882f, -20.266f, -133.273f);
bezierVertex(-21.386f, -134.48f, -22.25f, -135.841f, -22.671f, -137.449f);
bezierVertex(-23.243f, -139.633f, -22.886f, -141.692f, -21.776f, -143.633f);
bezierVertex(-20.813f, -145.318f, -19.455f, -146.637f, -17.884f, -147.745f);
bezierVertex(-15.555f, -149.388f, -12.965f, -150.452f, -10.221f, -151.171f);
bezierVertex(-9.561f, -151.344f, -8.895f, -151.489f, -8.226f, -151.617f);
bezierVertex(-7.502f, -150.592f, -6.588f, -149.797f, -5.428f, -149.3f);
bezierVertex(-4.912f, -149.079f, -4.375f, -148.941f, -3.82f, -148.859f);
bezierVertex(-2.844f, -148.713f, -1.898f, -148.825f, -0.972f, -149.143f);
bezierVertex(-0.251f, -149.391f, 0.402f, -149.762f, 0.99f, -150.253f);
bezierVertex(1.813f, -150.941f, 2.428f, -151.774f, 2.819f, -152.768f);
bezierVertex(3.016f, -153.273f, 3.145f, -153.796f, 3.212f, -154.341f);
bezierVertex(3.267f, -154.799f, 3.286f, -155.249f, 3.238f, -155.703f);
bezierVertex(3.18f, -156.232f, 3.062f, -156.75f, 2.891f, -157.256f);
endShape();
fill(243, 241, 241);
beginShape();
vertex(0.215f, -155.096f);
bezierVertex(0.216f, -153.333f, -1.23f, -151.854f, -2.957f, -151.853f);
bezierVertex(-4.714f, -151.851f, -6.182f, -153.323f, -6.185f, -155.09f);
bezierVertex(-6.188f, -156.845f, -4.724f, -158.305f, -2.963f, -158.303f);
bezierVertex(-1.227f, -158.3f, 0.214f, -156.847f, 0.215f, -155.096f);
endShape();
popMatrix();

      break;
    }
  }
  
  public void gamer_1() {
    switch(seleccion_personaje_1) {
    case 0:
      
pushMatrix();
translate(413, 405);
noStroke();
fill(182, 19, 0);
rect(-42.333f, -176.333f, 94, 43.333f);
beginShape();
vertex(-37.386f, -133);
vertex(-32.788f, -82.954f);
vertex(20.086f, -82.954f);
vertex(39.625f, -133);
//vertex(-680, -0.5);
endShape(CLOSE);
beginShape();
vertex(51.667f, -176.333f);
vertex(77.965f, -154.667f);
vertex(51.667f, -133);
endShape(CLOSE);
beginShape();
vertex(-42.333f, -176.333f);
vertex(-68.631f, -154.667f);
vertex(-42.333f, -133);
endShape(CLOSE);
rect(-86.363f, -149.637f, 31.304f, 46.846f);
rect(62.313f, -149.637f, 31.304f, 46.846f);
fill(21, 19, 19);
beginShape();
vertex(-97.428f, -117.277f);
vertex(-72.677f, -98.112f);
vertex(-97.428f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(104.682f, -117.277f);
vertex(79.931f, -98.112f);
vertex(104.682f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(-97.122f, -98.112f);
vertex(-85.052f, -77.207f);
vertex(-72.983f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(80.236f, -98.112f);
vertex(92.306f, -77.207f);
vertex(104.375f, -98.112f);
endShape(CLOSE);
ellipse(-89.896f, -73.759f, 16.092f, 16.092f);
ellipse(92.307f, -73.759f, 16.092f, 16.092f);
fill(255, 120, 0);
rect(-32.788f, -82.954f, 53.282f, 9.195f);
fill(21, 19, 19);
beginShape();
vertex(-32.788f, -73.759f);
vertex(20.494f, -73.759f);
vertex(0, -42.725f);
vertex(-12.41f, -42.725f);
endShape(CLOSE);
fill(182, 19, 0);
beginShape();
vertex(-12.41f, -42.725f);
vertex(-32.788f, 0);
vertex(-68.631f, -21.362f);
vertex(-32.788f, -73.759f);
endShape(CLOSE);
beginShape();
vertex(1.119f, -42.725f);
vertex(21.497f, 0);
vertex(57.34f, -21.362f);
vertex(21.497f, -73.759f);
endShape(CLOSE);
beginShape();
vertex(-68.631f, -21.362f);
vertex(-32.788f, 0);
vertex(-62.265f, 31.988f);
endShape(CLOSE);
beginShape();
vertex(57.547f, -21.362f);
vertex(21.704f, 0);
vertex(51.181f, 31.988f);
endShape(CLOSE);
fill(21, 19, 19);
beginShape();
vertex(-82.026f, 54.977f);
vertex(-59.96f, 16.759f);
vertex(-37.896f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(25.25f, 54.977f);
vertex(47.315f, 16.759f);
vertex(69.381f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(-82.026f, 54.977f);
vertex(-59.961f, 97.506f);
vertex(-37.896f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(25.25f, 54.977f);
vertex(47.314f, 97.506f);
vertex(69.381f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(-59.961f, 83.712f);
vertex(-55.482f, 105.552f);
vertex(-89.896f, 105.552f);
endShape(CLOSE);
beginShape();
vertex(44.818f, 86.586f);
vertex(40.34f, 108.426f);
vertex(74.754f, 108.426f);
endShape(CLOSE);
fill(232, 148, 98);
beginShape();
vertex(-18.354f, -176.333f);
vertex(2.06f, -211.69f);
vertex(22.473f, -176.333f);
endShape(CLOSE);
ellipse(2.06f, -204.855f, 46.29f, 38.523f);
fill(236, 232, 0);
beginShape();
vertex(-12.41f, -225.772f);
vertex(16.529f, -225.772f);
bezierVertex(16.529f, -225.772f, 1.813f, -242.153f, -12.41f, -225.772f);
endShape();
fill(243, 241, 241);
stroke(182, 19, 0);
beginShape();
vertex(-12.41f, -194.012f);
vertex(16.529f, -194.012f);
bezierVertex(16.529f, -194.012f, 1.813f, -177.631f, -12.41f, -194.012f);
endShape();
fill(21, 19, 19);
noStroke();
beginShape();
vertex(-16.805f, -218.074f);
vertex(20.494f, -219.117f);
vertex(23.349f, -204.855f);
vertex(-19.231f, -204.855f);
bezierVertex(-19.23f, -204.855f, -21.931f, -217.931f, -16.805f, -218.074f);
endShape();
fill(243, 241, 241);
ellipse(-6.724f, -211.69f, 4.598f, 4.598f);
ellipse(10.844f, -211.987f, 4.598f, 4.598f);
fill(255, 120, 0);
beginShape();
vertex(-27.611f, -141.419f);
bezierVertex(-27.611f, -141.937f, -27.611f, -142.454f, -27.611f, -142.971f);
bezierVertex(-27.534f, -143.163f, -27.549f, -143.369f, -27.521f, -143.569f);
bezierVertex(-27.284f, -145.229f, -26.683f, -146.751f, -25.78f, -148.157f);
bezierVertex(-24.393f, -150.317f, -22.532f, -151.995f, -20.393f, -153.376f);
bezierVertex(-16.815f, -155.686f, -12.87f, -157.02f, -8.695f, -157.732f);
bezierVertex(-8.702f, -157.699f, -8.705f, -157.666f, -8.718f, -157.636f);
bezierVertex(-9.006f, -156.97f, -9.167f, -156.279f, -9.235f, -155.553f);
bezierVertex(-9.312f, -154.731f, -9.2f, -153.94f, -8.963f, -153.161f);
bezierVertex(-8.796f, -152.61f, -8.525f, -152.106f, -8.227f, -151.615f);
bezierVertex(-8.896f, -151.487f, -9.562f, -151.342f, -10.222f, -151.169f);
bezierVertex(-12.965f, -150.45f, -15.556f, -149.386f, -17.885f, -147.743f);
bezierVertex(-19.456f, -146.635f, -20.814f, -145.315f, -21.777f, -143.631f);
bezierVertex(-22.886f, -141.69f, -23.244f, -139.631f, -22.672f, -137.447f);
bezierVertex(-22.251f, -135.839f, -21.387f, -134.478f, -20.267f, -133.271f);
bezierVertex(-18.977f, -131.881f, -17.451f, -130.802f, -15.783f, -129.917f);
bezierVertex(-13.771f, -128.85f, -11.643f, -128.099f, -9.425f, -127.594f);
bezierVertex(-8.676f, -127.424f, -7.925f, -127.268f, -7.163f, -127.167f);
bezierVertex(-7.131f, -126.929f, -7.223f, -126.695f, -7.182f, -126.457f);
bezierVertex(-7.34f, -126.472f, -7.499f, -126.479f, -7.655f, -126.503f);
bezierVertex(-9.345f, -126.753f, -11.018f, -127.092f, -12.66f, -127.57f);
bezierVertex(-15.609f, -128.43f, -18.398f, -129.636f, -20.935f, -131.386f);
bezierVertex(-22.656f, -132.573f, -24.184f, -133.962f, -25.401f, -135.674f);
bezierVertex(-26.487f, -137.203f, -27.234f, -138.873f, -27.507f, -140.741f);
bezierVertex(-27.541f, -140.969f, -27.526f, -141.202f, -27.611f, -141.419f);
endShape();
fill(236, 232, 0);
beginShape();
vertex(-7.181f, -126.458f);
bezierVertex(-7.222f, -126.696f, -7.13f, -126.931f, -7.162f, -127.168f);
bezierVertex(-7.162f, -132.619f, -7.159f, -138.069f, -7.166f, -143.52f);
bezierVertex(-7.166f, -143.725f, -7.112f, -143.801f, -6.913f, -143.846f);
bezierVertex(-3.963f, -144.512f, -1.016f, -145.185f, 1.933f, -145.857f);
bezierVertex(2.159f, -145.908f, 2.16f, -145.909f, 2.16f, -145.679f);
bezierVertex(2.16f, -141.382f, 2.16f, -137.085f, 2.16f, -132.788f);
bezierVertex(2.16f, -132.702f, 2.163f, -132.616f, 2.164f, -132.53f);
bezierVertex(2.163f, -130.478f, 2.163f, -128.426f, 2.163f, -126.374f);
bezierVertex(1.816f, -126.299f, 1.462f, -126.296f, 1.112f, -126.252f);
bezierVertex(1.049f, -126.244f, 0.979f, -126.276f, 0.929f, -126.212f);
bezierVertex(-1.128f, -126.212f, -3.184f, -126.212f, -5.24f, -126.212f);
bezierVertex(-5.428f, -126.285f, -5.628f, -126.267f, -5.822f, -126.29f);
bezierVertex(-6.276f, -126.345f, -6.733f, -126.368f, -7.181f, -126.458f);
endShape();
beginShape();
vertex(-8.694f, -157.732f);
bezierVertex(-8.455f, -158.136f, -8.238f, -158.553f, -7.942f, -158.922f);
bezierVertex(-6.846f, -160.29f, -5.434f, -161.095f, -3.693f, -161.319f);
bezierVertex(-3.65f, -161.325f, -3.597f, -161.309f, -3.569f, -161.361f);
bezierVertex(-3.211f, -161.361f, -2.852f, -161.361f, -2.494f, -161.361f);
bezierVertex(-2.16f, -161.286f, -1.816f, -161.268f, -1.483f, -161.182f);
bezierVertex(0.227f, -160.742f, 1.52f, -159.75f, 2.427f, -158.243f);
bezierVertex(2.472f, -158.169f, 2.517f, -158.096f, 2.562f, -158.023f);
bezierVertex(2.672f, -157.767f, 2.783f, -157.511f, 2.892f, -157.255f);
bezierVertex(3.063f, -156.749f, 3.181f, -156.231f, 3.239f, -155.701f);
bezierVertex(3.287f, -155.247f, 3.267f, -154.797f, 3.213f, -154.339f);
bezierVertex(3.147f, -153.794f, 3.018f, -153.271f, 2.82f, -152.766f);
bezierVertex(2.429f, -151.772f, 1.814f, -150.938f, 0.991f, -150.251f);
bezierVertex(0.403f, -149.76f, -0.25f, -149.389f, -0.971f, -149.141f);
bezierVertex(-1.896f, -148.823f, -2.843f, -148.711f, -3.819f, -148.857f);
bezierVertex(-4.375f, -148.94f, -4.912f, -149.078f, -5.427f, -149.298f);
bezierVertex(-6.587f, -149.795f, -7.501f, -150.59f, -8.225f, -151.615f);
bezierVertex(-8.522f, -152.106f, -8.793f, -152.61f, -8.961f, -153.161f);
bezierVertex(-9.198f, -153.94f, -9.31f, -154.731f, -9.233f, -155.553f);
bezierVertex(-9.165f, -156.278f, -9.004f, -156.97f, -8.716f, -157.636f);
bezierVertex(-8.705f, -157.666f, -8.702f, -157.7f, -8.694f, -157.732f);
endShape();
beginShape();
vertex(0.215f, -155.096f);
bezierVertex(0.214f, -156.847f, -1.226f, -158.301f, -2.964f, -158.303f);
bezierVertex(-4.725f, -158.305f, -6.189f, -156.845f, -6.186f, -155.09f);
bezierVertex(-6.183f, -153.323f, -4.715f, -151.851f, -2.958f, -151.853f);
bezierVertex(-1.23f, -151.854f, 0.216f, -153.333f, 0.215f, -155.096f);
endShape();
fill(255, 120, 0);
beginShape();
vertex(2.891f, -157.256f);
bezierVertex(2.782f, -157.512f, 2.671f, -157.768f, 2.561f, -158.024f);
bezierVertex(3.198f, -157.99f, 3.824f, -157.875f, 4.45f, -157.769f);
bezierVertex(6.701f, -157.386f, 8.901f, -156.81f, 11.034f, -155.993f);
bezierVertex(13.612f, -155.005f, 16.024f, -153.722f, 18.165f, -151.961f);
bezierVertex(19.989f, -150.46f, 21.503f, -148.707f, 22.481f, -146.53f);
bezierVertex(22.901f, -145.594f, 23.198f, -144.619f, 23.324f, -143.601f);
bezierVertex(23.374f, -143.189f, 23.317f, -142.766f, 23.343f, -142.349f);
bezierVertex(23.512f, -139.478f, 22.372f, -137.081f, 20.629f, -134.915f);
bezierVertex(19.052f, -132.956f, 17.077f, -131.47f, 14.9f, -130.241f);
bezierVertex(12.251f, -128.744f, 9.413f, -127.741f, 6.454f, -127.067f);
bezierVertex(5.103f, -126.76f, 3.737f, -126.538f, 2.36f, -126.383f);
bezierVertex(2.296f, -126.376f, 2.229f, -126.378f, 2.163f, -126.377f);
bezierVertex(2.163f, -128.429f, 2.163f, -130.481f, 2.164f, -132.533f);
bezierVertex(2.243f, -132.539f, 2.323f, -132.543f, 2.401f, -132.554f);
bezierVertex(4.479f, -132.842f, 6.514f, -133.306f, 8.489f, -134.021f);
bezierVertex(10.6f, -134.785f, 12.588f, -135.785f, 14.361f, -137.176f);
bezierVertex(15.72f, -138.242f, 16.886f, -139.482f, 17.704f, -141.018f);
bezierVertex(18.665f, -142.821f, 18.98f, -144.724f, 18.52f, -146.729f);
bezierVertex(18.143f, -148.371f, 17.305f, -149.77f, 16.19f, -151.011f);
bezierVertex(14.794f, -152.565f, 13.107f, -153.733f, 11.256f, -154.679f);
bezierVertex(9.235f, -155.713f, 7.098f, -156.421f, 4.883f, -156.904f);
bezierVertex(4.224f, -157.046f, 3.563f, -157.179f, 2.891f, -157.256f);
endShape();
fill(21, 19, 19);
beginShape();
vertex(2.891f, -157.256f);
bezierVertex(3.563f, -157.179f, 4.224f, -157.046f, 4.883f, -156.902f);
bezierVertex(7.098f, -156.42f, 9.235f, -155.712f, 11.256f, -154.677f);
bezierVertex(13.107f, -153.731f, 14.794f, -152.563f, 16.19f, -151.009f);
bezierVertex(17.305f, -149.767f, 18.143f, -148.369f, 18.52f, -146.727f);
bezierVertex(18.98f, -144.721f, 18.665f, -142.819f, 17.704f, -141.016f);
bezierVertex(16.887f, -139.479f, 15.721f, -138.24f, 14.361f, -137.174f);
bezierVertex(12.588f, -135.783f, 10.6f, -134.783f, 8.489f, -134.019f);
bezierVertex(6.514f, -133.305f, 4.479f, -132.84f, 2.401f, -132.552f);
bezierVertex(2.323f, -132.541f, 2.243f, -132.538f, 2.164f, -132.531f);
bezierVertex(2.163f, -132.617f, 2.16f, -132.703f, 2.16f, -132.789f);
bezierVertex(2.16f, -137.086f, 2.16f, -141.383f, 2.16f, -145.68f);
bezierVertex(2.16f, -145.909f, 2.159f, -145.909f, 1.933f, -145.858f);
bezierVertex(-1.015f, -145.186f, -3.963f, -144.512f, -6.913f, -143.847f);
bezierVertex(-7.112f, -143.802f, -7.166f, -143.726f, -7.166f, -143.521f);
bezierVertex(-7.159f, -138.07f, -7.162f, -132.62f, -7.162f, -127.169f);
bezierVertex(-7.924f, -127.27f, -8.675f, -127.426f, -9.424f, -127.596f);
bezierVertex(-11.642f, -128.1f, -13.771f, -128.851f, -15.782f, -129.919f);
bezierVertex(-17.45f, -130.803f, -18.976f, -131.882f, -20.266f, -133.273f);
bezierVertex(-21.386f, -134.48f, -22.25f, -135.841f, -22.671f, -137.449f);
bezierVertex(-23.243f, -139.633f, -22.886f, -141.692f, -21.776f, -143.633f);
bezierVertex(-20.813f, -145.318f, -19.455f, -146.637f, -17.884f, -147.745f);
bezierVertex(-15.555f, -149.388f, -12.965f, -150.452f, -10.221f, -151.171f);
bezierVertex(-9.561f, -151.344f, -8.895f, -151.489f, -8.226f, -151.617f);
bezierVertex(-7.502f, -150.592f, -6.588f, -149.797f, -5.428f, -149.3f);
bezierVertex(-4.912f, -149.079f, -4.375f, -148.941f, -3.82f, -148.859f);
bezierVertex(-2.844f, -148.713f, -1.898f, -148.825f, -0.972f, -149.143f);
bezierVertex(-0.251f, -149.391f, 0.402f, -149.762f, 0.99f, -150.253f);
bezierVertex(1.813f, -150.941f, 2.428f, -151.774f, 2.819f, -152.768f);
bezierVertex(3.016f, -153.273f, 3.145f, -153.796f, 3.212f, -154.341f);
bezierVertex(3.267f, -154.799f, 3.286f, -155.249f, 3.238f, -155.703f);
bezierVertex(3.18f, -156.232f, 3.062f, -156.75f, 2.891f, -157.256f);
endShape();
fill(243, 241, 241);
beginShape();
vertex(0.215f, -155.096f);
bezierVertex(0.216f, -153.333f, -1.23f, -151.854f, -2.957f, -151.853f);
bezierVertex(-4.714f, -151.851f, -6.182f, -153.323f, -6.185f, -155.09f);
bezierVertex(-6.188f, -156.845f, -4.724f, -158.305f, -2.963f, -158.303f);
bezierVertex(-1.227f, -158.3f, 0.214f, -156.847f, 0.215f, -155.096f);
endShape();
popMatrix();

      break;
    }
  }

  public void gamer_2() {
    switch(seleccion_personaje_2) {
    case 0:
      
pushMatrix();
translate(953, 405);
noStroke();
fill(182, 19, 0);
rect(-42.333f, -176.333f, 94, 43.333f);
beginShape();
vertex(-37.386f, -133);
vertex(-32.788f, -82.954f);
vertex(20.086f, -82.954f);
vertex(39.625f, -133);
//vertex(-680, -0.5);
endShape(CLOSE);
beginShape();
vertex(51.667f, -176.333f);
vertex(77.965f, -154.667f);
vertex(51.667f, -133);
endShape(CLOSE);
beginShape();
vertex(-42.333f, -176.333f);
vertex(-68.631f, -154.667f);
vertex(-42.333f, -133);
endShape(CLOSE);
rect(-86.363f, -149.637f, 31.304f, 46.846f);
rect(62.313f, -149.637f, 31.304f, 46.846f);
fill(21, 19, 19);
beginShape();
vertex(-97.428f, -117.277f);
vertex(-72.677f, -98.112f);
vertex(-97.428f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(104.682f, -117.277f);
vertex(79.931f, -98.112f);
vertex(104.682f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(-97.122f, -98.112f);
vertex(-85.052f, -77.207f);
vertex(-72.983f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(80.236f, -98.112f);
vertex(92.306f, -77.207f);
vertex(104.375f, -98.112f);
endShape(CLOSE);
ellipse(-89.896f, -73.759f, 16.092f, 16.092f);
ellipse(92.307f, -73.759f, 16.092f, 16.092f);
fill(255, 120, 0);
rect(-32.788f, -82.954f, 53.282f, 9.195f);
fill(21, 19, 19);
beginShape();
vertex(-32.788f, -73.759f);
vertex(20.494f, -73.759f);
vertex(0, -42.725f);
vertex(-12.41f, -42.725f);
endShape(CLOSE);
fill(182, 19, 0);
beginShape();
vertex(-12.41f, -42.725f);
vertex(-32.788f, 0);
vertex(-68.631f, -21.362f);
vertex(-32.788f, -73.759f);
endShape(CLOSE);
beginShape();
vertex(1.119f, -42.725f);
vertex(21.497f, 0);
vertex(57.34f, -21.362f);
vertex(21.497f, -73.759f);
endShape(CLOSE);
beginShape();
vertex(-68.631f, -21.362f);
vertex(-32.788f, 0);
vertex(-62.265f, 31.988f);
endShape(CLOSE);
beginShape();
vertex(57.547f, -21.362f);
vertex(21.704f, 0);
vertex(51.181f, 31.988f);
endShape(CLOSE);
fill(21, 19, 19);
beginShape();
vertex(-82.026f, 54.977f);
vertex(-59.96f, 16.759f);
vertex(-37.896f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(25.25f, 54.977f);
vertex(47.315f, 16.759f);
vertex(69.381f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(-82.026f, 54.977f);
vertex(-59.961f, 97.506f);
vertex(-37.896f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(25.25f, 54.977f);
vertex(47.314f, 97.506f);
vertex(69.381f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(-59.961f, 83.712f);
vertex(-55.482f, 105.552f);
vertex(-89.896f, 105.552f);
endShape(CLOSE);
beginShape();
vertex(44.818f, 86.586f);
vertex(40.34f, 108.426f);
vertex(74.754f, 108.426f);
endShape(CLOSE);
fill(232, 148, 98);
beginShape();
vertex(-18.354f, -176.333f);
vertex(2.06f, -211.69f);
vertex(22.473f, -176.333f);
endShape(CLOSE);
ellipse(2.06f, -204.855f, 46.29f, 38.523f);
fill(236, 232, 0);
beginShape();
vertex(-12.41f, -225.772f);
vertex(16.529f, -225.772f);
bezierVertex(16.529f, -225.772f, 1.813f, -242.153f, -12.41f, -225.772f);
endShape();
fill(243, 241, 241);
stroke(182, 19, 0);
beginShape();
vertex(-12.41f, -194.012f);
vertex(16.529f, -194.012f);
bezierVertex(16.529f, -194.012f, 1.813f, -177.631f, -12.41f, -194.012f);
endShape();
fill(21, 19, 19);
noStroke();
beginShape();
vertex(-16.805f, -218.074f);
vertex(20.494f, -219.117f);
vertex(23.349f, -204.855f);
vertex(-19.231f, -204.855f);
bezierVertex(-19.23f, -204.855f, -21.931f, -217.931f, -16.805f, -218.074f);
endShape();
fill(243, 241, 241);
ellipse(-6.724f, -211.69f, 4.598f, 4.598f);
ellipse(10.844f, -211.987f, 4.598f, 4.598f);
fill(255, 120, 0);
beginShape();
vertex(-27.611f, -141.419f);
bezierVertex(-27.611f, -141.937f, -27.611f, -142.454f, -27.611f, -142.971f);
bezierVertex(-27.534f, -143.163f, -27.549f, -143.369f, -27.521f, -143.569f);
bezierVertex(-27.284f, -145.229f, -26.683f, -146.751f, -25.78f, -148.157f);
bezierVertex(-24.393f, -150.317f, -22.532f, -151.995f, -20.393f, -153.376f);
bezierVertex(-16.815f, -155.686f, -12.87f, -157.02f, -8.695f, -157.732f);
bezierVertex(-8.702f, -157.699f, -8.705f, -157.666f, -8.718f, -157.636f);
bezierVertex(-9.006f, -156.97f, -9.167f, -156.279f, -9.235f, -155.553f);
bezierVertex(-9.312f, -154.731f, -9.2f, -153.94f, -8.963f, -153.161f);
bezierVertex(-8.796f, -152.61f, -8.525f, -152.106f, -8.227f, -151.615f);
bezierVertex(-8.896f, -151.487f, -9.562f, -151.342f, -10.222f, -151.169f);
bezierVertex(-12.965f, -150.45f, -15.556f, -149.386f, -17.885f, -147.743f);
bezierVertex(-19.456f, -146.635f, -20.814f, -145.315f, -21.777f, -143.631f);
bezierVertex(-22.886f, -141.69f, -23.244f, -139.631f, -22.672f, -137.447f);
bezierVertex(-22.251f, -135.839f, -21.387f, -134.478f, -20.267f, -133.271f);
bezierVertex(-18.977f, -131.881f, -17.451f, -130.802f, -15.783f, -129.917f);
bezierVertex(-13.771f, -128.85f, -11.643f, -128.099f, -9.425f, -127.594f);
bezierVertex(-8.676f, -127.424f, -7.925f, -127.268f, -7.163f, -127.167f);
bezierVertex(-7.131f, -126.929f, -7.223f, -126.695f, -7.182f, -126.457f);
bezierVertex(-7.34f, -126.472f, -7.499f, -126.479f, -7.655f, -126.503f);
bezierVertex(-9.345f, -126.753f, -11.018f, -127.092f, -12.66f, -127.57f);
bezierVertex(-15.609f, -128.43f, -18.398f, -129.636f, -20.935f, -131.386f);
bezierVertex(-22.656f, -132.573f, -24.184f, -133.962f, -25.401f, -135.674f);
bezierVertex(-26.487f, -137.203f, -27.234f, -138.873f, -27.507f, -140.741f);
bezierVertex(-27.541f, -140.969f, -27.526f, -141.202f, -27.611f, -141.419f);
endShape();
fill(236, 232, 0);
beginShape();
vertex(-7.181f, -126.458f);
bezierVertex(-7.222f, -126.696f, -7.13f, -126.931f, -7.162f, -127.168f);
bezierVertex(-7.162f, -132.619f, -7.159f, -138.069f, -7.166f, -143.52f);
bezierVertex(-7.166f, -143.725f, -7.112f, -143.801f, -6.913f, -143.846f);
bezierVertex(-3.963f, -144.512f, -1.016f, -145.185f, 1.933f, -145.857f);
bezierVertex(2.159f, -145.908f, 2.16f, -145.909f, 2.16f, -145.679f);
bezierVertex(2.16f, -141.382f, 2.16f, -137.085f, 2.16f, -132.788f);
bezierVertex(2.16f, -132.702f, 2.163f, -132.616f, 2.164f, -132.53f);
bezierVertex(2.163f, -130.478f, 2.163f, -128.426f, 2.163f, -126.374f);
bezierVertex(1.816f, -126.299f, 1.462f, -126.296f, 1.112f, -126.252f);
bezierVertex(1.049f, -126.244f, 0.979f, -126.276f, 0.929f, -126.212f);
bezierVertex(-1.128f, -126.212f, -3.184f, -126.212f, -5.24f, -126.212f);
bezierVertex(-5.428f, -126.285f, -5.628f, -126.267f, -5.822f, -126.29f);
bezierVertex(-6.276f, -126.345f, -6.733f, -126.368f, -7.181f, -126.458f);
endShape();
beginShape();
vertex(-8.694f, -157.732f);
bezierVertex(-8.455f, -158.136f, -8.238f, -158.553f, -7.942f, -158.922f);
bezierVertex(-6.846f, -160.29f, -5.434f, -161.095f, -3.693f, -161.319f);
bezierVertex(-3.65f, -161.325f, -3.597f, -161.309f, -3.569f, -161.361f);
bezierVertex(-3.211f, -161.361f, -2.852f, -161.361f, -2.494f, -161.361f);
bezierVertex(-2.16f, -161.286f, -1.816f, -161.268f, -1.483f, -161.182f);
bezierVertex(0.227f, -160.742f, 1.52f, -159.75f, 2.427f, -158.243f);
bezierVertex(2.472f, -158.169f, 2.517f, -158.096f, 2.562f, -158.023f);
bezierVertex(2.672f, -157.767f, 2.783f, -157.511f, 2.892f, -157.255f);
bezierVertex(3.063f, -156.749f, 3.181f, -156.231f, 3.239f, -155.701f);
bezierVertex(3.287f, -155.247f, 3.267f, -154.797f, 3.213f, -154.339f);
bezierVertex(3.147f, -153.794f, 3.018f, -153.271f, 2.82f, -152.766f);
bezierVertex(2.429f, -151.772f, 1.814f, -150.938f, 0.991f, -150.251f);
bezierVertex(0.403f, -149.76f, -0.25f, -149.389f, -0.971f, -149.141f);
bezierVertex(-1.896f, -148.823f, -2.843f, -148.711f, -3.819f, -148.857f);
bezierVertex(-4.375f, -148.94f, -4.912f, -149.078f, -5.427f, -149.298f);
bezierVertex(-6.587f, -149.795f, -7.501f, -150.59f, -8.225f, -151.615f);
bezierVertex(-8.522f, -152.106f, -8.793f, -152.61f, -8.961f, -153.161f);
bezierVertex(-9.198f, -153.94f, -9.31f, -154.731f, -9.233f, -155.553f);
bezierVertex(-9.165f, -156.278f, -9.004f, -156.97f, -8.716f, -157.636f);
bezierVertex(-8.705f, -157.666f, -8.702f, -157.7f, -8.694f, -157.732f);
endShape();
beginShape();
vertex(0.215f, -155.096f);
bezierVertex(0.214f, -156.847f, -1.226f, -158.301f, -2.964f, -158.303f);
bezierVertex(-4.725f, -158.305f, -6.189f, -156.845f, -6.186f, -155.09f);
bezierVertex(-6.183f, -153.323f, -4.715f, -151.851f, -2.958f, -151.853f);
bezierVertex(-1.23f, -151.854f, 0.216f, -153.333f, 0.215f, -155.096f);
endShape();
fill(255, 120, 0);
beginShape();
vertex(2.891f, -157.256f);
bezierVertex(2.782f, -157.512f, 2.671f, -157.768f, 2.561f, -158.024f);
bezierVertex(3.198f, -157.99f, 3.824f, -157.875f, 4.45f, -157.769f);
bezierVertex(6.701f, -157.386f, 8.901f, -156.81f, 11.034f, -155.993f);
bezierVertex(13.612f, -155.005f, 16.024f, -153.722f, 18.165f, -151.961f);
bezierVertex(19.989f, -150.46f, 21.503f, -148.707f, 22.481f, -146.53f);
bezierVertex(22.901f, -145.594f, 23.198f, -144.619f, 23.324f, -143.601f);
bezierVertex(23.374f, -143.189f, 23.317f, -142.766f, 23.343f, -142.349f);
bezierVertex(23.512f, -139.478f, 22.372f, -137.081f, 20.629f, -134.915f);
bezierVertex(19.052f, -132.956f, 17.077f, -131.47f, 14.9f, -130.241f);
bezierVertex(12.251f, -128.744f, 9.413f, -127.741f, 6.454f, -127.067f);
bezierVertex(5.103f, -126.76f, 3.737f, -126.538f, 2.36f, -126.383f);
bezierVertex(2.296f, -126.376f, 2.229f, -126.378f, 2.163f, -126.377f);
bezierVertex(2.163f, -128.429f, 2.163f, -130.481f, 2.164f, -132.533f);
bezierVertex(2.243f, -132.539f, 2.323f, -132.543f, 2.401f, -132.554f);
bezierVertex(4.479f, -132.842f, 6.514f, -133.306f, 8.489f, -134.021f);
bezierVertex(10.6f, -134.785f, 12.588f, -135.785f, 14.361f, -137.176f);
bezierVertex(15.72f, -138.242f, 16.886f, -139.482f, 17.704f, -141.018f);
bezierVertex(18.665f, -142.821f, 18.98f, -144.724f, 18.52f, -146.729f);
bezierVertex(18.143f, -148.371f, 17.305f, -149.77f, 16.19f, -151.011f);
bezierVertex(14.794f, -152.565f, 13.107f, -153.733f, 11.256f, -154.679f);
bezierVertex(9.235f, -155.713f, 7.098f, -156.421f, 4.883f, -156.904f);
bezierVertex(4.224f, -157.046f, 3.563f, -157.179f, 2.891f, -157.256f);
endShape();
fill(21, 19, 19);
beginShape();
vertex(2.891f, -157.256f);
bezierVertex(3.563f, -157.179f, 4.224f, -157.046f, 4.883f, -156.902f);
bezierVertex(7.098f, -156.42f, 9.235f, -155.712f, 11.256f, -154.677f);
bezierVertex(13.107f, -153.731f, 14.794f, -152.563f, 16.19f, -151.009f);
bezierVertex(17.305f, -149.767f, 18.143f, -148.369f, 18.52f, -146.727f);
bezierVertex(18.98f, -144.721f, 18.665f, -142.819f, 17.704f, -141.016f);
bezierVertex(16.887f, -139.479f, 15.721f, -138.24f, 14.361f, -137.174f);
bezierVertex(12.588f, -135.783f, 10.6f, -134.783f, 8.489f, -134.019f);
bezierVertex(6.514f, -133.305f, 4.479f, -132.84f, 2.401f, -132.552f);
bezierVertex(2.323f, -132.541f, 2.243f, -132.538f, 2.164f, -132.531f);
bezierVertex(2.163f, -132.617f, 2.16f, -132.703f, 2.16f, -132.789f);
bezierVertex(2.16f, -137.086f, 2.16f, -141.383f, 2.16f, -145.68f);
bezierVertex(2.16f, -145.909f, 2.159f, -145.909f, 1.933f, -145.858f);
bezierVertex(-1.015f, -145.186f, -3.963f, -144.512f, -6.913f, -143.847f);
bezierVertex(-7.112f, -143.802f, -7.166f, -143.726f, -7.166f, -143.521f);
bezierVertex(-7.159f, -138.07f, -7.162f, -132.62f, -7.162f, -127.169f);
bezierVertex(-7.924f, -127.27f, -8.675f, -127.426f, -9.424f, -127.596f);
bezierVertex(-11.642f, -128.1f, -13.771f, -128.851f, -15.782f, -129.919f);
bezierVertex(-17.45f, -130.803f, -18.976f, -131.882f, -20.266f, -133.273f);
bezierVertex(-21.386f, -134.48f, -22.25f, -135.841f, -22.671f, -137.449f);
bezierVertex(-23.243f, -139.633f, -22.886f, -141.692f, -21.776f, -143.633f);
bezierVertex(-20.813f, -145.318f, -19.455f, -146.637f, -17.884f, -147.745f);
bezierVertex(-15.555f, -149.388f, -12.965f, -150.452f, -10.221f, -151.171f);
bezierVertex(-9.561f, -151.344f, -8.895f, -151.489f, -8.226f, -151.617f);
bezierVertex(-7.502f, -150.592f, -6.588f, -149.797f, -5.428f, -149.3f);
bezierVertex(-4.912f, -149.079f, -4.375f, -148.941f, -3.82f, -148.859f);
bezierVertex(-2.844f, -148.713f, -1.898f, -148.825f, -0.972f, -149.143f);
bezierVertex(-0.251f, -149.391f, 0.402f, -149.762f, 0.99f, -150.253f);
bezierVertex(1.813f, -150.941f, 2.428f, -151.774f, 2.819f, -152.768f);
bezierVertex(3.016f, -153.273f, 3.145f, -153.796f, 3.212f, -154.341f);
bezierVertex(3.267f, -154.799f, 3.286f, -155.249f, 3.238f, -155.703f);
bezierVertex(3.18f, -156.232f, 3.062f, -156.75f, 2.891f, -157.256f);
endShape();
fill(243, 241, 241);
beginShape();
vertex(0.215f, -155.096f);
bezierVertex(0.216f, -153.333f, -1.23f, -151.854f, -2.957f, -151.853f);
bezierVertex(-4.714f, -151.851f, -6.182f, -153.323f, -6.185f, -155.09f);
bezierVertex(-6.188f, -156.845f, -4.724f, -158.305f, -2.963f, -158.303f);
bezierVertex(-1.227f, -158.3f, 0.214f, -156.847f, 0.215f, -155.096f);
endShape();
popMatrix();

      break;
    }
  }
  
  public int danio(){
    return danio;
  }
}
class CElastigirl implements Carta{
  int ataque;
  int danio;
  int forma;
  CElastigirl(int ataque_, int danio_, int forma_) {
    ataque = ataque_;
    danio = danio_;
    forma = forma_;
  }
  
  public void forma() {
    switch(forma) {
      case 1:

pushMatrix();
translate(413, 405);
noStroke();
fill(114, 37, 14);
beginShape();
vertex(-30.081f, -158.816f);
vertex(-12.41f, -147.322f);
vertex(-34.678f, -147.322f);
endShape(CLOSE);
ellipse(5.323f, -192.299f, 100.346f, 97.701f);
fill(232, 148, 98);
beginShape();
vertex(-23.544f, -182.954f);
bezierVertex(-18.586f, -170.31f, -12.41f, -163.414f, -12.41f, -163.414f);
bezierVertex(-12.41f, -163.414f, -0.954f, -148.472f, 0, -139.276f);
vertex(10.842f, -139.276f);
vertex(34.287f, -182.954f);
vertex(34.287f, -219.736f);
vertex(-23.544f, -219.736f);
vertex(-23.544f, -182.954f);
endShape();
stroke(114, 37, 14);
beginShape();
vertex(5.865f, -165.912f);
vertex(10.842f, -174.532f);
vertex(15.818f, -165.912f);
endShape(CLOSE);
fill(21, 19, 19);
noStroke();
beginShape();
vertex(-21.496f, -178.172f);
vertex(31.721f, -178.172f);
vertex(34.287f, -182.954f);
vertex(34.287f, -194.893f);
vertex(-23.544f, -195.189f);
vertex(-23.544f, -182.954f);
endShape(CLOSE);
fill(243, 241, 241);
ellipse(-2.919f, -186.533f, 4.598f, 4.598f);
ellipse(14.649f, -186.83f, 4.598f, 4.598f);
stroke(182, 19, 0);
strokeWeight(0);
beginShape();
vertex(-3.994f, -157.104f);
vertex(15.394f, -157.104f);
bezierVertex(15.395f, -157.104f, 5.534f, -143.451f, -3.994f, -157.104f);
endShape();
fill(114, 37, 14);
noStroke();
ellipse(-12.411f, -213.573f, 89.857f, 22.438f);
ellipse(37.518f, -206.995f, 36.193f, 42.559f);
fill(232, 148, 98);
rect(0.583f, -139.276f, 10.052f, 9.264f);
fill(182, 19, 0);
beginShape();
vertex(-23.544f, -130.013f);
vertex(31.667f, -130.013f);
bezierVertex(31.667f, -130.013f, 72.334f, -78.334f, 74.334f, -55);
bezierVertex(74.334f, -55, 64.184f, -49, 59.259f, -49);
bezierVertex(59.259f, -49, 37.122f, -103.605f, 25.395f, -114.969f);
vertex(10.842f, -61.559f);
vertex(-15, -61.559f);
vertex(-19.667f, -114.015f);
bezierVertex(-19.667f, -114.015f, -43, -62.999f, -51.667f, -56.333f);
vertex(-68.334f, -65.008f);
vertex(-23.544f, -130.013f);
endShape();
fill(21, 19, 19);
beginShape();
vertex(74.334f, -55);
bezierVertex(74.517f, -32.38f, 71.068f, -6.636f, 68.77f, -9.163f);
bezierVertex(68.77f, -9.163f, 65.994f, -33.14f, 59.259f, -49);
vertex(74.334f, -55);
endShape();
beginShape();
vertex(-68.326f, -62.626f);
bezierVertex(-68.509f, -40.006f, -65.06f, -14.262f, -62.762f, -16.789f);
bezierVertex(-62.762f, -16.789f, -59.986f, -40.766f, -53.251f, -56.626f);
vertex(-68.326f, -62.626f);
endShape();
ellipse(-68.333f, -9.277f, 12.949f, 12.949f);
ellipse(66.8f, -0.001f, 12.949f, 12.949f);
fill(255, 120, 0);
beginShape();
vertex(-15, -61.56f);
vertex(10.842f, -61.56f);
vertex(10.052f, -49);
vertex(-15, -49);
endShape(CLOSE);
fill(21, 19, 19);
beginShape();
vertex(-14.148f, -50.074f);
vertex(-2.079f, -29.169f);
vertex(9.99f, -50.074f);
endShape(CLOSE);
fill(182, 19, 0);
beginShape();
vertex(-2.079f, -29.169f);
vertex(10.842f, 12.199f);
vertex(23.16f, 0);
vertex(9.99f, -50.074f);
endShape(CLOSE);
beginShape();
vertex(-2.38f, -29.169f);
vertex(-15.301f, 12.199f);
vertex(-27.62f, 0);
vertex(-14.45f, -50.074f);
endShape(CLOSE);
fill(21, 19, 19);
beginShape();
vertex(10.842f, 12.199f);
vertex(23.16f, 0);
vertex(28.54f, 12.199f);
endShape(CLOSE);
beginShape();
vertex(-14.695f, 12.199f);
vertex(-27.013f, 0);
vertex(-32.393f, 12.199f);
endShape(CLOSE);
beginShape();
vertex(26.781f, 5.954f);
bezierVertex(26.964f, 28.574f, 23.515f, 54.317f, 21.217f, 51.791f);
bezierVertex(21.217f, 51.791f, 18.441f, 27.814f, 11.706f, 11.954f);
vertex(26.781f, 5.954f);
endShape();
beginShape();
vertex(-31.078f, 5.954f);
bezierVertex(-31.261f, 28.574f, -27.812f, 54.317f, -25.514f, 51.791f);
bezierVertex(-25.514f, 51.791f, -22.738f, 27.814f, -16.003f, 11.954f);
vertex(-31.078f, 5.954f);
endShape();
beginShape();
vertex(20.118f, 44.188f);
vertex(10.052f, 67.176f);
bezierVertex(10.052f, 67.176f, 8.945f, 72.218f, 26.788f, 72.218f);
vertex(20.118f, 44.188f);
endShape();
beginShape();
vertex(-25.249f, 44.188f);
vertex(-15.183f, 67.176f);
bezierVertex(-15.183f, 67.176f, -14.076f, 72.218f, -31.919f, 72.218f);
vertex(-25.249f, 44.188f);
endShape();
beginShape();
vertex(9.834f, 67.936f);
vertex(18.413f, 98.025f);
vertex(26.992f, 67.936f);
endShape(CLOSE);
beginShape();
vertex(-14.965f, 67.936f);
vertex(-23.544f, 98.025f);
vertex(-32.123f, 67.936f);
endShape(CLOSE);
beginShape();
vertex(18.413f, 88.44f);
vertex(11.706f, 109.705f);
vertex(34.287f, 109.705f);
endShape(CLOSE);
beginShape();
vertex(-22.206f, 87.811f);
vertex(-15.499f, 109.075f);
vertex(-38.08f, 109.075f);
endShape(CLOSE);
fill(255, 120, 0);
beginShape();
vertex(-11.654f, -112.653f);
bezierVertex(-11.654f, -112.951f, -11.654f, -113.248f, -11.654f, -113.545f);
bezierVertex(-11.61f, -113.656f, -11.618f, -113.774f, -11.603f, -113.889f);
bezierVertex(-11.466f, -114.844f, -11.121f, -115.719f, -10.601f, -116.527f);
bezierVertex(-9.803f, -117.769f, -8.734f, -118.734f, -7.503f, -119.528f);
bezierVertex(-5.445f, -120.857f, -3.177f, -121.624f, -0.776f, -122.033f);
bezierVertex(-0.781f, -122.014f, -0.783f, -121.995f, -0.79f, -121.978f);
bezierVertex(-0.955f, -121.595f, -1.047f, -121.198f, -1.086f, -120.781f);
bezierVertex(-1.132f, -120.308f, -1.066f, -119.853f, -0.931f, -119.405f);
bezierVertex(-0.834f, -119.089f, -0.678f, -118.799f, -0.507f, -118.516f);
bezierVertex(-0.893f, -118.443f, -1.276f, -118.359f, -1.655f, -118.26f);
bezierVertex(-3.232f, -117.846f, -4.722f, -117.235f, -6.06f, -116.29f);
bezierVertex(-6.964f, -115.653f, -7.746f, -114.894f, -8.298f, -113.925f);
bezierVertex(-8.937f, -112.809f, -9.142f, -111.625f, -8.814f, -110.369f);
bezierVertex(-8.571f, -109.445f, -8.074f, -108.662f, -7.43f, -107.968f);
bezierVertex(-6.689f, -107.169f, -5.811f, -106.549f, -4.851f, -106.04f);
bezierVertex(-3.695f, -105.427f, -2.47f, -104.994f, -1.195f, -104.705f);
bezierVertex(-0.765f, -104.607f, -0.333f, -104.517f, 0.106f, -104.459f);
bezierVertex(0.124f, -104.323f, 0.071f, -104.188f, 0.094f, -104.051f);
bezierVertex(0.002f, -104.059f, -0.089f, -104.064f, -0.177f, -104.077f);
bezierVertex(-1.15f, -104.221f, -2.112f, -104.416f, -3.056f, -104.691f);
bezierVertex(-4.751f, -105.186f, -6.355f, -105.879f, -7.814f, -106.886f);
bezierVertex(-8.804f, -107.568f, -9.683f, -108.367f, -10.382f, -109.352f);
bezierVertex(-11.008f, -110.231f, -11.437f, -111.191f, -11.593f, -112.266f);
bezierVertex(-11.614f, -112.394f, -11.606f, -112.528f, -11.654f, -112.653f);
endShape();
fill(236, 232, 0);
beginShape();
vertex(0.093f, -104.05f);
bezierVertex(0.07f, -104.187f, 0.122f, -104.322f, 0.105f, -104.458f);
bezierVertex(0.105f, -107.593f, 0.106f, -110.728f, 0.102f, -113.861f);
bezierVertex(0.102f, -113.979f, 0.132f, -114.023f, 0.248f, -114.049f);
bezierVertex(1.943f, -114.432f, 3.64f, -114.819f, 5.334f, -115.206f);
bezierVertex(5.465f, -115.235f, 5.465f, -115.236f, 5.465f, -115.103f);
bezierVertex(5.465f, -112.632f, 5.465f, -110.161f, 5.465f, -107.69f);
bezierVertex(5.465f, -107.641f, 5.467f, -107.591f, 5.467f, -107.542f);
bezierVertex(5.467f, -106.362f, 5.467f, -105.183f, 5.467f, -104.002f);
bezierVertex(5.267f, -103.96f, 5.064f, -103.958f, 4.863f, -103.933f);
bezierVertex(4.827f, -103.929f, 4.787f, -103.947f, 4.758f, -103.911f);
bezierVertex(3.575f, -103.911f, 2.393f, -103.911f, 1.211f, -103.911f);
bezierVertex(1.102f, -103.953f, 0.987f, -103.942f, 0.876f, -103.955f);
bezierVertex(0.613f, -103.985f, 0.351f, -103.998f, 0.093f, -104.05f);
endShape();
beginShape();
vertex(-0.777f, -122.033f);
bezierVertex(-0.639f, -122.265f, -0.514f, -122.505f, -0.345f, -122.718f);
bezierVertex(0.287f, -123.505f, 1.097f, -123.968f, 2.1f, -124.096f);
bezierVertex(2.123f, -124.099f, 2.154f, -124.091f, 2.169f, -124.12f);
bezierVertex(2.376f, -124.12f, 2.582f, -124.12f, 2.787f, -124.12f);
bezierVertex(2.98f, -124.077f, 3.177f, -124.066f, 3.369f, -124.017f);
bezierVertex(4.353f, -123.764f, 5.097f, -123.194f, 5.617f, -122.327f);
bezierVertex(5.642f, -122.285f, 5.67f, -122.243f, 5.695f, -122.201f);
bezierVertex(5.758f, -122.054f, 5.821f, -121.907f, 5.885f, -121.76f);
bezierVertex(5.982f, -121.469f, 6.05f, -121.171f, 6.083f, -120.866f);
bezierVertex(6.11f, -120.605f, 6.099f, -120.346f, 6.067f, -120.083f);
bezierVertex(6.03f, -119.77f, 5.956f, -119.469f, 5.842f, -119.178f);
bezierVertex(5.617f, -118.606f, 5.263f, -118.127f, 4.789f, -117.732f);
bezierVertex(4.451f, -117.449f, 4.076f, -117.236f, 3.662f, -117.093f);
bezierVertex(3.129f, -116.91f, 2.584f, -116.846f, 2.023f, -116.93f);
bezierVertex(1.704f, -116.977f, 1.394f, -117.056f, 1.097f, -117.183f);
bezierVertex(0.43f, -117.469f, -0.095f, -117.926f, -0.51f, -118.516f);
bezierVertex(-0.681f, -118.798f, -0.837f, -119.088f, -0.934f, -119.405f);
bezierVertex(-1.07f, -119.853f, -1.135f, -120.308f, -1.089f, -120.781f);
bezierVertex(-1.05f, -121.198f, -0.958f, -121.595f, -0.793f, -121.978f);
bezierVertex(-0.784f, -121.996f, -0.782f, -122.015f, -0.777f, -122.033f);
endShape();
beginShape();
vertex(4.346f, -120.517f);
bezierVertex(4.345f, -121.524f, 3.517f, -122.36f, 2.518f, -122.361f);
bezierVertex(1.505f, -122.362f, 0.664f, -121.523f, 0.665f, -120.513f);
bezierVertex(0.667f, -119.497f, 1.511f, -118.651f, 2.52f, -118.652f);
bezierVertex(3.515f, -118.653f, 4.346f, -119.503f, 4.346f, -120.517f);
endShape();
fill(255, 120, 0);
beginShape();
vertex(5.886f, -121.759f);
bezierVertex(5.822f, -121.906f, 5.758f, -122.053f, 5.696f, -122.2f);
bezierVertex(6.062f, -122.18f, 6.421f, -122.115f, 6.781f, -122.053f);
bezierVertex(8.075f, -121.833f, 9.341f, -121.502f, 10.567f, -121.032f);
bezierVertex(12.05f, -120.464f, 13.436f, -119.726f, 14.668f, -118.714f);
bezierVertex(15.717f, -117.851f, 16.588f, -116.843f, 17.15f, -115.591f);
bezierVertex(17.391f, -115.053f, 17.562f, -114.492f, 17.634f, -113.907f);
bezierVertex(17.663f, -113.67f, 17.631f, -113.427f, 17.646f, -113.187f);
bezierVertex(17.741f, -111.536f, 17.087f, -110.157f, 16.083f, -108.912f);
bezierVertex(15.177f, -107.786f, 14.042f, -106.932f, 12.79f, -106.224f);
bezierVertex(11.267f, -105.363f, 9.635f, -104.786f, 7.933f, -104.399f);
bezierVertex(7.156f, -104.222f, 6.371f, -104.095f, 5.579f, -104.006f);
bezierVertex(5.542f, -104.002f, 5.504f, -104.003f, 5.466f, -104.002f);
bezierVertex(5.466f, -105.183f, 5.466f, -106.362f, 5.466f, -107.542f);
bezierVertex(5.512f, -107.545f, 5.558f, -107.548f, 5.603f, -107.554f);
bezierVertex(6.798f, -107.72f, 7.969f, -107.987f, 9.104f, -108.397f);
bezierVertex(10.319f, -108.836f, 11.46f, -109.411f, 12.481f, -110.211f);
bezierVertex(13.262f, -110.824f, 13.932f, -111.536f, 14.403f, -112.42f);
bezierVertex(14.956f, -113.457f, 15.137f, -114.551f, 14.872f, -115.704f);
bezierVertex(14.656f, -116.648f, 14.174f, -117.452f, 13.532f, -118.166f);
bezierVertex(12.729f, -119.06f, 11.759f, -119.731f, 10.696f, -120.275f);
bezierVertex(9.533f, -120.869f, 8.304f, -121.276f, 7.031f, -121.554f);
bezierVertex(6.65f, -121.639f, 6.271f, -121.715f, 5.886f, -121.759f);
endShape();
fill(21, 19, 19);
beginShape();
vertex(5.886f, -121.759f);
bezierVertex(6.272f, -121.715f, 6.651f, -121.638f, 7.031f, -121.555f);
bezierVertex(8.304f, -121.278f, 9.533f, -120.87f, 10.696f, -120.276f);
bezierVertex(11.759f, -119.732f, 12.729f, -119.06f, 13.532f, -118.167f);
bezierVertex(14.174f, -117.453f, 14.656f, -116.649f, 14.872f, -115.705f);
bezierVertex(15.138f, -114.552f, 14.956f, -113.457f, 14.403f, -112.421f);
bezierVertex(13.932f, -111.537f, 13.262f, -110.825f, 12.481f, -110.212f);
bezierVertex(11.46f, -109.412f, 10.319f, -108.837f, 9.104f, -108.398f);
bezierVertex(7.969f, -107.987f, 6.798f, -107.72f, 5.603f, -107.555f);
bezierVertex(5.558f, -107.549f, 5.512f, -107.546f, 5.466f, -107.543f);
bezierVertex(5.466f, -107.593f, 5.464f, -107.642f, 5.464f, -107.691f);
bezierVertex(5.464f, -110.162f, 5.464f, -112.632f, 5.464f, -115.104f);
bezierVertex(5.464f, -115.236f, 5.464f, -115.236f, 5.333f, -115.207f);
bezierVertex(3.639f, -114.82f, 1.942f, -114.433f, 0.247f, -114.05f);
bezierVertex(0.132f, -114.024f, 0.101f, -113.98f, 0.101f, -113.862f);
bezierVertex(0.105f, -110.728f, 0.104f, -107.593f, 0.104f, -104.459f);
bezierVertex(-0.334f, -104.518f, -0.767f, -104.607f, -1.197f, -104.705f);
bezierVertex(-2.472f, -104.995f, -3.697f, -105.427f, -4.853f, -106.04f);
bezierVertex(-5.813f, -106.549f, -6.691f, -107.169f, -7.432f, -107.968f);
bezierVertex(-8.076f, -108.662f, -8.573f, -109.445f, -8.816f, -110.369f);
bezierVertex(-9.144f, -111.625f, -8.939f, -112.809f, -8.3f, -113.925f);
bezierVertex(-7.747f, -114.894f, -6.966f, -115.653f, -6.062f, -116.29f);
bezierVertex(-4.724f, -117.235f, -3.234f, -117.847f, -1.657f, -118.26f);
bezierVertex(-1.277f, -118.359f, -0.894f, -118.443f, -0.509f, -118.516f);
bezierVertex(-0.094f, -117.926f, 0.431f, -117.469f, 1.098f, -117.183f);
bezierVertex(1.395f, -117.056f, 1.704f, -116.976f, 2.024f, -116.93f);
bezierVertex(2.585f, -116.846f, 3.129f, -116.91f, 3.663f, -117.093f);
bezierVertex(4.077f, -117.236f, 4.452f, -117.449f, 4.79f, -117.732f);
bezierVertex(5.264f, -118.127f, 5.618f, -118.606f, 5.843f, -119.178f);
bezierVertex(5.956f, -119.469f, 6.031f, -119.769f, 6.068f, -120.083f);
bezierVertex(6.099f, -120.347f, 6.111f, -120.605f, 6.084f, -120.866f);
bezierVertex(6.051f, -121.17f, 5.982f, -121.469f, 5.886f, -121.759f);
endShape();
fill(243, 241, 241);
beginShape();
vertex(4.346f, -120.517f);
bezierVertex(4.346f, -119.503f, 3.515f, -118.653f, 2.521f, -118.653f);
bezierVertex(1.511f, -118.652f, 0.667f, -119.498f, 0.666f, -120.514f);
bezierVertex(0.664f, -121.523f, 1.506f, -122.363f, 2.519f, -122.362f);
bezierVertex(3.517f, -122.36f, 4.345f, -121.524f, 4.346f, -120.517f);
endShape();
popMatrix();

      break;
    }
  }
  
  public void gamer_1() {
    switch(seleccion_personaje_1) {
      case 1:
      
pushMatrix();
translate(413, 405);
noStroke();
fill(114, 37, 14);
beginShape();
vertex(-30.081f, -158.816f);
vertex(-12.41f, -147.322f);
vertex(-34.678f, -147.322f);
endShape(CLOSE);
ellipse(5.323f, -192.299f, 100.346f, 97.701f);
fill(232, 148, 98);
beginShape();
vertex(-23.544f, -182.954f);
bezierVertex(-18.586f, -170.31f, -12.41f, -163.414f, -12.41f, -163.414f);
bezierVertex(-12.41f, -163.414f, -0.954f, -148.472f, 0, -139.276f);
vertex(10.842f, -139.276f);
vertex(34.287f, -182.954f);
vertex(34.287f, -219.736f);
vertex(-23.544f, -219.736f);
vertex(-23.544f, -182.954f);
endShape();
stroke(114, 37, 14);
beginShape();
vertex(5.865f, -165.912f);
vertex(10.842f, -174.532f);
vertex(15.818f, -165.912f);
endShape(CLOSE);
fill(21, 19, 19);
noStroke();
beginShape();
vertex(-21.496f, -178.172f);
vertex(31.721f, -178.172f);
vertex(34.287f, -182.954f);
vertex(34.287f, -194.893f);
vertex(-23.544f, -195.189f);
vertex(-23.544f, -182.954f);
endShape(CLOSE);
fill(243, 241, 241);
ellipse(-2.919f, -186.533f, 4.598f, 4.598f);
ellipse(14.649f, -186.83f, 4.598f, 4.598f);
stroke(182, 19, 0);
strokeWeight(0);
beginShape();
vertex(-3.994f, -157.104f);
vertex(15.394f, -157.104f);
bezierVertex(15.395f, -157.104f, 5.534f, -143.451f, -3.994f, -157.104f);
endShape();
fill(114, 37, 14);
noStroke();
ellipse(-12.411f, -213.573f, 89.857f, 22.438f);
ellipse(37.518f, -206.995f, 36.193f, 42.559f);
fill(232, 148, 98);
rect(0.583f, -139.276f, 10.052f, 9.264f);
fill(182, 19, 0);
beginShape();
vertex(-23.544f, -130.013f);
vertex(31.667f, -130.013f);
bezierVertex(31.667f, -130.013f, 72.334f, -78.334f, 74.334f, -55);
bezierVertex(74.334f, -55, 64.184f, -49, 59.259f, -49);
bezierVertex(59.259f, -49, 37.122f, -103.605f, 25.395f, -114.969f);
vertex(10.842f, -61.559f);
vertex(-15, -61.559f);
vertex(-19.667f, -114.015f);
bezierVertex(-19.667f, -114.015f, -43, -62.999f, -51.667f, -56.333f);
vertex(-68.334f, -65.008f);
vertex(-23.544f, -130.013f);
endShape();
fill(21, 19, 19);
beginShape();
vertex(74.334f, -55);
bezierVertex(74.517f, -32.38f, 71.068f, -6.636f, 68.77f, -9.163f);
bezierVertex(68.77f, -9.163f, 65.994f, -33.14f, 59.259f, -49);
vertex(74.334f, -55);
endShape();
beginShape();
vertex(-68.326f, -62.626f);
bezierVertex(-68.509f, -40.006f, -65.06f, -14.262f, -62.762f, -16.789f);
bezierVertex(-62.762f, -16.789f, -59.986f, -40.766f, -53.251f, -56.626f);
vertex(-68.326f, -62.626f);
endShape();
ellipse(-68.333f, -9.277f, 12.949f, 12.949f);
ellipse(66.8f, -0.001f, 12.949f, 12.949f);
fill(255, 120, 0);
beginShape();
vertex(-15, -61.56f);
vertex(10.842f, -61.56f);
vertex(10.052f, -49);
vertex(-15, -49);
endShape(CLOSE);
fill(21, 19, 19);
beginShape();
vertex(-14.148f, -50.074f);
vertex(-2.079f, -29.169f);
vertex(9.99f, -50.074f);
endShape(CLOSE);
fill(182, 19, 0);
beginShape();
vertex(-2.079f, -29.169f);
vertex(10.842f, 12.199f);
vertex(23.16f, 0);
vertex(9.99f, -50.074f);
endShape(CLOSE);
beginShape();
vertex(-2.38f, -29.169f);
vertex(-15.301f, 12.199f);
vertex(-27.62f, 0);
vertex(-14.45f, -50.074f);
endShape(CLOSE);
fill(21, 19, 19);
beginShape();
vertex(10.842f, 12.199f);
vertex(23.16f, 0);
vertex(28.54f, 12.199f);
endShape(CLOSE);
beginShape();
vertex(-14.695f, 12.199f);
vertex(-27.013f, 0);
vertex(-32.393f, 12.199f);
endShape(CLOSE);
beginShape();
vertex(26.781f, 5.954f);
bezierVertex(26.964f, 28.574f, 23.515f, 54.317f, 21.217f, 51.791f);
bezierVertex(21.217f, 51.791f, 18.441f, 27.814f, 11.706f, 11.954f);
vertex(26.781f, 5.954f);
endShape();
beginShape();
vertex(-31.078f, 5.954f);
bezierVertex(-31.261f, 28.574f, -27.812f, 54.317f, -25.514f, 51.791f);
bezierVertex(-25.514f, 51.791f, -22.738f, 27.814f, -16.003f, 11.954f);
vertex(-31.078f, 5.954f);
endShape();
beginShape();
vertex(20.118f, 44.188f);
vertex(10.052f, 67.176f);
bezierVertex(10.052f, 67.176f, 8.945f, 72.218f, 26.788f, 72.218f);
vertex(20.118f, 44.188f);
endShape();
beginShape();
vertex(-25.249f, 44.188f);
vertex(-15.183f, 67.176f);
bezierVertex(-15.183f, 67.176f, -14.076f, 72.218f, -31.919f, 72.218f);
vertex(-25.249f, 44.188f);
endShape();
beginShape();
vertex(9.834f, 67.936f);
vertex(18.413f, 98.025f);
vertex(26.992f, 67.936f);
endShape(CLOSE);
beginShape();
vertex(-14.965f, 67.936f);
vertex(-23.544f, 98.025f);
vertex(-32.123f, 67.936f);
endShape(CLOSE);
beginShape();
vertex(18.413f, 88.44f);
vertex(11.706f, 109.705f);
vertex(34.287f, 109.705f);
endShape(CLOSE);
beginShape();
vertex(-22.206f, 87.811f);
vertex(-15.499f, 109.075f);
vertex(-38.08f, 109.075f);
endShape(CLOSE);
fill(255, 120, 0);
beginShape();
vertex(-11.654f, -112.653f);
bezierVertex(-11.654f, -112.951f, -11.654f, -113.248f, -11.654f, -113.545f);
bezierVertex(-11.61f, -113.656f, -11.618f, -113.774f, -11.603f, -113.889f);
bezierVertex(-11.466f, -114.844f, -11.121f, -115.719f, -10.601f, -116.527f);
bezierVertex(-9.803f, -117.769f, -8.734f, -118.734f, -7.503f, -119.528f);
bezierVertex(-5.445f, -120.857f, -3.177f, -121.624f, -0.776f, -122.033f);
bezierVertex(-0.781f, -122.014f, -0.783f, -121.995f, -0.79f, -121.978f);
bezierVertex(-0.955f, -121.595f, -1.047f, -121.198f, -1.086f, -120.781f);
bezierVertex(-1.132f, -120.308f, -1.066f, -119.853f, -0.931f, -119.405f);
bezierVertex(-0.834f, -119.089f, -0.678f, -118.799f, -0.507f, -118.516f);
bezierVertex(-0.893f, -118.443f, -1.276f, -118.359f, -1.655f, -118.26f);
bezierVertex(-3.232f, -117.846f, -4.722f, -117.235f, -6.06f, -116.29f);
bezierVertex(-6.964f, -115.653f, -7.746f, -114.894f, -8.298f, -113.925f);
bezierVertex(-8.937f, -112.809f, -9.142f, -111.625f, -8.814f, -110.369f);
bezierVertex(-8.571f, -109.445f, -8.074f, -108.662f, -7.43f, -107.968f);
bezierVertex(-6.689f, -107.169f, -5.811f, -106.549f, -4.851f, -106.04f);
bezierVertex(-3.695f, -105.427f, -2.47f, -104.994f, -1.195f, -104.705f);
bezierVertex(-0.765f, -104.607f, -0.333f, -104.517f, 0.106f, -104.459f);
bezierVertex(0.124f, -104.323f, 0.071f, -104.188f, 0.094f, -104.051f);
bezierVertex(0.002f, -104.059f, -0.089f, -104.064f, -0.177f, -104.077f);
bezierVertex(-1.15f, -104.221f, -2.112f, -104.416f, -3.056f, -104.691f);
bezierVertex(-4.751f, -105.186f, -6.355f, -105.879f, -7.814f, -106.886f);
bezierVertex(-8.804f, -107.568f, -9.683f, -108.367f, -10.382f, -109.352f);
bezierVertex(-11.008f, -110.231f, -11.437f, -111.191f, -11.593f, -112.266f);
bezierVertex(-11.614f, -112.394f, -11.606f, -112.528f, -11.654f, -112.653f);
endShape();
fill(236, 232, 0);
beginShape();
vertex(0.093f, -104.05f);
bezierVertex(0.07f, -104.187f, 0.122f, -104.322f, 0.105f, -104.458f);
bezierVertex(0.105f, -107.593f, 0.106f, -110.728f, 0.102f, -113.861f);
bezierVertex(0.102f, -113.979f, 0.132f, -114.023f, 0.248f, -114.049f);
bezierVertex(1.943f, -114.432f, 3.64f, -114.819f, 5.334f, -115.206f);
bezierVertex(5.465f, -115.235f, 5.465f, -115.236f, 5.465f, -115.103f);
bezierVertex(5.465f, -112.632f, 5.465f, -110.161f, 5.465f, -107.69f);
bezierVertex(5.465f, -107.641f, 5.467f, -107.591f, 5.467f, -107.542f);
bezierVertex(5.467f, -106.362f, 5.467f, -105.183f, 5.467f, -104.002f);
bezierVertex(5.267f, -103.96f, 5.064f, -103.958f, 4.863f, -103.933f);
bezierVertex(4.827f, -103.929f, 4.787f, -103.947f, 4.758f, -103.911f);
bezierVertex(3.575f, -103.911f, 2.393f, -103.911f, 1.211f, -103.911f);
bezierVertex(1.102f, -103.953f, 0.987f, -103.942f, 0.876f, -103.955f);
bezierVertex(0.613f, -103.985f, 0.351f, -103.998f, 0.093f, -104.05f);
endShape();
beginShape();
vertex(-0.777f, -122.033f);
bezierVertex(-0.639f, -122.265f, -0.514f, -122.505f, -0.345f, -122.718f);
bezierVertex(0.287f, -123.505f, 1.097f, -123.968f, 2.1f, -124.096f);
bezierVertex(2.123f, -124.099f, 2.154f, -124.091f, 2.169f, -124.12f);
bezierVertex(2.376f, -124.12f, 2.582f, -124.12f, 2.787f, -124.12f);
bezierVertex(2.98f, -124.077f, 3.177f, -124.066f, 3.369f, -124.017f);
bezierVertex(4.353f, -123.764f, 5.097f, -123.194f, 5.617f, -122.327f);
bezierVertex(5.642f, -122.285f, 5.67f, -122.243f, 5.695f, -122.201f);
bezierVertex(5.758f, -122.054f, 5.821f, -121.907f, 5.885f, -121.76f);
bezierVertex(5.982f, -121.469f, 6.05f, -121.171f, 6.083f, -120.866f);
bezierVertex(6.11f, -120.605f, 6.099f, -120.346f, 6.067f, -120.083f);
bezierVertex(6.03f, -119.77f, 5.956f, -119.469f, 5.842f, -119.178f);
bezierVertex(5.617f, -118.606f, 5.263f, -118.127f, 4.789f, -117.732f);
bezierVertex(4.451f, -117.449f, 4.076f, -117.236f, 3.662f, -117.093f);
bezierVertex(3.129f, -116.91f, 2.584f, -116.846f, 2.023f, -116.93f);
bezierVertex(1.704f, -116.977f, 1.394f, -117.056f, 1.097f, -117.183f);
bezierVertex(0.43f, -117.469f, -0.095f, -117.926f, -0.51f, -118.516f);
bezierVertex(-0.681f, -118.798f, -0.837f, -119.088f, -0.934f, -119.405f);
bezierVertex(-1.07f, -119.853f, -1.135f, -120.308f, -1.089f, -120.781f);
bezierVertex(-1.05f, -121.198f, -0.958f, -121.595f, -0.793f, -121.978f);
bezierVertex(-0.784f, -121.996f, -0.782f, -122.015f, -0.777f, -122.033f);
endShape();
beginShape();
vertex(4.346f, -120.517f);
bezierVertex(4.345f, -121.524f, 3.517f, -122.36f, 2.518f, -122.361f);
bezierVertex(1.505f, -122.362f, 0.664f, -121.523f, 0.665f, -120.513f);
bezierVertex(0.667f, -119.497f, 1.511f, -118.651f, 2.52f, -118.652f);
bezierVertex(3.515f, -118.653f, 4.346f, -119.503f, 4.346f, -120.517f);
endShape();
fill(255, 120, 0);
beginShape();
vertex(5.886f, -121.759f);
bezierVertex(5.822f, -121.906f, 5.758f, -122.053f, 5.696f, -122.2f);
bezierVertex(6.062f, -122.18f, 6.421f, -122.115f, 6.781f, -122.053f);
bezierVertex(8.075f, -121.833f, 9.341f, -121.502f, 10.567f, -121.032f);
bezierVertex(12.05f, -120.464f, 13.436f, -119.726f, 14.668f, -118.714f);
bezierVertex(15.717f, -117.851f, 16.588f, -116.843f, 17.15f, -115.591f);
bezierVertex(17.391f, -115.053f, 17.562f, -114.492f, 17.634f, -113.907f);
bezierVertex(17.663f, -113.67f, 17.631f, -113.427f, 17.646f, -113.187f);
bezierVertex(17.741f, -111.536f, 17.087f, -110.157f, 16.083f, -108.912f);
bezierVertex(15.177f, -107.786f, 14.042f, -106.932f, 12.79f, -106.224f);
bezierVertex(11.267f, -105.363f, 9.635f, -104.786f, 7.933f, -104.399f);
bezierVertex(7.156f, -104.222f, 6.371f, -104.095f, 5.579f, -104.006f);
bezierVertex(5.542f, -104.002f, 5.504f, -104.003f, 5.466f, -104.002f);
bezierVertex(5.466f, -105.183f, 5.466f, -106.362f, 5.466f, -107.542f);
bezierVertex(5.512f, -107.545f, 5.558f, -107.548f, 5.603f, -107.554f);
bezierVertex(6.798f, -107.72f, 7.969f, -107.987f, 9.104f, -108.397f);
bezierVertex(10.319f, -108.836f, 11.46f, -109.411f, 12.481f, -110.211f);
bezierVertex(13.262f, -110.824f, 13.932f, -111.536f, 14.403f, -112.42f);
bezierVertex(14.956f, -113.457f, 15.137f, -114.551f, 14.872f, -115.704f);
bezierVertex(14.656f, -116.648f, 14.174f, -117.452f, 13.532f, -118.166f);
bezierVertex(12.729f, -119.06f, 11.759f, -119.731f, 10.696f, -120.275f);
bezierVertex(9.533f, -120.869f, 8.304f, -121.276f, 7.031f, -121.554f);
bezierVertex(6.65f, -121.639f, 6.271f, -121.715f, 5.886f, -121.759f);
endShape();
fill(21, 19, 19);
beginShape();
vertex(5.886f, -121.759f);
bezierVertex(6.272f, -121.715f, 6.651f, -121.638f, 7.031f, -121.555f);
bezierVertex(8.304f, -121.278f, 9.533f, -120.87f, 10.696f, -120.276f);
bezierVertex(11.759f, -119.732f, 12.729f, -119.06f, 13.532f, -118.167f);
bezierVertex(14.174f, -117.453f, 14.656f, -116.649f, 14.872f, -115.705f);
bezierVertex(15.138f, -114.552f, 14.956f, -113.457f, 14.403f, -112.421f);
bezierVertex(13.932f, -111.537f, 13.262f, -110.825f, 12.481f, -110.212f);
bezierVertex(11.46f, -109.412f, 10.319f, -108.837f, 9.104f, -108.398f);
bezierVertex(7.969f, -107.987f, 6.798f, -107.72f, 5.603f, -107.555f);
bezierVertex(5.558f, -107.549f, 5.512f, -107.546f, 5.466f, -107.543f);
bezierVertex(5.466f, -107.593f, 5.464f, -107.642f, 5.464f, -107.691f);
bezierVertex(5.464f, -110.162f, 5.464f, -112.632f, 5.464f, -115.104f);
bezierVertex(5.464f, -115.236f, 5.464f, -115.236f, 5.333f, -115.207f);
bezierVertex(3.639f, -114.82f, 1.942f, -114.433f, 0.247f, -114.05f);
bezierVertex(0.132f, -114.024f, 0.101f, -113.98f, 0.101f, -113.862f);
bezierVertex(0.105f, -110.728f, 0.104f, -107.593f, 0.104f, -104.459f);
bezierVertex(-0.334f, -104.518f, -0.767f, -104.607f, -1.197f, -104.705f);
bezierVertex(-2.472f, -104.995f, -3.697f, -105.427f, -4.853f, -106.04f);
bezierVertex(-5.813f, -106.549f, -6.691f, -107.169f, -7.432f, -107.968f);
bezierVertex(-8.076f, -108.662f, -8.573f, -109.445f, -8.816f, -110.369f);
bezierVertex(-9.144f, -111.625f, -8.939f, -112.809f, -8.3f, -113.925f);
bezierVertex(-7.747f, -114.894f, -6.966f, -115.653f, -6.062f, -116.29f);
bezierVertex(-4.724f, -117.235f, -3.234f, -117.847f, -1.657f, -118.26f);
bezierVertex(-1.277f, -118.359f, -0.894f, -118.443f, -0.509f, -118.516f);
bezierVertex(-0.094f, -117.926f, 0.431f, -117.469f, 1.098f, -117.183f);
bezierVertex(1.395f, -117.056f, 1.704f, -116.976f, 2.024f, -116.93f);
bezierVertex(2.585f, -116.846f, 3.129f, -116.91f, 3.663f, -117.093f);
bezierVertex(4.077f, -117.236f, 4.452f, -117.449f, 4.79f, -117.732f);
bezierVertex(5.264f, -118.127f, 5.618f, -118.606f, 5.843f, -119.178f);
bezierVertex(5.956f, -119.469f, 6.031f, -119.769f, 6.068f, -120.083f);
bezierVertex(6.099f, -120.347f, 6.111f, -120.605f, 6.084f, -120.866f);
bezierVertex(6.051f, -121.17f, 5.982f, -121.469f, 5.886f, -121.759f);
endShape();
fill(243, 241, 241);
beginShape();
vertex(4.346f, -120.517f);
bezierVertex(4.346f, -119.503f, 3.515f, -118.653f, 2.521f, -118.653f);
bezierVertex(1.511f, -118.652f, 0.667f, -119.498f, 0.666f, -120.514f);
bezierVertex(0.664f, -121.523f, 1.506f, -122.363f, 2.519f, -122.362f);
bezierVertex(3.517f, -122.36f, 4.345f, -121.524f, 4.346f, -120.517f);
endShape();
popMatrix();

      break;
    }
  }
  
  public void gamer_2() {
    switch(seleccion_personaje_2) {
      case 1:
      
pushMatrix();
translate(953, 405);
noStroke();
fill(114, 37, 14);
beginShape();
vertex(-30.081f, -158.816f);
vertex(-12.41f, -147.322f);
vertex(-34.678f, -147.322f);
endShape(CLOSE);
ellipse(5.323f, -192.299f, 100.346f, 97.701f);
fill(232, 148, 98);
beginShape();
vertex(-23.544f, -182.954f);
bezierVertex(-18.586f, -170.31f, -12.41f, -163.414f, -12.41f, -163.414f);
bezierVertex(-12.41f, -163.414f, -0.954f, -148.472f, 0, -139.276f);
vertex(10.842f, -139.276f);
vertex(34.287f, -182.954f);
vertex(34.287f, -219.736f);
vertex(-23.544f, -219.736f);
vertex(-23.544f, -182.954f);
endShape();
stroke(114, 37, 14);
beginShape();
vertex(5.865f, -165.912f);
vertex(10.842f, -174.532f);
vertex(15.818f, -165.912f);
endShape(CLOSE);
fill(21, 19, 19);
noStroke();
beginShape();
vertex(-21.496f, -178.172f);
vertex(31.721f, -178.172f);
vertex(34.287f, -182.954f);
vertex(34.287f, -194.893f);
vertex(-23.544f, -195.189f);
vertex(-23.544f, -182.954f);
endShape(CLOSE);
fill(243, 241, 241);
ellipse(-2.919f, -186.533f, 4.598f, 4.598f);
ellipse(14.649f, -186.83f, 4.598f, 4.598f);
stroke(182, 19, 0);
strokeWeight(0);
beginShape();
vertex(-3.994f, -157.104f);
vertex(15.394f, -157.104f);
bezierVertex(15.395f, -157.104f, 5.534f, -143.451f, -3.994f, -157.104f);
endShape();
fill(114, 37, 14);
noStroke();
ellipse(-12.411f, -213.573f, 89.857f, 22.438f);
ellipse(37.518f, -206.995f, 36.193f, 42.559f);
fill(232, 148, 98);
rect(0.583f, -139.276f, 10.052f, 9.264f);
fill(182, 19, 0);
beginShape();
vertex(-23.544f, -130.013f);
vertex(31.667f, -130.013f);
bezierVertex(31.667f, -130.013f, 72.334f, -78.334f, 74.334f, -55);
bezierVertex(74.334f, -55, 64.184f, -49, 59.259f, -49);
bezierVertex(59.259f, -49, 37.122f, -103.605f, 25.395f, -114.969f);
vertex(10.842f, -61.559f);
vertex(-15, -61.559f);
vertex(-19.667f, -114.015f);
bezierVertex(-19.667f, -114.015f, -43, -62.999f, -51.667f, -56.333f);
vertex(-68.334f, -65.008f);
vertex(-23.544f, -130.013f);
endShape();
fill(21, 19, 19);
beginShape();
vertex(74.334f, -55);
bezierVertex(74.517f, -32.38f, 71.068f, -6.636f, 68.77f, -9.163f);
bezierVertex(68.77f, -9.163f, 65.994f, -33.14f, 59.259f, -49);
vertex(74.334f, -55);
endShape();
beginShape();
vertex(-68.326f, -62.626f);
bezierVertex(-68.509f, -40.006f, -65.06f, -14.262f, -62.762f, -16.789f);
bezierVertex(-62.762f, -16.789f, -59.986f, -40.766f, -53.251f, -56.626f);
vertex(-68.326f, -62.626f);
endShape();
ellipse(-68.333f, -9.277f, 12.949f, 12.949f);
ellipse(66.8f, -0.001f, 12.949f, 12.949f);
fill(255, 120, 0);
beginShape();
vertex(-15, -61.56f);
vertex(10.842f, -61.56f);
vertex(10.052f, -49);
vertex(-15, -49);
endShape(CLOSE);
fill(21, 19, 19);
beginShape();
vertex(-14.148f, -50.074f);
vertex(-2.079f, -29.169f);
vertex(9.99f, -50.074f);
endShape(CLOSE);
fill(182, 19, 0);
beginShape();
vertex(-2.079f, -29.169f);
vertex(10.842f, 12.199f);
vertex(23.16f, 0);
vertex(9.99f, -50.074f);
endShape(CLOSE);
beginShape();
vertex(-2.38f, -29.169f);
vertex(-15.301f, 12.199f);
vertex(-27.62f, 0);
vertex(-14.45f, -50.074f);
endShape(CLOSE);
fill(21, 19, 19);
beginShape();
vertex(10.842f, 12.199f);
vertex(23.16f, 0);
vertex(28.54f, 12.199f);
endShape(CLOSE);
beginShape();
vertex(-14.695f, 12.199f);
vertex(-27.013f, 0);
vertex(-32.393f, 12.199f);
endShape(CLOSE);
beginShape();
vertex(26.781f, 5.954f);
bezierVertex(26.964f, 28.574f, 23.515f, 54.317f, 21.217f, 51.791f);
bezierVertex(21.217f, 51.791f, 18.441f, 27.814f, 11.706f, 11.954f);
vertex(26.781f, 5.954f);
endShape();
beginShape();
vertex(-31.078f, 5.954f);
bezierVertex(-31.261f, 28.574f, -27.812f, 54.317f, -25.514f, 51.791f);
bezierVertex(-25.514f, 51.791f, -22.738f, 27.814f, -16.003f, 11.954f);
vertex(-31.078f, 5.954f);
endShape();
beginShape();
vertex(20.118f, 44.188f);
vertex(10.052f, 67.176f);
bezierVertex(10.052f, 67.176f, 8.945f, 72.218f, 26.788f, 72.218f);
vertex(20.118f, 44.188f);
endShape();
beginShape();
vertex(-25.249f, 44.188f);
vertex(-15.183f, 67.176f);
bezierVertex(-15.183f, 67.176f, -14.076f, 72.218f, -31.919f, 72.218f);
vertex(-25.249f, 44.188f);
endShape();
beginShape();
vertex(9.834f, 67.936f);
vertex(18.413f, 98.025f);
vertex(26.992f, 67.936f);
endShape(CLOSE);
beginShape();
vertex(-14.965f, 67.936f);
vertex(-23.544f, 98.025f);
vertex(-32.123f, 67.936f);
endShape(CLOSE);
beginShape();
vertex(18.413f, 88.44f);
vertex(11.706f, 109.705f);
vertex(34.287f, 109.705f);
endShape(CLOSE);
beginShape();
vertex(-22.206f, 87.811f);
vertex(-15.499f, 109.075f);
vertex(-38.08f, 109.075f);
endShape(CLOSE);
fill(255, 120, 0);
beginShape();
vertex(-11.654f, -112.653f);
bezierVertex(-11.654f, -112.951f, -11.654f, -113.248f, -11.654f, -113.545f);
bezierVertex(-11.61f, -113.656f, -11.618f, -113.774f, -11.603f, -113.889f);
bezierVertex(-11.466f, -114.844f, -11.121f, -115.719f, -10.601f, -116.527f);
bezierVertex(-9.803f, -117.769f, -8.734f, -118.734f, -7.503f, -119.528f);
bezierVertex(-5.445f, -120.857f, -3.177f, -121.624f, -0.776f, -122.033f);
bezierVertex(-0.781f, -122.014f, -0.783f, -121.995f, -0.79f, -121.978f);
bezierVertex(-0.955f, -121.595f, -1.047f, -121.198f, -1.086f, -120.781f);
bezierVertex(-1.132f, -120.308f, -1.066f, -119.853f, -0.931f, -119.405f);
bezierVertex(-0.834f, -119.089f, -0.678f, -118.799f, -0.507f, -118.516f);
bezierVertex(-0.893f, -118.443f, -1.276f, -118.359f, -1.655f, -118.26f);
bezierVertex(-3.232f, -117.846f, -4.722f, -117.235f, -6.06f, -116.29f);
bezierVertex(-6.964f, -115.653f, -7.746f, -114.894f, -8.298f, -113.925f);
bezierVertex(-8.937f, -112.809f, -9.142f, -111.625f, -8.814f, -110.369f);
bezierVertex(-8.571f, -109.445f, -8.074f, -108.662f, -7.43f, -107.968f);
bezierVertex(-6.689f, -107.169f, -5.811f, -106.549f, -4.851f, -106.04f);
bezierVertex(-3.695f, -105.427f, -2.47f, -104.994f, -1.195f, -104.705f);
bezierVertex(-0.765f, -104.607f, -0.333f, -104.517f, 0.106f, -104.459f);
bezierVertex(0.124f, -104.323f, 0.071f, -104.188f, 0.094f, -104.051f);
bezierVertex(0.002f, -104.059f, -0.089f, -104.064f, -0.177f, -104.077f);
bezierVertex(-1.15f, -104.221f, -2.112f, -104.416f, -3.056f, -104.691f);
bezierVertex(-4.751f, -105.186f, -6.355f, -105.879f, -7.814f, -106.886f);
bezierVertex(-8.804f, -107.568f, -9.683f, -108.367f, -10.382f, -109.352f);
bezierVertex(-11.008f, -110.231f, -11.437f, -111.191f, -11.593f, -112.266f);
bezierVertex(-11.614f, -112.394f, -11.606f, -112.528f, -11.654f, -112.653f);
endShape();
fill(236, 232, 0);
beginShape();
vertex(0.093f, -104.05f);
bezierVertex(0.07f, -104.187f, 0.122f, -104.322f, 0.105f, -104.458f);
bezierVertex(0.105f, -107.593f, 0.106f, -110.728f, 0.102f, -113.861f);
bezierVertex(0.102f, -113.979f, 0.132f, -114.023f, 0.248f, -114.049f);
bezierVertex(1.943f, -114.432f, 3.64f, -114.819f, 5.334f, -115.206f);
bezierVertex(5.465f, -115.235f, 5.465f, -115.236f, 5.465f, -115.103f);
bezierVertex(5.465f, -112.632f, 5.465f, -110.161f, 5.465f, -107.69f);
bezierVertex(5.465f, -107.641f, 5.467f, -107.591f, 5.467f, -107.542f);
bezierVertex(5.467f, -106.362f, 5.467f, -105.183f, 5.467f, -104.002f);
bezierVertex(5.267f, -103.96f, 5.064f, -103.958f, 4.863f, -103.933f);
bezierVertex(4.827f, -103.929f, 4.787f, -103.947f, 4.758f, -103.911f);
bezierVertex(3.575f, -103.911f, 2.393f, -103.911f, 1.211f, -103.911f);
bezierVertex(1.102f, -103.953f, 0.987f, -103.942f, 0.876f, -103.955f);
bezierVertex(0.613f, -103.985f, 0.351f, -103.998f, 0.093f, -104.05f);
endShape();
beginShape();
vertex(-0.777f, -122.033f);
bezierVertex(-0.639f, -122.265f, -0.514f, -122.505f, -0.345f, -122.718f);
bezierVertex(0.287f, -123.505f, 1.097f, -123.968f, 2.1f, -124.096f);
bezierVertex(2.123f, -124.099f, 2.154f, -124.091f, 2.169f, -124.12f);
bezierVertex(2.376f, -124.12f, 2.582f, -124.12f, 2.787f, -124.12f);
bezierVertex(2.98f, -124.077f, 3.177f, -124.066f, 3.369f, -124.017f);
bezierVertex(4.353f, -123.764f, 5.097f, -123.194f, 5.617f, -122.327f);
bezierVertex(5.642f, -122.285f, 5.67f, -122.243f, 5.695f, -122.201f);
bezierVertex(5.758f, -122.054f, 5.821f, -121.907f, 5.885f, -121.76f);
bezierVertex(5.982f, -121.469f, 6.05f, -121.171f, 6.083f, -120.866f);
bezierVertex(6.11f, -120.605f, 6.099f, -120.346f, 6.067f, -120.083f);
bezierVertex(6.03f, -119.77f, 5.956f, -119.469f, 5.842f, -119.178f);
bezierVertex(5.617f, -118.606f, 5.263f, -118.127f, 4.789f, -117.732f);
bezierVertex(4.451f, -117.449f, 4.076f, -117.236f, 3.662f, -117.093f);
bezierVertex(3.129f, -116.91f, 2.584f, -116.846f, 2.023f, -116.93f);
bezierVertex(1.704f, -116.977f, 1.394f, -117.056f, 1.097f, -117.183f);
bezierVertex(0.43f, -117.469f, -0.095f, -117.926f, -0.51f, -118.516f);
bezierVertex(-0.681f, -118.798f, -0.837f, -119.088f, -0.934f, -119.405f);
bezierVertex(-1.07f, -119.853f, -1.135f, -120.308f, -1.089f, -120.781f);
bezierVertex(-1.05f, -121.198f, -0.958f, -121.595f, -0.793f, -121.978f);
bezierVertex(-0.784f, -121.996f, -0.782f, -122.015f, -0.777f, -122.033f);
endShape();
beginShape();
vertex(4.346f, -120.517f);
bezierVertex(4.345f, -121.524f, 3.517f, -122.36f, 2.518f, -122.361f);
bezierVertex(1.505f, -122.362f, 0.664f, -121.523f, 0.665f, -120.513f);
bezierVertex(0.667f, -119.497f, 1.511f, -118.651f, 2.52f, -118.652f);
bezierVertex(3.515f, -118.653f, 4.346f, -119.503f, 4.346f, -120.517f);
endShape();
fill(255, 120, 0);
beginShape();
vertex(5.886f, -121.759f);
bezierVertex(5.822f, -121.906f, 5.758f, -122.053f, 5.696f, -122.2f);
bezierVertex(6.062f, -122.18f, 6.421f, -122.115f, 6.781f, -122.053f);
bezierVertex(8.075f, -121.833f, 9.341f, -121.502f, 10.567f, -121.032f);
bezierVertex(12.05f, -120.464f, 13.436f, -119.726f, 14.668f, -118.714f);
bezierVertex(15.717f, -117.851f, 16.588f, -116.843f, 17.15f, -115.591f);
bezierVertex(17.391f, -115.053f, 17.562f, -114.492f, 17.634f, -113.907f);
bezierVertex(17.663f, -113.67f, 17.631f, -113.427f, 17.646f, -113.187f);
bezierVertex(17.741f, -111.536f, 17.087f, -110.157f, 16.083f, -108.912f);
bezierVertex(15.177f, -107.786f, 14.042f, -106.932f, 12.79f, -106.224f);
bezierVertex(11.267f, -105.363f, 9.635f, -104.786f, 7.933f, -104.399f);
bezierVertex(7.156f, -104.222f, 6.371f, -104.095f, 5.579f, -104.006f);
bezierVertex(5.542f, -104.002f, 5.504f, -104.003f, 5.466f, -104.002f);
bezierVertex(5.466f, -105.183f, 5.466f, -106.362f, 5.466f, -107.542f);
bezierVertex(5.512f, -107.545f, 5.558f, -107.548f, 5.603f, -107.554f);
bezierVertex(6.798f, -107.72f, 7.969f, -107.987f, 9.104f, -108.397f);
bezierVertex(10.319f, -108.836f, 11.46f, -109.411f, 12.481f, -110.211f);
bezierVertex(13.262f, -110.824f, 13.932f, -111.536f, 14.403f, -112.42f);
bezierVertex(14.956f, -113.457f, 15.137f, -114.551f, 14.872f, -115.704f);
bezierVertex(14.656f, -116.648f, 14.174f, -117.452f, 13.532f, -118.166f);
bezierVertex(12.729f, -119.06f, 11.759f, -119.731f, 10.696f, -120.275f);
bezierVertex(9.533f, -120.869f, 8.304f, -121.276f, 7.031f, -121.554f);
bezierVertex(6.65f, -121.639f, 6.271f, -121.715f, 5.886f, -121.759f);
endShape();
fill(21, 19, 19);
beginShape();
vertex(5.886f, -121.759f);
bezierVertex(6.272f, -121.715f, 6.651f, -121.638f, 7.031f, -121.555f);
bezierVertex(8.304f, -121.278f, 9.533f, -120.87f, 10.696f, -120.276f);
bezierVertex(11.759f, -119.732f, 12.729f, -119.06f, 13.532f, -118.167f);
bezierVertex(14.174f, -117.453f, 14.656f, -116.649f, 14.872f, -115.705f);
bezierVertex(15.138f, -114.552f, 14.956f, -113.457f, 14.403f, -112.421f);
bezierVertex(13.932f, -111.537f, 13.262f, -110.825f, 12.481f, -110.212f);
bezierVertex(11.46f, -109.412f, 10.319f, -108.837f, 9.104f, -108.398f);
bezierVertex(7.969f, -107.987f, 6.798f, -107.72f, 5.603f, -107.555f);
bezierVertex(5.558f, -107.549f, 5.512f, -107.546f, 5.466f, -107.543f);
bezierVertex(5.466f, -107.593f, 5.464f, -107.642f, 5.464f, -107.691f);
bezierVertex(5.464f, -110.162f, 5.464f, -112.632f, 5.464f, -115.104f);
bezierVertex(5.464f, -115.236f, 5.464f, -115.236f, 5.333f, -115.207f);
bezierVertex(3.639f, -114.82f, 1.942f, -114.433f, 0.247f, -114.05f);
bezierVertex(0.132f, -114.024f, 0.101f, -113.98f, 0.101f, -113.862f);
bezierVertex(0.105f, -110.728f, 0.104f, -107.593f, 0.104f, -104.459f);
bezierVertex(-0.334f, -104.518f, -0.767f, -104.607f, -1.197f, -104.705f);
bezierVertex(-2.472f, -104.995f, -3.697f, -105.427f, -4.853f, -106.04f);
bezierVertex(-5.813f, -106.549f, -6.691f, -107.169f, -7.432f, -107.968f);
bezierVertex(-8.076f, -108.662f, -8.573f, -109.445f, -8.816f, -110.369f);
bezierVertex(-9.144f, -111.625f, -8.939f, -112.809f, -8.3f, -113.925f);
bezierVertex(-7.747f, -114.894f, -6.966f, -115.653f, -6.062f, -116.29f);
bezierVertex(-4.724f, -117.235f, -3.234f, -117.847f, -1.657f, -118.26f);
bezierVertex(-1.277f, -118.359f, -0.894f, -118.443f, -0.509f, -118.516f);
bezierVertex(-0.094f, -117.926f, 0.431f, -117.469f, 1.098f, -117.183f);
bezierVertex(1.395f, -117.056f, 1.704f, -116.976f, 2.024f, -116.93f);
bezierVertex(2.585f, -116.846f, 3.129f, -116.91f, 3.663f, -117.093f);
bezierVertex(4.077f, -117.236f, 4.452f, -117.449f, 4.79f, -117.732f);
bezierVertex(5.264f, -118.127f, 5.618f, -118.606f, 5.843f, -119.178f);
bezierVertex(5.956f, -119.469f, 6.031f, -119.769f, 6.068f, -120.083f);
bezierVertex(6.099f, -120.347f, 6.111f, -120.605f, 6.084f, -120.866f);
bezierVertex(6.051f, -121.17f, 5.982f, -121.469f, 5.886f, -121.759f);
endShape();
fill(243, 241, 241);
beginShape();
vertex(4.346f, -120.517f);
bezierVertex(4.346f, -119.503f, 3.515f, -118.653f, 2.521f, -118.653f);
bezierVertex(1.511f, -118.652f, 0.667f, -119.498f, 0.666f, -120.514f);
bezierVertex(0.664f, -121.523f, 1.506f, -122.363f, 2.519f, -122.362f);
bezierVertex(3.517f, -122.36f, 4.345f, -121.524f, 4.346f, -120.517f);
endShape();
popMatrix();

      break;
    }
  }
  
  public int danio(){
    return danio;
  }
}
class CDash implements Carta{
  int ataque;
  int danio;
  int forma;
  CDash(int ataque_, int danio_, int forma_) {
    ataque = ataque_;
    danio = danio_;
    forma = forma_;
  }
  
  public void forma() {
    switch(forma) {
      case 2:
      
pushMatrix();
translate(683, 405);
noStroke();
fill(182, 19, 0);
rect(-42.333f, -176.333f, 94, 43.333f);
beginShape();
vertex(-37.386f, -133);
vertex(-32.788f, -82.954f);
vertex(20.086f, -82.954f);
vertex(39.625f, -133);
//vertex(-680);
endShape(CLOSE);
beginShape();
vertex(51.667f, -176.333f);
vertex(77.965f, -154.667f);
vertex(51.667f, -133);
endShape(CLOSE);
beginShape();
vertex(-42.333f, -176.333f);
vertex(-68.631f, -154.667f);
vertex(-42.333f, -133);
endShape(CLOSE);
rect(-86.363f, -149.637f, 31.304f, 46.846f);
rect(62.313f, -149.637f, 31.304f, 46.846f);
fill(21, 19, 19);
beginShape();
vertex(-97.428f, -117.277f);
vertex(-72.677f, -98.112f);
vertex(-97.428f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(104.682f, -117.277f);
vertex(79.931f, -98.112f);
vertex(104.682f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(-97.122f, -98.112f);
vertex(-85.052f, -77.207f);
vertex(-72.983f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(80.236f, -98.112f);
vertex(92.306f, -77.207f);
vertex(104.375f, -98.112f);
endShape(CLOSE);
ellipse(-89.896f, -73.759f, 16.092f, 16.092f);
ellipse(92.307f, -73.759f, 16.092f, 16.092f);
fill(255, 120, 0);
rect(-32.788f, -82.954f, 53.282f, 9.195f);
fill(21, 19, 19);
beginShape();
vertex(-32.788f, -73.759f);
vertex(20.494f, -73.759f);
vertex(0, -42.725f);
vertex(-12.41f, -42.725f);
endShape(CLOSE);
fill(182, 19, 0);
beginShape();
vertex(-12.41f, -42.725f);
vertex(-32.788f, 0);
vertex(-68.631f, -21.362f);
vertex(-32.788f, -73.759f);
endShape(CLOSE);
beginShape();
vertex(1.119f, -42.725f);
vertex(21.497f, 0);
vertex(57.34f, -21.362f);
vertex(21.497f, -73.759f);
endShape(CLOSE);
beginShape();
vertex(-68.631f, -21.362f);
vertex(-32.788f, 0);
vertex(-62.265f, 31.988f);
endShape(CLOSE);
beginShape();
vertex(57.547f, -21.362f);
vertex(21.704f, 0);
vertex(51.181f, 31.988f);
endShape(CLOSE);
fill(21, 19, 19);
beginShape();
vertex(-82.026f, 54.977f);
vertex(-59.96f, 16.759f);
vertex(-37.896f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(25.25f, 54.977f);
vertex(47.315f, 16.759f);
vertex(69.381f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(-82.026f, 54.977f);
vertex(-59.961f, 97.506f);
vertex(-37.896f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(25.25f, 54.977f);
vertex(47.314f, 97.506f);
vertex(69.381f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(-59.961f, 83.712f);
vertex(-55.482f, 105.552f);
vertex(-89.896f, 105.552f);
endShape(CLOSE);
beginShape();
vertex(44.818f, 86.586f);
vertex(40.34f, 108.426f);
vertex(74.754f, 108.426f);
endShape(CLOSE);
fill(232, 148, 98);
beginShape();
vertex(-18.354f, -176.333f);
vertex(2.06f, -211.69f);
vertex(22.473f, -176.333f);
endShape(CLOSE);
ellipse(2.059f, -208.421f, 48.951f, 52.089f);
fill(243, 241, 241);
stroke(182, 19, 0);
beginShape();
vertex(-12.41f, -194.012f);
vertex(16.529f, -194.012f);
bezierVertex(16.529f, -194.012f, 1.813f, -177.631f, -12.41f, -194.012f);
endShape();
fill(21, 19, 19);
noStroke();
beginShape();
vertex(-18.357f, -218.074f);
vertex(24.312f, -219.117f);
vertex(27.579f, -204.855f);
vertex(-21.131f, -204.855f);
bezierVertex(-21.132f, -204.855f, -24.221f, -217.931f, -18.357f, -218.074f);
endShape();
fill(243, 241, 241);
ellipse(-6.724f, -211.69f, 4.598f, 4.598f);
ellipse(10.844f, -211.987f, 4.598f, 4.598f);
fill(255, 120, 0);
beginShape();
vertex(-27.611f, -141.419f);
bezierVertex(-27.611f, -141.937f, -27.611f, -142.454f, -27.611f, -142.971f);
bezierVertex(-27.534f, -143.163f, -27.549f, -143.369f, -27.521f, -143.569f);
bezierVertex(-27.284f, -145.229f, -26.683f, -146.751f, -25.78f, -148.157f);
bezierVertex(-24.393f, -150.317f, -22.532f, -151.995f, -20.393f, -153.376f);
bezierVertex(-16.815f, -155.686f, -12.87f, -157.02f, -8.695f, -157.732f);
bezierVertex(-8.702f, -157.699f, -8.705f, -157.666f, -8.718f, -157.636f);
bezierVertex(-9.006f, -156.97f, -9.167f, -156.279f, -9.235f, -155.553f);
bezierVertex(-9.312f, -154.731f, -9.2f, -153.94f, -8.963f, -153.161f);
bezierVertex(-8.796f, -152.61f, -8.525f, -152.106f, -8.227f, -151.615f);
bezierVertex(-8.896f, -151.487f, -9.562f, -151.342f, -10.222f, -151.169f);
bezierVertex(-12.965f, -150.45f, -15.556f, -149.386f, -17.885f, -147.743f);
bezierVertex(-19.456f, -146.635f, -20.814f, -145.315f, -21.777f, -143.631f);
bezierVertex(-22.886f, -141.69f, -23.244f, -139.631f, -22.672f, -137.447f);
bezierVertex(-22.251f, -135.839f, -21.387f, -134.478f, -20.267f, -133.271f);
bezierVertex(-18.977f, -131.881f, -17.451f, -130.802f, -15.783f, -129.917f);
bezierVertex(-13.771f, -128.85f, -11.643f, -128.099f, -9.425f, -127.594f);
bezierVertex(-8.676f, -127.424f, -7.925f, -127.268f, -7.163f, -127.167f);
bezierVertex(-7.131f, -126.929f, -7.223f, -126.695f, -7.182f, -126.457f);
bezierVertex(-7.34f, -126.472f, -7.499f, -126.479f, -7.655f, -126.503f);
bezierVertex(-9.345f, -126.753f, -11.018f, -127.092f, -12.66f, -127.57f);
bezierVertex(-15.609f, -128.43f, -18.398f, -129.636f, -20.935f, -131.386f);
bezierVertex(-22.656f, -132.573f, -24.184f, -133.962f, -25.401f, -135.674f);
bezierVertex(-26.487f, -137.203f, -27.234f, -138.873f, -27.507f, -140.741f);
bezierVertex(-27.541f, -140.969f, -27.526f, -141.202f, -27.611f, -141.419f);
endShape();
fill(236, 232, 0);
beginShape();
vertex(-7.181f, -126.458f);
bezierVertex(-7.222f, -126.696f, -7.13f, -126.931f, -7.162f, -127.168f);
bezierVertex(-7.162f, -132.619f, -7.159f, -138.069f, -7.166f, -143.52f);
bezierVertex(-7.166f, -143.725f, -7.112f, -143.801f, -6.913f, -143.846f);
bezierVertex(-3.963f, -144.512f, -1.016f, -145.185f, 1.933f, -145.857f);
bezierVertex(2.159f, -145.908f, 2.16f, -145.909f, 2.16f, -145.679f);
bezierVertex(2.16f, -141.382f, 2.16f, -137.085f, 2.16f, -132.788f);
bezierVertex(2.16f, -132.702f, 2.163f, -132.616f, 2.164f, -132.53f);
bezierVertex(2.163f, -130.478f, 2.163f, -128.426f, 2.163f, -126.374f);
bezierVertex(1.816f, -126.299f, 1.462f, -126.296f, 1.112f, -126.252f);
bezierVertex(1.049f, -126.244f, 0.979f, -126.276f, 0.929f, -126.212f);
bezierVertex(-1.128f, -126.212f, -3.184f, -126.212f, -5.24f, -126.212f);
bezierVertex(-5.428f, -126.285f, -5.628f, -126.267f, -5.822f, -126.29f);
bezierVertex(-6.276f, -126.345f, -6.733f, -126.368f, -7.181f, -126.458f);
endShape();
beginShape();
vertex(-8.694f, -157.732f);
bezierVertex(-8.455f, -158.136f, -8.238f, -158.553f, -7.942f, -158.922f);
bezierVertex(-6.846f, -160.29f, -5.434f, -161.095f, -3.693f, -161.319f);
bezierVertex(-3.65f, -161.325f, -3.597f, -161.309f, -3.569f, -161.361f);
bezierVertex(-3.211f, -161.361f, -2.852f, -161.361f, -2.494f, -161.361f);
bezierVertex(-2.16f, -161.286f, -1.816f, -161.268f, -1.483f, -161.182f);
bezierVertex(0.227f, -160.742f, 1.52f, -159.75f, 2.427f, -158.243f);
bezierVertex(2.472f, -158.169f, 2.517f, -158.096f, 2.562f, -158.023f);
bezierVertex(2.672f, -157.767f, 2.783f, -157.511f, 2.892f, -157.255f);
bezierVertex(3.063f, -156.749f, 3.181f, -156.231f, 3.239f, -155.701f);
bezierVertex(3.287f, -155.247f, 3.267f, -154.797f, 3.213f, -154.339f);
bezierVertex(3.147f, -153.794f, 3.018f, -153.271f, 2.82f, -152.766f);
bezierVertex(2.429f, -151.772f, 1.814f, -150.938f, 0.991f, -150.251f);
bezierVertex(0.403f, -149.76f, -0.25f, -149.389f, -0.971f, -149.141f);
bezierVertex(-1.896f, -148.823f, -2.843f, -148.711f, -3.819f, -148.857f);
bezierVertex(-4.375f, -148.94f, -4.912f, -149.078f, -5.427f, -149.298f);
bezierVertex(-6.587f, -149.795f, -7.501f, -150.59f, -8.225f, -151.615f);
bezierVertex(-8.522f, -152.106f, -8.793f, -152.61f, -8.961f, -153.161f);
bezierVertex(-9.198f, -153.94f, -9.31f, -154.731f, -9.233f, -155.553f);
bezierVertex(-9.165f, -156.278f, -9.004f, -156.97f, -8.716f, -157.636f);
bezierVertex(-8.705f, -157.666f, -8.702f, -157.7f, -8.694f, -157.732f);
endShape();
beginShape();
vertex(0.215f, -155.096f);
bezierVertex(0.214f, -156.847f, -1.226f, -158.301f, -2.964f, -158.303f);
bezierVertex(-4.725f, -158.305f, -6.189f, -156.845f, -6.186f, -155.09f);
bezierVertex(-6.183f, -153.323f, -4.715f, -151.851f, -2.958f, -151.853f);
bezierVertex(-1.23f, -151.854f, 0.216f, -153.333f, 0.215f, -155.096f);
endShape();
fill(255, 120, 0);
beginShape();
vertex(2.891f, -157.256f);
bezierVertex(2.782f, -157.512f, 2.671f, -157.768f, 2.561f, -158.024f);
bezierVertex(3.198f, -157.99f, 3.824f, -157.875f, 4.45f, -157.769f);
bezierVertex(6.701f, -157.386f, 8.901f, -156.81f, 11.034f, -155.993f);
bezierVertex(13.612f, -155.005f, 16.024f, -153.722f, 18.165f, -151.961f);
bezierVertex(19.989f, -150.46f, 21.503f, -148.707f, 22.481f, -146.53f);
bezierVertex(22.901f, -145.594f, 23.198f, -144.619f, 23.324f, -143.601f);
bezierVertex(23.374f, -143.189f, 23.317f, -142.766f, 23.343f, -142.349f);
bezierVertex(23.512f, -139.478f, 22.372f, -137.081f, 20.629f, -134.915f);
bezierVertex(19.052f, -132.956f, 17.077f, -131.47f, 14.9f, -130.241f);
bezierVertex(12.251f, -128.744f, 9.413f, -127.741f, 6.454f, -127.067f);
bezierVertex(5.103f, -126.76f, 3.737f, -126.538f, 2.36f, -126.383f);
bezierVertex(2.296f, -126.376f, 2.229f, -126.378f, 2.163f, -126.377f);
bezierVertex(2.163f, -128.429f, 2.163f, -130.481f, 2.164f, -132.533f);
bezierVertex(2.243f, -132.539f, 2.323f, -132.543f, 2.401f, -132.554f);
bezierVertex(4.479f, -132.842f, 6.514f, -133.306f, 8.489f, -134.021f);
bezierVertex(10.6f, -134.785f, 12.588f, -135.785f, 14.361f, -137.176f);
bezierVertex(15.72f, -138.242f, 16.886f, -139.482f, 17.704f, -141.018f);
bezierVertex(18.665f, -142.821f, 18.98f, -144.724f, 18.52f, -146.729f);
bezierVertex(18.143f, -148.371f, 17.305f, -149.77f, 16.19f, -151.011f);
bezierVertex(14.794f, -152.565f, 13.107f, -153.733f, 11.256f, -154.679f);
bezierVertex(9.235f, -155.713f, 7.098f, -156.421f, 4.883f, -156.904f);
bezierVertex(4.224f, -157.046f, 3.563f, -157.179f, 2.891f, -157.256f);
endShape();
fill(21, 19, 19);
beginShape();
vertex(2.891f, -157.256f);
bezierVertex(3.563f, -157.179f, 4.224f, -157.046f, 4.883f, -156.902f);
bezierVertex(7.098f, -156.42f, 9.235f, -155.712f, 11.256f, -154.677f);
bezierVertex(13.107f, -153.731f, 14.794f, -152.563f, 16.19f, -151.009f);
bezierVertex(17.305f, -149.767f, 18.143f, -148.369f, 18.52f, -146.727f);
bezierVertex(18.98f, -144.721f, 18.665f, -142.819f, 17.704f, -141.016f);
bezierVertex(16.887f, -139.479f, 15.721f, -138.24f, 14.361f, -137.174f);
bezierVertex(12.588f, -135.783f, 10.6f, -134.783f, 8.489f, -134.019f);
bezierVertex(6.514f, -133.305f, 4.479f, -132.84f, 2.401f, -132.552f);
bezierVertex(2.323f, -132.541f, 2.243f, -132.538f, 2.164f, -132.531f);
bezierVertex(2.163f, -132.617f, 2.16f, -132.703f, 2.16f, -132.789f);
bezierVertex(2.16f, -137.086f, 2.16f, -141.383f, 2.16f, -145.68f);
bezierVertex(2.16f, -145.909f, 2.159f, -145.909f, 1.933f, -145.858f);
bezierVertex(-1.015f, -145.186f, -3.963f, -144.512f, -6.913f, -143.847f);
bezierVertex(-7.112f, -143.802f, -7.166f, -143.726f, -7.166f, -143.521f);
bezierVertex(-7.159f, -138.07f, -7.162f, -132.62f, -7.162f, -127.169f);
bezierVertex(-7.924f, -127.27f, -8.675f, -127.426f, -9.424f, -127.596f);
bezierVertex(-11.642f, -128.1f, -13.771f, -128.851f, -15.782f, -129.919f);
bezierVertex(-17.45f, -130.803f, -18.976f, -131.882f, -20.266f, -133.273f);
bezierVertex(-21.386f, -134.48f, -22.25f, -135.841f, -22.671f, -137.449f);
bezierVertex(-23.243f, -139.633f, -22.886f, -141.692f, -21.776f, -143.633f);
bezierVertex(-20.813f, -145.318f, -19.455f, -146.637f, -17.884f, -147.745f);
bezierVertex(-15.555f, -149.388f, -12.965f, -150.452f, -10.221f, -151.171f);
bezierVertex(-9.561f, -151.344f, -8.895f, -151.489f, -8.226f, -151.617f);
bezierVertex(-7.502f, -150.592f, -6.588f, -149.797f, -5.428f, -149.3f);
bezierVertex(-4.912f, -149.079f, -4.375f, -148.941f, -3.82f, -148.859f);
bezierVertex(-2.844f, -148.713f, -1.898f, -148.825f, -0.972f, -149.143f);
bezierVertex(-0.251f, -149.391f, 0.402f, -149.762f, 0.99f, -150.253f);
bezierVertex(1.813f, -150.941f, 2.428f, -151.774f, 2.819f, -152.768f);
bezierVertex(3.016f, -153.273f, 3.145f, -153.796f, 3.212f, -154.341f);
bezierVertex(3.267f, -154.799f, 3.286f, -155.249f, 3.238f, -155.703f);
bezierVertex(3.18f, -156.232f, 3.062f, -156.75f, 2.891f, -157.256f);
endShape();
fill(243, 241, 241);
beginShape();
vertex(0.215f, -155.096f);
bezierVertex(0.216f, -153.333f, -1.23f, -151.854f, -2.957f, -151.853f);
bezierVertex(-4.714f, -151.851f, -6.182f, -153.323f, -6.185f, -155.09f);
bezierVertex(-6.188f, -156.845f, -4.724f, -158.305f, -2.963f, -158.303f);
bezierVertex(-1.227f, -158.3f, 0.214f, -156.847f, 0.215f, -155.096f);
endShape();
fill(236, 232, 0);
beginShape();
vertex(-16.805f, -256.529f);
vertex(20.494f, -258.869f);
vertex(23.349f, -226.893f);
vertex(-19.231f, -226.893f);
bezierVertex(-19.23f, -226.893f, -21.931f, -256.208f, -16.805f, -256.529f);
endShape();
popMatrix();

      break;
    }
  }
  
  public void gamer_1() {
    switch(seleccion_personaje_1) {
      case 2:
      
pushMatrix();
translate(413, 405);
noStroke();
fill(182, 19, 0);
rect(-42.333f, -176.333f, 94, 43.333f);
beginShape();
vertex(-37.386f, -133);
vertex(-32.788f, -82.954f);
vertex(20.086f, -82.954f);
vertex(39.625f, -133);
//vertex(-680);
endShape(CLOSE);
beginShape();
vertex(51.667f, -176.333f);
vertex(77.965f, -154.667f);
vertex(51.667f, -133);
endShape(CLOSE);
beginShape();
vertex(-42.333f, -176.333f);
vertex(-68.631f, -154.667f);
vertex(-42.333f, -133);
endShape(CLOSE);
rect(-86.363f, -149.637f, 31.304f, 46.846f);
rect(62.313f, -149.637f, 31.304f, 46.846f);
fill(21, 19, 19);
beginShape();
vertex(-97.428f, -117.277f);
vertex(-72.677f, -98.112f);
vertex(-97.428f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(104.682f, -117.277f);
vertex(79.931f, -98.112f);
vertex(104.682f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(-97.122f, -98.112f);
vertex(-85.052f, -77.207f);
vertex(-72.983f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(80.236f, -98.112f);
vertex(92.306f, -77.207f);
vertex(104.375f, -98.112f);
endShape(CLOSE);
ellipse(-89.896f, -73.759f, 16.092f, 16.092f);
ellipse(92.307f, -73.759f, 16.092f, 16.092f);
fill(255, 120, 0);
rect(-32.788f, -82.954f, 53.282f, 9.195f);
fill(21, 19, 19);
beginShape();
vertex(-32.788f, -73.759f);
vertex(20.494f, -73.759f);
vertex(0, -42.725f);
vertex(-12.41f, -42.725f);
endShape(CLOSE);
fill(182, 19, 0);
beginShape();
vertex(-12.41f, -42.725f);
vertex(-32.788f, 0);
vertex(-68.631f, -21.362f);
vertex(-32.788f, -73.759f);
endShape(CLOSE);
beginShape();
vertex(1.119f, -42.725f);
vertex(21.497f, 0);
vertex(57.34f, -21.362f);
vertex(21.497f, -73.759f);
endShape(CLOSE);
beginShape();
vertex(-68.631f, -21.362f);
vertex(-32.788f, 0);
vertex(-62.265f, 31.988f);
endShape(CLOSE);
beginShape();
vertex(57.547f, -21.362f);
vertex(21.704f, 0);
vertex(51.181f, 31.988f);
endShape(CLOSE);
fill(21, 19, 19);
beginShape();
vertex(-82.026f, 54.977f);
vertex(-59.96f, 16.759f);
vertex(-37.896f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(25.25f, 54.977f);
vertex(47.315f, 16.759f);
vertex(69.381f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(-82.026f, 54.977f);
vertex(-59.961f, 97.506f);
vertex(-37.896f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(25.25f, 54.977f);
vertex(47.314f, 97.506f);
vertex(69.381f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(-59.961f, 83.712f);
vertex(-55.482f, 105.552f);
vertex(-89.896f, 105.552f);
endShape(CLOSE);
beginShape();
vertex(44.818f, 86.586f);
vertex(40.34f, 108.426f);
vertex(74.754f, 108.426f);
endShape(CLOSE);
fill(232, 148, 98);
beginShape();
vertex(-18.354f, -176.333f);
vertex(2.06f, -211.69f);
vertex(22.473f, -176.333f);
endShape(CLOSE);
ellipse(2.059f, -208.421f, 48.951f, 52.089f);
fill(243, 241, 241);
stroke(182, 19, 0);
beginShape();
vertex(-12.41f, -194.012f);
vertex(16.529f, -194.012f);
bezierVertex(16.529f, -194.012f, 1.813f, -177.631f, -12.41f, -194.012f);
endShape();
fill(21, 19, 19);
noStroke();
beginShape();
vertex(-18.357f, -218.074f);
vertex(24.312f, -219.117f);
vertex(27.579f, -204.855f);
vertex(-21.131f, -204.855f);
bezierVertex(-21.132f, -204.855f, -24.221f, -217.931f, -18.357f, -218.074f);
endShape();
fill(243, 241, 241);
ellipse(-6.724f, -211.69f, 4.598f, 4.598f);
ellipse(10.844f, -211.987f, 4.598f, 4.598f);
fill(255, 120, 0);
beginShape();
vertex(-27.611f, -141.419f);
bezierVertex(-27.611f, -141.937f, -27.611f, -142.454f, -27.611f, -142.971f);
bezierVertex(-27.534f, -143.163f, -27.549f, -143.369f, -27.521f, -143.569f);
bezierVertex(-27.284f, -145.229f, -26.683f, -146.751f, -25.78f, -148.157f);
bezierVertex(-24.393f, -150.317f, -22.532f, -151.995f, -20.393f, -153.376f);
bezierVertex(-16.815f, -155.686f, -12.87f, -157.02f, -8.695f, -157.732f);
bezierVertex(-8.702f, -157.699f, -8.705f, -157.666f, -8.718f, -157.636f);
bezierVertex(-9.006f, -156.97f, -9.167f, -156.279f, -9.235f, -155.553f);
bezierVertex(-9.312f, -154.731f, -9.2f, -153.94f, -8.963f, -153.161f);
bezierVertex(-8.796f, -152.61f, -8.525f, -152.106f, -8.227f, -151.615f);
bezierVertex(-8.896f, -151.487f, -9.562f, -151.342f, -10.222f, -151.169f);
bezierVertex(-12.965f, -150.45f, -15.556f, -149.386f, -17.885f, -147.743f);
bezierVertex(-19.456f, -146.635f, -20.814f, -145.315f, -21.777f, -143.631f);
bezierVertex(-22.886f, -141.69f, -23.244f, -139.631f, -22.672f, -137.447f);
bezierVertex(-22.251f, -135.839f, -21.387f, -134.478f, -20.267f, -133.271f);
bezierVertex(-18.977f, -131.881f, -17.451f, -130.802f, -15.783f, -129.917f);
bezierVertex(-13.771f, -128.85f, -11.643f, -128.099f, -9.425f, -127.594f);
bezierVertex(-8.676f, -127.424f, -7.925f, -127.268f, -7.163f, -127.167f);
bezierVertex(-7.131f, -126.929f, -7.223f, -126.695f, -7.182f, -126.457f);
bezierVertex(-7.34f, -126.472f, -7.499f, -126.479f, -7.655f, -126.503f);
bezierVertex(-9.345f, -126.753f, -11.018f, -127.092f, -12.66f, -127.57f);
bezierVertex(-15.609f, -128.43f, -18.398f, -129.636f, -20.935f, -131.386f);
bezierVertex(-22.656f, -132.573f, -24.184f, -133.962f, -25.401f, -135.674f);
bezierVertex(-26.487f, -137.203f, -27.234f, -138.873f, -27.507f, -140.741f);
bezierVertex(-27.541f, -140.969f, -27.526f, -141.202f, -27.611f, -141.419f);
endShape();
fill(236, 232, 0);
beginShape();
vertex(-7.181f, -126.458f);
bezierVertex(-7.222f, -126.696f, -7.13f, -126.931f, -7.162f, -127.168f);
bezierVertex(-7.162f, -132.619f, -7.159f, -138.069f, -7.166f, -143.52f);
bezierVertex(-7.166f, -143.725f, -7.112f, -143.801f, -6.913f, -143.846f);
bezierVertex(-3.963f, -144.512f, -1.016f, -145.185f, 1.933f, -145.857f);
bezierVertex(2.159f, -145.908f, 2.16f, -145.909f, 2.16f, -145.679f);
bezierVertex(2.16f, -141.382f, 2.16f, -137.085f, 2.16f, -132.788f);
bezierVertex(2.16f, -132.702f, 2.163f, -132.616f, 2.164f, -132.53f);
bezierVertex(2.163f, -130.478f, 2.163f, -128.426f, 2.163f, -126.374f);
bezierVertex(1.816f, -126.299f, 1.462f, -126.296f, 1.112f, -126.252f);
bezierVertex(1.049f, -126.244f, 0.979f, -126.276f, 0.929f, -126.212f);
bezierVertex(-1.128f, -126.212f, -3.184f, -126.212f, -5.24f, -126.212f);
bezierVertex(-5.428f, -126.285f, -5.628f, -126.267f, -5.822f, -126.29f);
bezierVertex(-6.276f, -126.345f, -6.733f, -126.368f, -7.181f, -126.458f);
endShape();
beginShape();
vertex(-8.694f, -157.732f);
bezierVertex(-8.455f, -158.136f, -8.238f, -158.553f, -7.942f, -158.922f);
bezierVertex(-6.846f, -160.29f, -5.434f, -161.095f, -3.693f, -161.319f);
bezierVertex(-3.65f, -161.325f, -3.597f, -161.309f, -3.569f, -161.361f);
bezierVertex(-3.211f, -161.361f, -2.852f, -161.361f, -2.494f, -161.361f);
bezierVertex(-2.16f, -161.286f, -1.816f, -161.268f, -1.483f, -161.182f);
bezierVertex(0.227f, -160.742f, 1.52f, -159.75f, 2.427f, -158.243f);
bezierVertex(2.472f, -158.169f, 2.517f, -158.096f, 2.562f, -158.023f);
bezierVertex(2.672f, -157.767f, 2.783f, -157.511f, 2.892f, -157.255f);
bezierVertex(3.063f, -156.749f, 3.181f, -156.231f, 3.239f, -155.701f);
bezierVertex(3.287f, -155.247f, 3.267f, -154.797f, 3.213f, -154.339f);
bezierVertex(3.147f, -153.794f, 3.018f, -153.271f, 2.82f, -152.766f);
bezierVertex(2.429f, -151.772f, 1.814f, -150.938f, 0.991f, -150.251f);
bezierVertex(0.403f, -149.76f, -0.25f, -149.389f, -0.971f, -149.141f);
bezierVertex(-1.896f, -148.823f, -2.843f, -148.711f, -3.819f, -148.857f);
bezierVertex(-4.375f, -148.94f, -4.912f, -149.078f, -5.427f, -149.298f);
bezierVertex(-6.587f, -149.795f, -7.501f, -150.59f, -8.225f, -151.615f);
bezierVertex(-8.522f, -152.106f, -8.793f, -152.61f, -8.961f, -153.161f);
bezierVertex(-9.198f, -153.94f, -9.31f, -154.731f, -9.233f, -155.553f);
bezierVertex(-9.165f, -156.278f, -9.004f, -156.97f, -8.716f, -157.636f);
bezierVertex(-8.705f, -157.666f, -8.702f, -157.7f, -8.694f, -157.732f);
endShape();
beginShape();
vertex(0.215f, -155.096f);
bezierVertex(0.214f, -156.847f, -1.226f, -158.301f, -2.964f, -158.303f);
bezierVertex(-4.725f, -158.305f, -6.189f, -156.845f, -6.186f, -155.09f);
bezierVertex(-6.183f, -153.323f, -4.715f, -151.851f, -2.958f, -151.853f);
bezierVertex(-1.23f, -151.854f, 0.216f, -153.333f, 0.215f, -155.096f);
endShape();
fill(255, 120, 0);
beginShape();
vertex(2.891f, -157.256f);
bezierVertex(2.782f, -157.512f, 2.671f, -157.768f, 2.561f, -158.024f);
bezierVertex(3.198f, -157.99f, 3.824f, -157.875f, 4.45f, -157.769f);
bezierVertex(6.701f, -157.386f, 8.901f, -156.81f, 11.034f, -155.993f);
bezierVertex(13.612f, -155.005f, 16.024f, -153.722f, 18.165f, -151.961f);
bezierVertex(19.989f, -150.46f, 21.503f, -148.707f, 22.481f, -146.53f);
bezierVertex(22.901f, -145.594f, 23.198f, -144.619f, 23.324f, -143.601f);
bezierVertex(23.374f, -143.189f, 23.317f, -142.766f, 23.343f, -142.349f);
bezierVertex(23.512f, -139.478f, 22.372f, -137.081f, 20.629f, -134.915f);
bezierVertex(19.052f, -132.956f, 17.077f, -131.47f, 14.9f, -130.241f);
bezierVertex(12.251f, -128.744f, 9.413f, -127.741f, 6.454f, -127.067f);
bezierVertex(5.103f, -126.76f, 3.737f, -126.538f, 2.36f, -126.383f);
bezierVertex(2.296f, -126.376f, 2.229f, -126.378f, 2.163f, -126.377f);
bezierVertex(2.163f, -128.429f, 2.163f, -130.481f, 2.164f, -132.533f);
bezierVertex(2.243f, -132.539f, 2.323f, -132.543f, 2.401f, -132.554f);
bezierVertex(4.479f, -132.842f, 6.514f, -133.306f, 8.489f, -134.021f);
bezierVertex(10.6f, -134.785f, 12.588f, -135.785f, 14.361f, -137.176f);
bezierVertex(15.72f, -138.242f, 16.886f, -139.482f, 17.704f, -141.018f);
bezierVertex(18.665f, -142.821f, 18.98f, -144.724f, 18.52f, -146.729f);
bezierVertex(18.143f, -148.371f, 17.305f, -149.77f, 16.19f, -151.011f);
bezierVertex(14.794f, -152.565f, 13.107f, -153.733f, 11.256f, -154.679f);
bezierVertex(9.235f, -155.713f, 7.098f, -156.421f, 4.883f, -156.904f);
bezierVertex(4.224f, -157.046f, 3.563f, -157.179f, 2.891f, -157.256f);
endShape();
fill(21, 19, 19);
beginShape();
vertex(2.891f, -157.256f);
bezierVertex(3.563f, -157.179f, 4.224f, -157.046f, 4.883f, -156.902f);
bezierVertex(7.098f, -156.42f, 9.235f, -155.712f, 11.256f, -154.677f);
bezierVertex(13.107f, -153.731f, 14.794f, -152.563f, 16.19f, -151.009f);
bezierVertex(17.305f, -149.767f, 18.143f, -148.369f, 18.52f, -146.727f);
bezierVertex(18.98f, -144.721f, 18.665f, -142.819f, 17.704f, -141.016f);
bezierVertex(16.887f, -139.479f, 15.721f, -138.24f, 14.361f, -137.174f);
bezierVertex(12.588f, -135.783f, 10.6f, -134.783f, 8.489f, -134.019f);
bezierVertex(6.514f, -133.305f, 4.479f, -132.84f, 2.401f, -132.552f);
bezierVertex(2.323f, -132.541f, 2.243f, -132.538f, 2.164f, -132.531f);
bezierVertex(2.163f, -132.617f, 2.16f, -132.703f, 2.16f, -132.789f);
bezierVertex(2.16f, -137.086f, 2.16f, -141.383f, 2.16f, -145.68f);
bezierVertex(2.16f, -145.909f, 2.159f, -145.909f, 1.933f, -145.858f);
bezierVertex(-1.015f, -145.186f, -3.963f, -144.512f, -6.913f, -143.847f);
bezierVertex(-7.112f, -143.802f, -7.166f, -143.726f, -7.166f, -143.521f);
bezierVertex(-7.159f, -138.07f, -7.162f, -132.62f, -7.162f, -127.169f);
bezierVertex(-7.924f, -127.27f, -8.675f, -127.426f, -9.424f, -127.596f);
bezierVertex(-11.642f, -128.1f, -13.771f, -128.851f, -15.782f, -129.919f);
bezierVertex(-17.45f, -130.803f, -18.976f, -131.882f, -20.266f, -133.273f);
bezierVertex(-21.386f, -134.48f, -22.25f, -135.841f, -22.671f, -137.449f);
bezierVertex(-23.243f, -139.633f, -22.886f, -141.692f, -21.776f, -143.633f);
bezierVertex(-20.813f, -145.318f, -19.455f, -146.637f, -17.884f, -147.745f);
bezierVertex(-15.555f, -149.388f, -12.965f, -150.452f, -10.221f, -151.171f);
bezierVertex(-9.561f, -151.344f, -8.895f, -151.489f, -8.226f, -151.617f);
bezierVertex(-7.502f, -150.592f, -6.588f, -149.797f, -5.428f, -149.3f);
bezierVertex(-4.912f, -149.079f, -4.375f, -148.941f, -3.82f, -148.859f);
bezierVertex(-2.844f, -148.713f, -1.898f, -148.825f, -0.972f, -149.143f);
bezierVertex(-0.251f, -149.391f, 0.402f, -149.762f, 0.99f, -150.253f);
bezierVertex(1.813f, -150.941f, 2.428f, -151.774f, 2.819f, -152.768f);
bezierVertex(3.016f, -153.273f, 3.145f, -153.796f, 3.212f, -154.341f);
bezierVertex(3.267f, -154.799f, 3.286f, -155.249f, 3.238f, -155.703f);
bezierVertex(3.18f, -156.232f, 3.062f, -156.75f, 2.891f, -157.256f);
endShape();
fill(243, 241, 241);
beginShape();
vertex(0.215f, -155.096f);
bezierVertex(0.216f, -153.333f, -1.23f, -151.854f, -2.957f, -151.853f);
bezierVertex(-4.714f, -151.851f, -6.182f, -153.323f, -6.185f, -155.09f);
bezierVertex(-6.188f, -156.845f, -4.724f, -158.305f, -2.963f, -158.303f);
bezierVertex(-1.227f, -158.3f, 0.214f, -156.847f, 0.215f, -155.096f);
endShape();
fill(236, 232, 0);
beginShape();
vertex(-16.805f, -256.529f);
vertex(20.494f, -258.869f);
vertex(23.349f, -226.893f);
vertex(-19.231f, -226.893f);
bezierVertex(-19.23f, -226.893f, -21.931f, -256.208f, -16.805f, -256.529f);
endShape();
popMatrix();

      break;
    }
  }
  
  public void gamer_2() {
    switch(seleccion_personaje_2) {
      case 2:
      
pushMatrix();
translate(953, 405);
noStroke();
fill(182, 19, 0);
rect(-42.333f, -176.333f, 94, 43.333f);
beginShape();
vertex(-37.386f, -133);
vertex(-32.788f, -82.954f);
vertex(20.086f, -82.954f);
vertex(39.625f, -133);
//vertex(-680);
endShape(CLOSE);
beginShape();
vertex(51.667f, -176.333f);
vertex(77.965f, -154.667f);
vertex(51.667f, -133);
endShape(CLOSE);
beginShape();
vertex(-42.333f, -176.333f);
vertex(-68.631f, -154.667f);
vertex(-42.333f, -133);
endShape(CLOSE);
rect(-86.363f, -149.637f, 31.304f, 46.846f);
rect(62.313f, -149.637f, 31.304f, 46.846f);
fill(21, 19, 19);
beginShape();
vertex(-97.428f, -117.277f);
vertex(-72.677f, -98.112f);
vertex(-97.428f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(104.682f, -117.277f);
vertex(79.931f, -98.112f);
vertex(104.682f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(-97.122f, -98.112f);
vertex(-85.052f, -77.207f);
vertex(-72.983f, -98.112f);
endShape(CLOSE);
beginShape();
vertex(80.236f, -98.112f);
vertex(92.306f, -77.207f);
vertex(104.375f, -98.112f);
endShape(CLOSE);
ellipse(-89.896f, -73.759f, 16.092f, 16.092f);
ellipse(92.307f, -73.759f, 16.092f, 16.092f);
fill(255, 120, 0);
rect(-32.788f, -82.954f, 53.282f, 9.195f);
fill(21, 19, 19);
beginShape();
vertex(-32.788f, -73.759f);
vertex(20.494f, -73.759f);
vertex(0, -42.725f);
vertex(-12.41f, -42.725f);
endShape(CLOSE);
fill(182, 19, 0);
beginShape();
vertex(-12.41f, -42.725f);
vertex(-32.788f, 0);
vertex(-68.631f, -21.362f);
vertex(-32.788f, -73.759f);
endShape(CLOSE);
beginShape();
vertex(1.119f, -42.725f);
vertex(21.497f, 0);
vertex(57.34f, -21.362f);
vertex(21.497f, -73.759f);
endShape(CLOSE);
beginShape();
vertex(-68.631f, -21.362f);
vertex(-32.788f, 0);
vertex(-62.265f, 31.988f);
endShape(CLOSE);
beginShape();
vertex(57.547f, -21.362f);
vertex(21.704f, 0);
vertex(51.181f, 31.988f);
endShape(CLOSE);
fill(21, 19, 19);
beginShape();
vertex(-82.026f, 54.977f);
vertex(-59.96f, 16.759f);
vertex(-37.896f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(25.25f, 54.977f);
vertex(47.315f, 16.759f);
vertex(69.381f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(-82.026f, 54.977f);
vertex(-59.961f, 97.506f);
vertex(-37.896f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(25.25f, 54.977f);
vertex(47.314f, 97.506f);
vertex(69.381f, 54.977f);
endShape(CLOSE);
beginShape();
vertex(-59.961f, 83.712f);
vertex(-55.482f, 105.552f);
vertex(-89.896f, 105.552f);
endShape(CLOSE);
beginShape();
vertex(44.818f, 86.586f);
vertex(40.34f, 108.426f);
vertex(74.754f, 108.426f);
endShape(CLOSE);
fill(232, 148, 98);
beginShape();
vertex(-18.354f, -176.333f);
vertex(2.06f, -211.69f);
vertex(22.473f, -176.333f);
endShape(CLOSE);
ellipse(2.059f, -208.421f, 48.951f, 52.089f);
fill(243, 241, 241);
stroke(182, 19, 0);
beginShape();
vertex(-12.41f, -194.012f);
vertex(16.529f, -194.012f);
bezierVertex(16.529f, -194.012f, 1.813f, -177.631f, -12.41f, -194.012f);
endShape();
fill(21, 19, 19);
noStroke();
beginShape();
vertex(-18.357f, -218.074f);
vertex(24.312f, -219.117f);
vertex(27.579f, -204.855f);
vertex(-21.131f, -204.855f);
bezierVertex(-21.132f, -204.855f, -24.221f, -217.931f, -18.357f, -218.074f);
endShape();
fill(243, 241, 241);
ellipse(-6.724f, -211.69f, 4.598f, 4.598f);
ellipse(10.844f, -211.987f, 4.598f, 4.598f);
fill(255, 120, 0);
beginShape();
vertex(-27.611f, -141.419f);
bezierVertex(-27.611f, -141.937f, -27.611f, -142.454f, -27.611f, -142.971f);
bezierVertex(-27.534f, -143.163f, -27.549f, -143.369f, -27.521f, -143.569f);
bezierVertex(-27.284f, -145.229f, -26.683f, -146.751f, -25.78f, -148.157f);
bezierVertex(-24.393f, -150.317f, -22.532f, -151.995f, -20.393f, -153.376f);
bezierVertex(-16.815f, -155.686f, -12.87f, -157.02f, -8.695f, -157.732f);
bezierVertex(-8.702f, -157.699f, -8.705f, -157.666f, -8.718f, -157.636f);
bezierVertex(-9.006f, -156.97f, -9.167f, -156.279f, -9.235f, -155.553f);
bezierVertex(-9.312f, -154.731f, -9.2f, -153.94f, -8.963f, -153.161f);
bezierVertex(-8.796f, -152.61f, -8.525f, -152.106f, -8.227f, -151.615f);
bezierVertex(-8.896f, -151.487f, -9.562f, -151.342f, -10.222f, -151.169f);
bezierVertex(-12.965f, -150.45f, -15.556f, -149.386f, -17.885f, -147.743f);
bezierVertex(-19.456f, -146.635f, -20.814f, -145.315f, -21.777f, -143.631f);
bezierVertex(-22.886f, -141.69f, -23.244f, -139.631f, -22.672f, -137.447f);
bezierVertex(-22.251f, -135.839f, -21.387f, -134.478f, -20.267f, -133.271f);
bezierVertex(-18.977f, -131.881f, -17.451f, -130.802f, -15.783f, -129.917f);
bezierVertex(-13.771f, -128.85f, -11.643f, -128.099f, -9.425f, -127.594f);
bezierVertex(-8.676f, -127.424f, -7.925f, -127.268f, -7.163f, -127.167f);
bezierVertex(-7.131f, -126.929f, -7.223f, -126.695f, -7.182f, -126.457f);
bezierVertex(-7.34f, -126.472f, -7.499f, -126.479f, -7.655f, -126.503f);
bezierVertex(-9.345f, -126.753f, -11.018f, -127.092f, -12.66f, -127.57f);
bezierVertex(-15.609f, -128.43f, -18.398f, -129.636f, -20.935f, -131.386f);
bezierVertex(-22.656f, -132.573f, -24.184f, -133.962f, -25.401f, -135.674f);
bezierVertex(-26.487f, -137.203f, -27.234f, -138.873f, -27.507f, -140.741f);
bezierVertex(-27.541f, -140.969f, -27.526f, -141.202f, -27.611f, -141.419f);
endShape();
fill(236, 232, 0);
beginShape();
vertex(-7.181f, -126.458f);
bezierVertex(-7.222f, -126.696f, -7.13f, -126.931f, -7.162f, -127.168f);
bezierVertex(-7.162f, -132.619f, -7.159f, -138.069f, -7.166f, -143.52f);
bezierVertex(-7.166f, -143.725f, -7.112f, -143.801f, -6.913f, -143.846f);
bezierVertex(-3.963f, -144.512f, -1.016f, -145.185f, 1.933f, -145.857f);
bezierVertex(2.159f, -145.908f, 2.16f, -145.909f, 2.16f, -145.679f);
bezierVertex(2.16f, -141.382f, 2.16f, -137.085f, 2.16f, -132.788f);
bezierVertex(2.16f, -132.702f, 2.163f, -132.616f, 2.164f, -132.53f);
bezierVertex(2.163f, -130.478f, 2.163f, -128.426f, 2.163f, -126.374f);
bezierVertex(1.816f, -126.299f, 1.462f, -126.296f, 1.112f, -126.252f);
bezierVertex(1.049f, -126.244f, 0.979f, -126.276f, 0.929f, -126.212f);
bezierVertex(-1.128f, -126.212f, -3.184f, -126.212f, -5.24f, -126.212f);
bezierVertex(-5.428f, -126.285f, -5.628f, -126.267f, -5.822f, -126.29f);
bezierVertex(-6.276f, -126.345f, -6.733f, -126.368f, -7.181f, -126.458f);
endShape();
beginShape();
vertex(-8.694f, -157.732f);
bezierVertex(-8.455f, -158.136f, -8.238f, -158.553f, -7.942f, -158.922f);
bezierVertex(-6.846f, -160.29f, -5.434f, -161.095f, -3.693f, -161.319f);
bezierVertex(-3.65f, -161.325f, -3.597f, -161.309f, -3.569f, -161.361f);
bezierVertex(-3.211f, -161.361f, -2.852f, -161.361f, -2.494f, -161.361f);
bezierVertex(-2.16f, -161.286f, -1.816f, -161.268f, -1.483f, -161.182f);
bezierVertex(0.227f, -160.742f, 1.52f, -159.75f, 2.427f, -158.243f);
bezierVertex(2.472f, -158.169f, 2.517f, -158.096f, 2.562f, -158.023f);
bezierVertex(2.672f, -157.767f, 2.783f, -157.511f, 2.892f, -157.255f);
bezierVertex(3.063f, -156.749f, 3.181f, -156.231f, 3.239f, -155.701f);
bezierVertex(3.287f, -155.247f, 3.267f, -154.797f, 3.213f, -154.339f);
bezierVertex(3.147f, -153.794f, 3.018f, -153.271f, 2.82f, -152.766f);
bezierVertex(2.429f, -151.772f, 1.814f, -150.938f, 0.991f, -150.251f);
bezierVertex(0.403f, -149.76f, -0.25f, -149.389f, -0.971f, -149.141f);
bezierVertex(-1.896f, -148.823f, -2.843f, -148.711f, -3.819f, -148.857f);
bezierVertex(-4.375f, -148.94f, -4.912f, -149.078f, -5.427f, -149.298f);
bezierVertex(-6.587f, -149.795f, -7.501f, -150.59f, -8.225f, -151.615f);
bezierVertex(-8.522f, -152.106f, -8.793f, -152.61f, -8.961f, -153.161f);
bezierVertex(-9.198f, -153.94f, -9.31f, -154.731f, -9.233f, -155.553f);
bezierVertex(-9.165f, -156.278f, -9.004f, -156.97f, -8.716f, -157.636f);
bezierVertex(-8.705f, -157.666f, -8.702f, -157.7f, -8.694f, -157.732f);
endShape();
beginShape();
vertex(0.215f, -155.096f);
bezierVertex(0.214f, -156.847f, -1.226f, -158.301f, -2.964f, -158.303f);
bezierVertex(-4.725f, -158.305f, -6.189f, -156.845f, -6.186f, -155.09f);
bezierVertex(-6.183f, -153.323f, -4.715f, -151.851f, -2.958f, -151.853f);
bezierVertex(-1.23f, -151.854f, 0.216f, -153.333f, 0.215f, -155.096f);
endShape();
fill(255, 120, 0);
beginShape();
vertex(2.891f, -157.256f);
bezierVertex(2.782f, -157.512f, 2.671f, -157.768f, 2.561f, -158.024f);
bezierVertex(3.198f, -157.99f, 3.824f, -157.875f, 4.45f, -157.769f);
bezierVertex(6.701f, -157.386f, 8.901f, -156.81f, 11.034f, -155.993f);
bezierVertex(13.612f, -155.005f, 16.024f, -153.722f, 18.165f, -151.961f);
bezierVertex(19.989f, -150.46f, 21.503f, -148.707f, 22.481f, -146.53f);
bezierVertex(22.901f, -145.594f, 23.198f, -144.619f, 23.324f, -143.601f);
bezierVertex(23.374f, -143.189f, 23.317f, -142.766f, 23.343f, -142.349f);
bezierVertex(23.512f, -139.478f, 22.372f, -137.081f, 20.629f, -134.915f);
bezierVertex(19.052f, -132.956f, 17.077f, -131.47f, 14.9f, -130.241f);
bezierVertex(12.251f, -128.744f, 9.413f, -127.741f, 6.454f, -127.067f);
bezierVertex(5.103f, -126.76f, 3.737f, -126.538f, 2.36f, -126.383f);
bezierVertex(2.296f, -126.376f, 2.229f, -126.378f, 2.163f, -126.377f);
bezierVertex(2.163f, -128.429f, 2.163f, -130.481f, 2.164f, -132.533f);
bezierVertex(2.243f, -132.539f, 2.323f, -132.543f, 2.401f, -132.554f);
bezierVertex(4.479f, -132.842f, 6.514f, -133.306f, 8.489f, -134.021f);
bezierVertex(10.6f, -134.785f, 12.588f, -135.785f, 14.361f, -137.176f);
bezierVertex(15.72f, -138.242f, 16.886f, -139.482f, 17.704f, -141.018f);
bezierVertex(18.665f, -142.821f, 18.98f, -144.724f, 18.52f, -146.729f);
bezierVertex(18.143f, -148.371f, 17.305f, -149.77f, 16.19f, -151.011f);
bezierVertex(14.794f, -152.565f, 13.107f, -153.733f, 11.256f, -154.679f);
bezierVertex(9.235f, -155.713f, 7.098f, -156.421f, 4.883f, -156.904f);
bezierVertex(4.224f, -157.046f, 3.563f, -157.179f, 2.891f, -157.256f);
endShape();
fill(21, 19, 19);
beginShape();
vertex(2.891f, -157.256f);
bezierVertex(3.563f, -157.179f, 4.224f, -157.046f, 4.883f, -156.902f);
bezierVertex(7.098f, -156.42f, 9.235f, -155.712f, 11.256f, -154.677f);
bezierVertex(13.107f, -153.731f, 14.794f, -152.563f, 16.19f, -151.009f);
bezierVertex(17.305f, -149.767f, 18.143f, -148.369f, 18.52f, -146.727f);
bezierVertex(18.98f, -144.721f, 18.665f, -142.819f, 17.704f, -141.016f);
bezierVertex(16.887f, -139.479f, 15.721f, -138.24f, 14.361f, -137.174f);
bezierVertex(12.588f, -135.783f, 10.6f, -134.783f, 8.489f, -134.019f);
bezierVertex(6.514f, -133.305f, 4.479f, -132.84f, 2.401f, -132.552f);
bezierVertex(2.323f, -132.541f, 2.243f, -132.538f, 2.164f, -132.531f);
bezierVertex(2.163f, -132.617f, 2.16f, -132.703f, 2.16f, -132.789f);
bezierVertex(2.16f, -137.086f, 2.16f, -141.383f, 2.16f, -145.68f);
bezierVertex(2.16f, -145.909f, 2.159f, -145.909f, 1.933f, -145.858f);
bezierVertex(-1.015f, -145.186f, -3.963f, -144.512f, -6.913f, -143.847f);
bezierVertex(-7.112f, -143.802f, -7.166f, -143.726f, -7.166f, -143.521f);
bezierVertex(-7.159f, -138.07f, -7.162f, -132.62f, -7.162f, -127.169f);
bezierVertex(-7.924f, -127.27f, -8.675f, -127.426f, -9.424f, -127.596f);
bezierVertex(-11.642f, -128.1f, -13.771f, -128.851f, -15.782f, -129.919f);
bezierVertex(-17.45f, -130.803f, -18.976f, -131.882f, -20.266f, -133.273f);
bezierVertex(-21.386f, -134.48f, -22.25f, -135.841f, -22.671f, -137.449f);
bezierVertex(-23.243f, -139.633f, -22.886f, -141.692f, -21.776f, -143.633f);
bezierVertex(-20.813f, -145.318f, -19.455f, -146.637f, -17.884f, -147.745f);
bezierVertex(-15.555f, -149.388f, -12.965f, -150.452f, -10.221f, -151.171f);
bezierVertex(-9.561f, -151.344f, -8.895f, -151.489f, -8.226f, -151.617f);
bezierVertex(-7.502f, -150.592f, -6.588f, -149.797f, -5.428f, -149.3f);
bezierVertex(-4.912f, -149.079f, -4.375f, -148.941f, -3.82f, -148.859f);
bezierVertex(-2.844f, -148.713f, -1.898f, -148.825f, -0.972f, -149.143f);
bezierVertex(-0.251f, -149.391f, 0.402f, -149.762f, 0.99f, -150.253f);
bezierVertex(1.813f, -150.941f, 2.428f, -151.774f, 2.819f, -152.768f);
bezierVertex(3.016f, -153.273f, 3.145f, -153.796f, 3.212f, -154.341f);
bezierVertex(3.267f, -154.799f, 3.286f, -155.249f, 3.238f, -155.703f);
bezierVertex(3.18f, -156.232f, 3.062f, -156.75f, 2.891f, -157.256f);
endShape();
fill(243, 241, 241);
beginShape();
vertex(0.215f, -155.096f);
bezierVertex(0.216f, -153.333f, -1.23f, -151.854f, -2.957f, -151.853f);
bezierVertex(-4.714f, -151.851f, -6.182f, -153.323f, -6.185f, -155.09f);
bezierVertex(-6.188f, -156.845f, -4.724f, -158.305f, -2.963f, -158.303f);
bezierVertex(-1.227f, -158.3f, 0.214f, -156.847f, 0.215f, -155.096f);
endShape();
fill(236, 232, 0);
beginShape();
vertex(-16.805f, -256.529f);
vertex(20.494f, -258.869f);
vertex(23.349f, -226.893f);
vertex(-19.231f, -226.893f);
bezierVertex(-19.23f, -226.893f, -21.931f, -256.208f, -16.805f, -256.529f);
endShape();
popMatrix();

      break;
    }
  }
  
  public int danio(){
    return danio;
  }
}
class CJackJack implements Carta{
  int ataque;
  int danio;
  int forma;
  CJackJack(int ataque_, int danio_, int forma_) {
    ataque = ataque_;
    danio = danio_;
    forma = forma_;
  }
  
  public void forma() {
    switch(forma) {
      case 3:
      
pushMatrix();
translate(953, 405);
noStroke();
fill(200, 98, 51);
beginShape();
vertex(-31.62f, -166);
vertex(2.059f, -224.333f);
vertex(35.736f, -166);
endShape(CLOSE);
fill(232, 148, 98);
ellipse(0, -120.67f, 112, 112);
fill(21, 19, 19);
beginShape();
vertex(-52.797f, -143.622f);
vertex(52.796f, -143.622f);
bezierVertex(52.796f, -143.622f, 58.052f, -127.302f, 57.666f, -120.67f);
vertex(-57.667f, -120.67f);
bezierVertex(-57.667f, -120.67f, -55.485f, -138.345f, -52.797f, -143.622f);
endShape();
fill(243, 241, 241);
ellipse(-21.375f, -130.766f, 7.667f, 7.667f);
ellipse(15.592f, -131.261f, 7.667f, 7.667f);
fill(232, 148, 98);
//Nariz
ellipse(-2.272f, -110.806f, 38.114f, 34.455f);
fill(243, 241, 241);
stroke(182, 19, 0);
strokeWeight(2);
beginShape();
vertex(-31.425f, -93.711f);
vertex(26.88f, -93.711f);
bezierVertex(26.88f, -93.711f, -2.77f, -60.709f, -31.425f, -93.711f);
endShape();
fill(232, 148, 98);
noStroke();
rect(-7.99f, -65.576f, 11.433f, 13.317f);
fill(182, 19, 0);
stroke(21, 19, 19);
strokeWeight(3);
rect(-42.543f, -51.977f, 78.28f, 98.908f);
strokeWeight(3);
rect(36.26f, -93.044f, 26.515f, 69.08f);
strokeWeight(3);
rect(-68.244f, -78.044f, 26.515f, 69.08f);
strokeWeight(3);
rect(32.465f, 35.931f, 26.515f, 69.079f);
strokeWeight(3);
rect(-61.233f, 37.935f, 26.514f, 69.08f);
fill(232, 148, 98);
noStroke();
ellipse(63.05f, -83.789f, 18.68f, 18.68f);
ellipse(-60.932f, -83.789f, 18.68f, 18.68f);
fill(182, 19, 0);
stroke(21, 19, 19);
strokeWeight(3);
ellipse(-74.577f, 98.532f, 25.96f, 13.321f);
strokeWeight(3);
beginShape();
vertex(53.369f, 104.563f);
bezierVertex(49.691f, 98.191f, 56.777f, 87.214f, 69.191f, 80.048f);
bezierVertex(81.607f, 72.88f, 94.656f, 72.235f, 98.335f, 78.606f);
bezierVertex(102.014f, 84.978f, 94.928f, 95.956f, 82.512f, 103.123f);
bezierVertex(70.098f, 110.29f, 57.049f, 110.936f, 53.369f, 104.563f);
endShape();
popMatrix();

      break;
    }
  }
  
  public void gamer_1() {
    switch(seleccion_personaje_1) {
      case 3:
      
pushMatrix();
translate(413, 405);
noStroke();
fill(200, 98, 51);
beginShape();
vertex(-31.62f, -166);
vertex(2.059f, -224.333f);
vertex(35.736f, -166);
endShape(CLOSE);
fill(232, 148, 98);
ellipse(0, -120.67f, 112, 112);
fill(21, 19, 19);
beginShape();
vertex(-52.797f, -143.622f);
vertex(52.796f, -143.622f);
bezierVertex(52.796f, -143.622f, 58.052f, -127.302f, 57.666f, -120.67f);
vertex(-57.667f, -120.67f);
bezierVertex(-57.667f, -120.67f, -55.485f, -138.345f, -52.797f, -143.622f);
endShape();
fill(243, 241, 241);
ellipse(-21.375f, -130.766f, 7.667f, 7.667f);
ellipse(15.592f, -131.261f, 7.667f, 7.667f);
fill(232, 148, 98);
//Nariz
ellipse(-2.272f, -110.806f, 38.114f, 34.455f);
fill(243, 241, 241);
stroke(182, 19, 0);
strokeWeight(2);
beginShape();
vertex(-31.425f, -93.711f);
vertex(26.88f, -93.711f);
bezierVertex(26.88f, -93.711f, -2.77f, -60.709f, -31.425f, -93.711f);
endShape();
fill(232, 148, 98);
noStroke();
rect(-7.99f, -65.576f, 11.433f, 13.317f);
fill(182, 19, 0);
stroke(21, 19, 19);
strokeWeight(3);
rect(-42.543f, -51.977f, 78.28f, 98.908f);
strokeWeight(3);
rect(36.26f, -93.044f, 26.515f, 69.08f);
strokeWeight(3);
rect(-68.244f, -78.044f, 26.515f, 69.08f);
strokeWeight(3);
rect(32.465f, 35.931f, 26.515f, 69.079f);
strokeWeight(3);
rect(-61.233f, 37.935f, 26.514f, 69.08f);
fill(232, 148, 98);
noStroke();
ellipse(63.05f, -83.789f, 18.68f, 18.68f);
ellipse(-60.932f, -83.789f, 18.68f, 18.68f);
fill(182, 19, 0);
stroke(21, 19, 19);
strokeWeight(3);
ellipse(-74.577f, 98.532f, 25.96f, 13.321f);
strokeWeight(3);
beginShape();
vertex(53.369f, 104.563f);
bezierVertex(49.691f, 98.191f, 56.777f, 87.214f, 69.191f, 80.048f);
bezierVertex(81.607f, 72.88f, 94.656f, 72.235f, 98.335f, 78.606f);
bezierVertex(102.014f, 84.978f, 94.928f, 95.956f, 82.512f, 103.123f);
bezierVertex(70.098f, 110.29f, 57.049f, 110.936f, 53.369f, 104.563f);
endShape();
popMatrix();

      break;
    }
  }
  
  public void gamer_2() {
    switch(seleccion_personaje_2) {
      case 3:
      
pushMatrix();
translate(953, 405);
noStroke();
fill(200, 98, 51);
beginShape();
vertex(-31.62f, -166);
vertex(2.059f, -224.333f);
vertex(35.736f, -166);
endShape(CLOSE);
fill(232, 148, 98);
ellipse(0, -120.67f, 112, 112);
fill(21, 19, 19);
beginShape();
vertex(-52.797f, -143.622f);
vertex(52.796f, -143.622f);
bezierVertex(52.796f, -143.622f, 58.052f, -127.302f, 57.666f, -120.67f);
vertex(-57.667f, -120.67f);
bezierVertex(-57.667f, -120.67f, -55.485f, -138.345f, -52.797f, -143.622f);
endShape();
fill(243, 241, 241);
ellipse(-21.375f, -130.766f, 7.667f, 7.667f);
ellipse(15.592f, -131.261f, 7.667f, 7.667f);
fill(232, 148, 98);
//Nariz
ellipse(-2.272f, -110.806f, 38.114f, 34.455f);
fill(243, 241, 241);
stroke(182, 19, 0);
strokeWeight(2);
beginShape();
vertex(-31.425f, -93.711f);
vertex(26.88f, -93.711f);
bezierVertex(26.88f, -93.711f, -2.77f, -60.709f, -31.425f, -93.711f);
endShape();
fill(232, 148, 98);
noStroke();
rect(-7.99f, -65.576f, 11.433f, 13.317f);
fill(182, 19, 0);
stroke(21, 19, 19);
strokeWeight(3);
rect(-42.543f, -51.977f, 78.28f, 98.908f);
strokeWeight(3);
rect(36.26f, -93.044f, 26.515f, 69.08f);
strokeWeight(3);
rect(-68.244f, -78.044f, 26.515f, 69.08f);
strokeWeight(3);
rect(32.465f, 35.931f, 26.515f, 69.079f);
strokeWeight(3);
rect(-61.233f, 37.935f, 26.514f, 69.08f);
fill(232, 148, 98);
noStroke();
ellipse(63.05f, -83.789f, 18.68f, 18.68f);
ellipse(-60.932f, -83.789f, 18.68f, 18.68f);
fill(182, 19, 0);
stroke(21, 19, 19);
strokeWeight(3);
ellipse(-74.577f, 98.532f, 25.96f, 13.321f);
strokeWeight(3);
beginShape();
vertex(53.369f, 104.563f);
bezierVertex(49.691f, 98.191f, 56.777f, 87.214f, 69.191f, 80.048f);
bezierVertex(81.607f, 72.88f, 94.656f, 72.235f, 98.335f, 78.606f);
bezierVertex(102.014f, 84.978f, 94.928f, 95.956f, 82.512f, 103.123f);
bezierVertex(70.098f, 110.29f, 57.049f, 110.936f, 53.369f, 104.563f);
endShape();
popMatrix();

      break;
    }
  }
  
  public int danio(){
    return danio;
  }
}
class CVioletaAlterna implements Carta{
  int ataque;
  int danio;
  int forma;
  CVioletaAlterna(int ataque_, int danio_, int forma_) {
    ataque = ataque_;
    danio = danio_;
    forma = forma_;
  }
  
  public void forma() {
    switch(forma) {
      case 4:
      
pushMatrix();
translate(1193, 405);
fill(0);
noStroke();
rect(-31.085f, -225.483f, 73.43f, 119.702f);
fill(127, 74, 57);
beginShape();
vertex(-23.544f, -182.954f);
bezierVertex(-18.586f, -170.31f, -12.41f, -163.414f, -12.41f, -163.414f);
bezierVertex(-12.41f, -163.414f, -0.954f, -148.472f, 0, -139.276f);
vertex(10.842f, -139.276f);
vertex(34.287f, -182.954f);
vertex(34.287f, -219.736f);
vertex(-23.544f, -219.736f);
vertex(-23.544f, -182.954f);
endShape();
fill(114, 37, 14);
beginShape();
vertex(5.865f, -165.912f);
vertex(10.842f, -174.532f);
vertex(15.818f, -165.912f);
//vertex(-680);
endShape(CLOSE);
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(-21.496f, -178.172f);
vertex(31.721f, -178.172f);
vertex(34.287f, -182.954f);
vertex(34.287f, -194.893f);
vertex(-23.544f, -195.189f);
vertex(-23.544f, -182.954f);
//vertex(-680);
endShape(CLOSE);
fill(0);
noStroke();
ellipse(-2.919f, -186.533f, 4.598f, 4.598f);
ellipse(14.649f, -186.83f, 4.598f, 4.598f);
ellipse(-4.61f, -220.892f, 59.324f, 24.305f);
ellipse(18.539f, -209.356f, 51.193f, 47.559f);
fill(127, 74, 57);
rect(0.583f, -139.276f, 10.052f, 9.264f);
fill(0, 168, 181);
beginShape();
vertex(-23.544f, -130.013f);
vertex(31.667f, -130.013f);
bezierVertex(31.667f, -130.013f, 72.334f, -78.334f, 74.334f, -55);
bezierVertex(74.334f, -55, 64.184f, -49, 59.259f, -49);
bezierVertex(59.259f, -49, 37.122f, -103.605f, 25.395f, -114.969f);
vertex(10.842f, -61.559f);
vertex(-15, -61.559f);
vertex(-19.667f, -114.015f);
bezierVertex(-19.667f, -114.015f, -43, -62.999f, -51.667f, -56.333f);
vertex(-68.334f, -65.008f);
vertex(-23.544f, -130.013f);
endShape();
fill(0);
beginShape();
vertex(74.334f, -55);
bezierVertex(74.517f, -32.38f, 71.068f, -6.636f, 68.77f, -9.163f);
bezierVertex(68.77f, -9.163f, 65.994f, -33.14f, 59.259f, -49);
vertex(74.334f, -55);
endShape();
beginShape();
vertex(-68.326f, -62.626f);
bezierVertex(-68.509f, -40.006f, -65.06f, -14.262f, -62.762f, -16.789f);
bezierVertex(-62.762f, -16.789f, -59.986f, -40.766f, -53.251f, -56.626f);
vertex(-68.326f, -62.626f);
endShape();
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
ellipse(-68.333f, -9.277f, 12.949f, 12.949f);
strokeWeight(2);
ellipse(66.8f, -0.001f, 12.949f, 12.949f);
fill(0, 71, 130);
noStroke();
beginShape();
vertex(-15, -61.56f);
vertex(10.842f, -61.56f);
vertex(10.052f, -49);
vertex(-15, -49);
//vertex(-680);
endShape(CLOSE);
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(-14.148f, -50.074f);
vertex(-2.079f, -29.169f);
vertex(9.99f, -50.074f);
//vertex(-680);
endShape(CLOSE);
fill(0, 168, 181);
noStroke();
beginShape();
vertex(-2.079f, -29.169f);
vertex(10.842f, 12.199f);
vertex(23.16f, 0);
vertex(9.99f, -50.074f);
//vertex(-680);
endShape(CLOSE);
beginShape();
vertex(-2.38f, -29.169f);
vertex(-15.301f, 12.199f);
vertex(-27.62f, 0);
vertex(-14.45f, -50.074f);
//vertex(-680);
endShape(CLOSE);
fill(0);
beginShape();
vertex(10.842f, 12.199f);
vertex(23.16f, 0);
vertex(28.54f, 12.199f);
//vertex(-680);
endShape(CLOSE);
beginShape();
vertex(-14.695f, 12.199f);
vertex(-27.013f, 0);
vertex(-32.393f, 12.199f);
//vertex(-680);
endShape(CLOSE);
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(26.781f, 5.954f);
bezierVertex(26.964f, 28.574f, 23.515f, 54.317f, 21.217f, 51.791f);
bezierVertex(21.217f, 51.791f, 18.441f, 27.814f, 11.706f, 11.954f);
vertex(26.781f, 5.954f);
endShape();
strokeWeight(2);
beginShape();
vertex(-31.078f, 5.954f);
bezierVertex(-31.261f, 28.574f, -27.812f, 54.317f, -25.514f, 51.791f);
bezierVertex(-25.514f, 51.791f, -22.738f, 27.814f, -16.003f, 11.954f);
vertex(-31.078f, 5.954f);
endShape();
fill(0);
noStroke();
beginShape();
vertex(20.118f, 44.188f);
vertex(10.052f, 67.176f);
bezierVertex(10.052f, 67.176f, 8.945f, 72.218f, 26.788f, 72.218f);
vertex(20.118f, 44.188f);
endShape();
beginShape();
vertex(-25.249f, 44.188f);
vertex(-15.183f, 67.176f);
bezierVertex(-15.183f, 67.176f, -14.076f, 72.218f, -31.919f, 72.218f);
vertex(-25.249f, 44.188f);
endShape();
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(9.834f, 67.936f);
vertex(18.413f, 98.025f);
vertex(26.992f, 67.936f);
//vertex(-680);
endShape(CLOSE);
strokeWeight(2);
beginShape();
vertex(-14.965f, 67.936f);
vertex(-23.544f, 98.025f);
vertex(-32.123f, 67.936f);
//vertex(-680);
endShape(CLOSE);
noStroke();
beginShape();
vertex(18.413f, 88.44f);
vertex(11.706f, 109.705f);
vertex(34.287f, 109.705f);
//vertex(-680);
endShape(CLOSE);
beginShape();
vertex(-22.206f, 87.811f);
vertex(-15.499f, 109.075f);
vertex(-38.08f, 109.075f);
//vertex(-680);
endShape(CLOSE);
fill(0, 71, 130);
beginShape();
vertex(19.974f, -115.773f);
bezierVertex(19.978f, -115.402f, 19.983f, -115.03f, 19.986f, -114.66f);
bezierVertex(19.933f, -114.521f, 19.944f, -114.372f, 19.926f, -114.23f);
bezierVertex(19.768f, -113.036f, 19.347f, -111.938f, 18.709f, -110.922f);
bezierVertex(17.729f, -109.36f, 16.404f, -108.141f, 14.878f, -107.134f);
bezierVertex(12.325f, -105.448f, 9.502f, -104.462f, 6.509f, -103.92f);
bezierVertex(6.516f, -103.943f, 6.518f, -103.967f, 6.526f, -103.989f);
bezierVertex(6.727f, -104.469f, 6.837f, -104.967f, 6.88f, -105.488f);
bezierVertex(6.932f, -106.08f, 6.844f, -106.647f, 6.668f, -107.205f);
bezierVertex(6.543f, -107.599f, 6.345f, -107.959f, 6.128f, -108.309f);
bezierVertex(6.608f, -108.405f, 7.086f, -108.515f, 7.559f, -108.644f);
bezierVertex(9.524f, -109.181f, 11.377f, -109.963f, 13.037f, -111.161f);
bezierVertex(14.158f, -111.969f, 15.124f, -112.925f, 15.802f, -114.142f);
bezierVertex(16.585f, -115.544f, 16.826f, -117.026f, 16.4f, -118.591f);
bezierVertex(16.086f, -119.741f, 15.455f, -120.713f, 14.641f, -121.572f);
bezierVertex(13.705f, -122.56f, 12.602f, -123.324f, 11.397f, -123.947f);
bezierVertex(9.944f, -124.698f, 8.41f, -125.223f, 6.813f, -125.569f);
bezierVertex(6.275f, -125.686f, 5.734f, -125.792f, 5.185f, -125.86f);
bezierVertex(5.162f, -126.029f, 5.225f, -126.199f, 5.195f, -126.37f);
bezierVertex(5.309f, -126.361f, 5.423f, -126.356f, 5.534f, -126.34f);
bezierVertex(6.751f, -126.173f, 7.955f, -125.942f, 9.138f, -125.611f);
bezierVertex(11.262f, -125.015f, 13.274f, -124.169f, 15.108f, -122.931f);
bezierVertex(16.353f, -122.091f, 17.462f, -121.105f, 18.348f, -119.884f);
bezierVertex(19.14f, -118.794f, 19.688f, -117.6f, 19.897f, -116.26f);
bezierVertex(19.921f, -116.097f, 19.913f, -115.929f, 19.974f, -115.773f);
endShape();
fill(0, 17, 234);
beginShape();
vertex(5.193f, -126.369f);
bezierVertex(5.223f, -126.198f, 5.16f, -126.029f, 5.183f, -125.859f);
bezierVertex(5.223f, -121.943f, 5.262f, -118.028f, 5.307f, -114.115f);
bezierVertex(5.308f, -113.968f, 5.271f, -113.913f, 5.128f, -113.879f);
bezierVertex(3.015f, -113.379f, 0.901f, -112.874f, -1.21f, -112.369f);
bezierVertex(-1.373f, -112.331f, -1.373f, -112.331f, -1.375f, -112.496f);
bezierVertex(-1.406f, -115.582f, -1.438f, -118.668f, -1.47f, -121.754f);
bezierVertex(-1.47f, -121.816f, -1.474f, -121.877f, -1.475f, -121.939f);
bezierVertex(-1.49f, -123.413f, -1.504f, -124.885f, -1.52f, -126.36f);
bezierVertex(-1.27f, -126.416f, -1.017f, -126.421f, -0.765f, -126.455f);
bezierVertex(-0.72f, -126.461f, -0.67f, -126.438f, -0.633f, -126.484f);
bezierVertex(0.844f, -126.499f, 2.321f, -126.514f, 3.796f, -126.529f);
bezierVertex(3.934f, -126.479f, 4.076f, -126.493f, 4.215f, -126.478f);
bezierVertex(4.542f, -126.443f, 4.87f, -126.431f, 5.193f, -126.369f);
endShape();
beginShape();
vertex(6.509f, -103.92f);
bezierVertex(6.34f, -103.628f, 6.188f, -103.327f, 5.979f, -103.06f);
bezierVertex(5.2f, -102.069f, 4.194f, -101.481f, 2.943f, -101.307f);
bezierVertex(2.914f, -101.302f, 2.877f, -101.313f, 2.857f, -101.276f);
bezierVertex(2.598f, -101.274f, 2.34f, -101.271f, 2.085f, -101.269f);
bezierVertex(1.844f, -101.32f, 1.598f, -101.331f, 1.356f, -101.39f);
bezierVertex(0.124f, -101.694f, -0.812f, -102.396f, -1.473f, -103.472f);
bezierVertex(-1.505f, -103.525f, -1.539f, -103.577f, -1.572f, -103.629f);
bezierVertex(-1.652f, -103.812f, -1.733f, -103.995f, -1.816f, -104.178f);
bezierVertex(-1.94f, -104.539f, -2.029f, -104.911f, -2.075f, -105.291f);
bezierVertex(-2.112f, -105.618f, -2.1f, -105.94f, -2.065f, -106.27f);
bezierVertex(-2.023f, -106.662f, -1.934f, -107.039f, -1.796f, -107.403f);
bezierVertex(-1.523f, -108.12f, -1.086f, -108.723f, -0.5f, -109.222f);
bezierVertex(-0.081f, -109.579f, 0.385f, -109.851f, 0.9f, -110.034f);
bezierVertex(1.564f, -110.27f, 2.243f, -110.357f, 2.945f, -110.259f);
bezierVertex(3.343f, -110.204f, 3.731f, -110.109f, 4.103f, -109.954f);
bezierVertex(4.94f, -109.606f, 5.602f, -109.041f, 6.128f, -108.31f);
bezierVertex(6.345f, -107.959f, 6.543f, -107.6f, 6.668f, -107.206f);
bezierVertex(6.844f, -106.648f, 6.932f, -106.081f, 6.88f, -105.489f);
bezierVertex(6.836f, -104.968f, 6.727f, -104.47f, 6.526f, -103.99f);
bezierVertex(6.518f, -103.967f, 6.516f, -103.943f, 6.509f, -103.92f);
endShape();
beginShape();
vertex(0.091f, -105.749f);
bezierVertex(0.106f, -104.492f, 1.152f, -103.458f, 2.399f, -103.469f);
bezierVertex(3.665f, -103.48f, 4.705f, -104.54f, 4.689f, -105.801f);
bezierVertex(4.674f, -107.07f, 3.609f, -108.116f, 2.348f, -108.101f);
bezierVertex(1.105f, -108.087f, 0.079f, -107.014f, 0.091f, -105.749f);
endShape();
fill(0, 71, 130);
beginShape();
vertex(-1.816f, -104.177f);
bezierVertex(-1.733f, -103.994f, -1.652f, -103.811f, -1.572f, -103.628f);
bezierVertex(-2.03f, -103.648f, -2.478f, -103.726f, -2.929f, -103.798f);
bezierVertex(-4.547f, -104.057f, -6.132f, -104.454f, -7.671f, -105.025f);
bezierVertex(-9.53f, -105.715f, -11.271f, -106.62f, -12.821f, -107.868f);
bezierVertex(-14.141f, -108.932f, -15.243f, -110.181f, -15.961f, -111.736f);
bezierVertex(-16.269f, -112.405f, -16.489f, -113.103f, -16.587f, -113.833f);
bezierVertex(-16.627f, -114.128f, -16.59f, -114.433f, -16.611f, -114.732f);
bezierVertex(-16.751f, -116.793f, -15.952f, -118.524f, -14.715f, -120.092f);
bezierVertex(-13.597f, -121.509f, -12.191f, -122.591f, -10.636f, -123.49f);
bezierVertex(-8.745f, -124.585f, -6.714f, -125.325f, -4.593f, -125.832f);
bezierVertex(-3.624f, -126.062f, -2.647f, -126.231f, -1.659f, -126.353f);
bezierVertex(-1.612f, -126.359f, -1.564f, -126.358f, -1.517f, -126.359f);
bezierVertex(-1.501f, -124.884f, -1.487f, -123.412f, -1.472f, -121.938f);
bezierVertex(-1.529f, -121.933f, -1.585f, -121.93f, -1.642f, -121.921f);
bezierVertex(-3.133f, -121.699f, -4.592f, -121.35f, -6.003f, -120.823f);
bezierVertex(-7.516f, -120.259f, -8.934f, -119.527f, -10.197f, -118.513f);
bezierVertex(-11.166f, -117.738f, -11.993f, -116.84f, -12.57f, -115.73f);
bezierVertex(-13.247f, -114.429f, -13.46f, -113.06f, -13.113f, -111.623f);
bezierVertex(-12.832f, -110.446f, -12.218f, -109.449f, -11.408f, -108.564f);
bezierVertex(-10.394f, -107.459f, -9.174f, -106.631f, -7.84f, -105.966f);
bezierVertex(-6.379f, -105.238f, -4.84f, -104.746f, -3.246f, -104.415f);
bezierVertex(-2.772f, -104.318f, -2.298f, -104.227f, -1.816f, -104.177f);
endShape();
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(-1.816f, -104.177f);
bezierVertex(-2.297f, -104.227f, -2.772f, -104.318f, -3.248f, -104.417f);
bezierVertex(-4.842f, -104.748f, -6.381f, -105.24f, -7.842f, -105.968f);
bezierVertex(-9.176f, -106.633f, -10.397f, -107.46f, -11.41f, -108.566f);
bezierVertex(-12.221f, -109.45f, -12.834f, -110.448f, -13.115f, -111.625f);
bezierVertex(-13.462f, -113.062f, -13.249f, -114.431f, -12.572f, -115.732f);
bezierVertex(-11.995f, -116.842f, -11.168f, -117.74f, -10.199f, -118.515f);
bezierVertex(-8.935f, -119.528f, -7.517f, -120.26f, -6.005f, -120.825f);
bezierVertex(-4.594f, -121.352f, -3.135f, -121.701f, -1.644f, -121.923f);
bezierVertex(-1.587f, -121.931f, -1.531f, -121.935f, -1.474f, -121.94f);
bezierVertex(-1.473f, -121.878f, -1.469f, -121.816f, -1.469f, -121.755f);
bezierVertex(-1.438f, -118.669f, -1.406f, -115.583f, -1.374f, -112.497f);
bezierVertex(-1.372f, -112.332f, -1.372f, -112.332f, -1.209f, -112.37f);
bezierVertex(0.902f, -112.875f, 3.016f, -113.38f, 5.129f, -113.88f);
bezierVertex(5.272f, -113.914f, 5.309f, -113.969f, 5.308f, -114.116f);
bezierVertex(5.263f, -118.03f, 5.224f, -121.945f, 5.184f, -125.86f);
bezierVertex(5.733f, -125.792f, 6.274f, -125.686f, 6.812f, -125.569f);
bezierVertex(8.409f, -125.224f, 9.943f, -124.699f, 11.396f, -123.947f);
bezierVertex(12.601f, -123.324f, 13.705f, -122.56f, 14.64f, -121.572f);
bezierVertex(15.453f, -120.713f, 16.084f, -119.741f, 16.399f, -118.591f);
bezierVertex(16.826f, -117.026f, 16.585f, -115.545f, 15.801f, -114.142f);
bezierVertex(15.123f, -112.925f, 14.157f, -111.968f, 13.036f, -111.161f);
bezierVertex(11.377f, -109.964f, 9.523f, -109.181f, 7.558f, -108.644f);
bezierVertex(7.085f, -108.515f, 6.608f, -108.405f, 6.127f, -108.309f);
bezierVertex(5.601f, -109.04f, 4.939f, -109.604f, 4.102f, -109.953f);
bezierVertex(3.73f, -110.108f, 3.342f, -110.203f, 2.944f, -110.258f);
bezierVertex(2.242f, -110.356f, 1.563f, -110.269f, 0.899f, -110.033f);
bezierVertex(0.383f, -109.85f, -0.082f, -109.579f, -0.501f, -109.221f);
bezierVertex(-1.087f, -108.721f, -1.523f, -108.119f, -1.797f, -107.402f);
bezierVertex(-1.935f, -107.038f, -2.024f, -106.661f, -2.066f, -106.269f);
bezierVertex(-2.101f, -105.939f, -2.113f, -105.617f, -2.076f, -105.29f);
bezierVertex(-2.029f, -104.911f, -1.94f, -104.539f, -1.816f, -104.177f);
endShape();
fill(0);
noStroke();
beginShape();
vertex(0.091f, -105.749f);
bezierVertex(0.079f, -107.015f, 1.106f, -108.088f, 2.348f, -108.101f);
bezierVertex(3.609f, -108.116f, 4.674f, -107.069f, 4.689f, -105.801f);
bezierVertex(4.705f, -104.541f, 3.665f, -103.481f, 2.399f, -103.469f);
bezierVertex(1.151f, -103.458f, 0.105f, -104.491f, 0.091f, -105.749f);
endShape();
noFill();
stroke(0, 168, 181);
strokeWeight(1);
line(-4.767f, -158.816f, 16.026f, -158.816f);
popMatrix();

      break;
    }
  }
  
  public void gamer_1() {
    switch(seleccion_personaje_1) {
      case 4:
      
pushMatrix();
translate(413, 405);
fill(0);
noStroke();
rect(-31.085f, -225.483f, 73.43f, 119.702f);
fill(127, 74, 57);
beginShape();
vertex(-23.544f, -182.954f);
bezierVertex(-18.586f, -170.31f, -12.41f, -163.414f, -12.41f, -163.414f);
bezierVertex(-12.41f, -163.414f, -0.954f, -148.472f, 0, -139.276f);
vertex(10.842f, -139.276f);
vertex(34.287f, -182.954f);
vertex(34.287f, -219.736f);
vertex(-23.544f, -219.736f);
vertex(-23.544f, -182.954f);
endShape();
fill(114, 37, 14);
beginShape();
vertex(5.865f, -165.912f);
vertex(10.842f, -174.532f);
vertex(15.818f, -165.912f);
//vertex(-680);
endShape(CLOSE);
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(-21.496f, -178.172f);
vertex(31.721f, -178.172f);
vertex(34.287f, -182.954f);
vertex(34.287f, -194.893f);
vertex(-23.544f, -195.189f);
vertex(-23.544f, -182.954f);
//vertex(-680);
endShape(CLOSE);
fill(0);
noStroke();
ellipse(-2.919f, -186.533f, 4.598f, 4.598f);
ellipse(14.649f, -186.83f, 4.598f, 4.598f);
ellipse(-4.61f, -220.892f, 59.324f, 24.305f);
ellipse(18.539f, -209.356f, 51.193f, 47.559f);
fill(127, 74, 57);
rect(0.583f, -139.276f, 10.052f, 9.264f);
fill(0, 168, 181);
beginShape();
vertex(-23.544f, -130.013f);
vertex(31.667f, -130.013f);
bezierVertex(31.667f, -130.013f, 72.334f, -78.334f, 74.334f, -55);
bezierVertex(74.334f, -55, 64.184f, -49, 59.259f, -49);
bezierVertex(59.259f, -49, 37.122f, -103.605f, 25.395f, -114.969f);
vertex(10.842f, -61.559f);
vertex(-15, -61.559f);
vertex(-19.667f, -114.015f);
bezierVertex(-19.667f, -114.015f, -43, -62.999f, -51.667f, -56.333f);
vertex(-68.334f, -65.008f);
vertex(-23.544f, -130.013f);
endShape();
fill(0);
beginShape();
vertex(74.334f, -55);
bezierVertex(74.517f, -32.38f, 71.068f, -6.636f, 68.77f, -9.163f);
bezierVertex(68.77f, -9.163f, 65.994f, -33.14f, 59.259f, -49);
vertex(74.334f, -55);
endShape();
beginShape();
vertex(-68.326f, -62.626f);
bezierVertex(-68.509f, -40.006f, -65.06f, -14.262f, -62.762f, -16.789f);
bezierVertex(-62.762f, -16.789f, -59.986f, -40.766f, -53.251f, -56.626f);
vertex(-68.326f, -62.626f);
endShape();
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
ellipse(-68.333f, -9.277f, 12.949f, 12.949f);
strokeWeight(2);
ellipse(66.8f, -0.001f, 12.949f, 12.949f);
fill(0, 71, 130);
noStroke();
beginShape();
vertex(-15, -61.56f);
vertex(10.842f, -61.56f);
vertex(10.052f, -49);
vertex(-15, -49);
//vertex(-680);
endShape(CLOSE);
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(-14.148f, -50.074f);
vertex(-2.079f, -29.169f);
vertex(9.99f, -50.074f);
//vertex(-680);
endShape(CLOSE);
fill(0, 168, 181);
noStroke();
beginShape();
vertex(-2.079f, -29.169f);
vertex(10.842f, 12.199f);
vertex(23.16f, 0);
vertex(9.99f, -50.074f);
//vertex(-680);
endShape(CLOSE);
beginShape();
vertex(-2.38f, -29.169f);
vertex(-15.301f, 12.199f);
vertex(-27.62f, 0);
vertex(-14.45f, -50.074f);
//vertex(-680);
endShape(CLOSE);
fill(0);
beginShape();
vertex(10.842f, 12.199f);
vertex(23.16f, 0);
vertex(28.54f, 12.199f);
//vertex(-680);
endShape(CLOSE);
beginShape();
vertex(-14.695f, 12.199f);
vertex(-27.013f, 0);
vertex(-32.393f, 12.199f);
//vertex(-680);
endShape(CLOSE);
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(26.781f, 5.954f);
bezierVertex(26.964f, 28.574f, 23.515f, 54.317f, 21.217f, 51.791f);
bezierVertex(21.217f, 51.791f, 18.441f, 27.814f, 11.706f, 11.954f);
vertex(26.781f, 5.954f);
endShape();
strokeWeight(2);
beginShape();
vertex(-31.078f, 5.954f);
bezierVertex(-31.261f, 28.574f, -27.812f, 54.317f, -25.514f, 51.791f);
bezierVertex(-25.514f, 51.791f, -22.738f, 27.814f, -16.003f, 11.954f);
vertex(-31.078f, 5.954f);
endShape();
fill(0);
noStroke();
beginShape();
vertex(20.118f, 44.188f);
vertex(10.052f, 67.176f);
bezierVertex(10.052f, 67.176f, 8.945f, 72.218f, 26.788f, 72.218f);
vertex(20.118f, 44.188f);
endShape();
beginShape();
vertex(-25.249f, 44.188f);
vertex(-15.183f, 67.176f);
bezierVertex(-15.183f, 67.176f, -14.076f, 72.218f, -31.919f, 72.218f);
vertex(-25.249f, 44.188f);
endShape();
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(9.834f, 67.936f);
vertex(18.413f, 98.025f);
vertex(26.992f, 67.936f);
//vertex(-680);
endShape(CLOSE);
strokeWeight(2);
beginShape();
vertex(-14.965f, 67.936f);
vertex(-23.544f, 98.025f);
vertex(-32.123f, 67.936f);
//vertex(-680);
endShape(CLOSE);
noStroke();
beginShape();
vertex(18.413f, 88.44f);
vertex(11.706f, 109.705f);
vertex(34.287f, 109.705f);
//vertex(-680);
endShape(CLOSE);
beginShape();
vertex(-22.206f, 87.811f);
vertex(-15.499f, 109.075f);
vertex(-38.08f, 109.075f);
//vertex(-680);
endShape(CLOSE);
fill(0, 71, 130);
beginShape();
vertex(19.974f, -115.773f);
bezierVertex(19.978f, -115.402f, 19.983f, -115.03f, 19.986f, -114.66f);
bezierVertex(19.933f, -114.521f, 19.944f, -114.372f, 19.926f, -114.23f);
bezierVertex(19.768f, -113.036f, 19.347f, -111.938f, 18.709f, -110.922f);
bezierVertex(17.729f, -109.36f, 16.404f, -108.141f, 14.878f, -107.134f);
bezierVertex(12.325f, -105.448f, 9.502f, -104.462f, 6.509f, -103.92f);
bezierVertex(6.516f, -103.943f, 6.518f, -103.967f, 6.526f, -103.989f);
bezierVertex(6.727f, -104.469f, 6.837f, -104.967f, 6.88f, -105.488f);
bezierVertex(6.932f, -106.08f, 6.844f, -106.647f, 6.668f, -107.205f);
bezierVertex(6.543f, -107.599f, 6.345f, -107.959f, 6.128f, -108.309f);
bezierVertex(6.608f, -108.405f, 7.086f, -108.515f, 7.559f, -108.644f);
bezierVertex(9.524f, -109.181f, 11.377f, -109.963f, 13.037f, -111.161f);
bezierVertex(14.158f, -111.969f, 15.124f, -112.925f, 15.802f, -114.142f);
bezierVertex(16.585f, -115.544f, 16.826f, -117.026f, 16.4f, -118.591f);
bezierVertex(16.086f, -119.741f, 15.455f, -120.713f, 14.641f, -121.572f);
bezierVertex(13.705f, -122.56f, 12.602f, -123.324f, 11.397f, -123.947f);
bezierVertex(9.944f, -124.698f, 8.41f, -125.223f, 6.813f, -125.569f);
bezierVertex(6.275f, -125.686f, 5.734f, -125.792f, 5.185f, -125.86f);
bezierVertex(5.162f, -126.029f, 5.225f, -126.199f, 5.195f, -126.37f);
bezierVertex(5.309f, -126.361f, 5.423f, -126.356f, 5.534f, -126.34f);
bezierVertex(6.751f, -126.173f, 7.955f, -125.942f, 9.138f, -125.611f);
bezierVertex(11.262f, -125.015f, 13.274f, -124.169f, 15.108f, -122.931f);
bezierVertex(16.353f, -122.091f, 17.462f, -121.105f, 18.348f, -119.884f);
bezierVertex(19.14f, -118.794f, 19.688f, -117.6f, 19.897f, -116.26f);
bezierVertex(19.921f, -116.097f, 19.913f, -115.929f, 19.974f, -115.773f);
endShape();
fill(0, 17, 234);
beginShape();
vertex(5.193f, -126.369f);
bezierVertex(5.223f, -126.198f, 5.16f, -126.029f, 5.183f, -125.859f);
bezierVertex(5.223f, -121.943f, 5.262f, -118.028f, 5.307f, -114.115f);
bezierVertex(5.308f, -113.968f, 5.271f, -113.913f, 5.128f, -113.879f);
bezierVertex(3.015f, -113.379f, 0.901f, -112.874f, -1.21f, -112.369f);
bezierVertex(-1.373f, -112.331f, -1.373f, -112.331f, -1.375f, -112.496f);
bezierVertex(-1.406f, -115.582f, -1.438f, -118.668f, -1.47f, -121.754f);
bezierVertex(-1.47f, -121.816f, -1.474f, -121.877f, -1.475f, -121.939f);
bezierVertex(-1.49f, -123.413f, -1.504f, -124.885f, -1.52f, -126.36f);
bezierVertex(-1.27f, -126.416f, -1.017f, -126.421f, -0.765f, -126.455f);
bezierVertex(-0.72f, -126.461f, -0.67f, -126.438f, -0.633f, -126.484f);
bezierVertex(0.844f, -126.499f, 2.321f, -126.514f, 3.796f, -126.529f);
bezierVertex(3.934f, -126.479f, 4.076f, -126.493f, 4.215f, -126.478f);
bezierVertex(4.542f, -126.443f, 4.87f, -126.431f, 5.193f, -126.369f);
endShape();
beginShape();
vertex(6.509f, -103.92f);
bezierVertex(6.34f, -103.628f, 6.188f, -103.327f, 5.979f, -103.06f);
bezierVertex(5.2f, -102.069f, 4.194f, -101.481f, 2.943f, -101.307f);
bezierVertex(2.914f, -101.302f, 2.877f, -101.313f, 2.857f, -101.276f);
bezierVertex(2.598f, -101.274f, 2.34f, -101.271f, 2.085f, -101.269f);
bezierVertex(1.844f, -101.32f, 1.598f, -101.331f, 1.356f, -101.39f);
bezierVertex(0.124f, -101.694f, -0.812f, -102.396f, -1.473f, -103.472f);
bezierVertex(-1.505f, -103.525f, -1.539f, -103.577f, -1.572f, -103.629f);
bezierVertex(-1.652f, -103.812f, -1.733f, -103.995f, -1.816f, -104.178f);
bezierVertex(-1.94f, -104.539f, -2.029f, -104.911f, -2.075f, -105.291f);
bezierVertex(-2.112f, -105.618f, -2.1f, -105.94f, -2.065f, -106.27f);
bezierVertex(-2.023f, -106.662f, -1.934f, -107.039f, -1.796f, -107.403f);
bezierVertex(-1.523f, -108.12f, -1.086f, -108.723f, -0.5f, -109.222f);
bezierVertex(-0.081f, -109.579f, 0.385f, -109.851f, 0.9f, -110.034f);
bezierVertex(1.564f, -110.27f, 2.243f, -110.357f, 2.945f, -110.259f);
bezierVertex(3.343f, -110.204f, 3.731f, -110.109f, 4.103f, -109.954f);
bezierVertex(4.94f, -109.606f, 5.602f, -109.041f, 6.128f, -108.31f);
bezierVertex(6.345f, -107.959f, 6.543f, -107.6f, 6.668f, -107.206f);
bezierVertex(6.844f, -106.648f, 6.932f, -106.081f, 6.88f, -105.489f);
bezierVertex(6.836f, -104.968f, 6.727f, -104.47f, 6.526f, -103.99f);
bezierVertex(6.518f, -103.967f, 6.516f, -103.943f, 6.509f, -103.92f);
endShape();
beginShape();
vertex(0.091f, -105.749f);
bezierVertex(0.106f, -104.492f, 1.152f, -103.458f, 2.399f, -103.469f);
bezierVertex(3.665f, -103.48f, 4.705f, -104.54f, 4.689f, -105.801f);
bezierVertex(4.674f, -107.07f, 3.609f, -108.116f, 2.348f, -108.101f);
bezierVertex(1.105f, -108.087f, 0.079f, -107.014f, 0.091f, -105.749f);
endShape();
fill(0, 71, 130);
beginShape();
vertex(-1.816f, -104.177f);
bezierVertex(-1.733f, -103.994f, -1.652f, -103.811f, -1.572f, -103.628f);
bezierVertex(-2.03f, -103.648f, -2.478f, -103.726f, -2.929f, -103.798f);
bezierVertex(-4.547f, -104.057f, -6.132f, -104.454f, -7.671f, -105.025f);
bezierVertex(-9.53f, -105.715f, -11.271f, -106.62f, -12.821f, -107.868f);
bezierVertex(-14.141f, -108.932f, -15.243f, -110.181f, -15.961f, -111.736f);
bezierVertex(-16.269f, -112.405f, -16.489f, -113.103f, -16.587f, -113.833f);
bezierVertex(-16.627f, -114.128f, -16.59f, -114.433f, -16.611f, -114.732f);
bezierVertex(-16.751f, -116.793f, -15.952f, -118.524f, -14.715f, -120.092f);
bezierVertex(-13.597f, -121.509f, -12.191f, -122.591f, -10.636f, -123.49f);
bezierVertex(-8.745f, -124.585f, -6.714f, -125.325f, -4.593f, -125.832f);
bezierVertex(-3.624f, -126.062f, -2.647f, -126.231f, -1.659f, -126.353f);
bezierVertex(-1.612f, -126.359f, -1.564f, -126.358f, -1.517f, -126.359f);
bezierVertex(-1.501f, -124.884f, -1.487f, -123.412f, -1.472f, -121.938f);
bezierVertex(-1.529f, -121.933f, -1.585f, -121.93f, -1.642f, -121.921f);
bezierVertex(-3.133f, -121.699f, -4.592f, -121.35f, -6.003f, -120.823f);
bezierVertex(-7.516f, -120.259f, -8.934f, -119.527f, -10.197f, -118.513f);
bezierVertex(-11.166f, -117.738f, -11.993f, -116.84f, -12.57f, -115.73f);
bezierVertex(-13.247f, -114.429f, -13.46f, -113.06f, -13.113f, -111.623f);
bezierVertex(-12.832f, -110.446f, -12.218f, -109.449f, -11.408f, -108.564f);
bezierVertex(-10.394f, -107.459f, -9.174f, -106.631f, -7.84f, -105.966f);
bezierVertex(-6.379f, -105.238f, -4.84f, -104.746f, -3.246f, -104.415f);
bezierVertex(-2.772f, -104.318f, -2.298f, -104.227f, -1.816f, -104.177f);
endShape();
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(-1.816f, -104.177f);
bezierVertex(-2.297f, -104.227f, -2.772f, -104.318f, -3.248f, -104.417f);
bezierVertex(-4.842f, -104.748f, -6.381f, -105.24f, -7.842f, -105.968f);
bezierVertex(-9.176f, -106.633f, -10.397f, -107.46f, -11.41f, -108.566f);
bezierVertex(-12.221f, -109.45f, -12.834f, -110.448f, -13.115f, -111.625f);
bezierVertex(-13.462f, -113.062f, -13.249f, -114.431f, -12.572f, -115.732f);
bezierVertex(-11.995f, -116.842f, -11.168f, -117.74f, -10.199f, -118.515f);
bezierVertex(-8.935f, -119.528f, -7.517f, -120.26f, -6.005f, -120.825f);
bezierVertex(-4.594f, -121.352f, -3.135f, -121.701f, -1.644f, -121.923f);
bezierVertex(-1.587f, -121.931f, -1.531f, -121.935f, -1.474f, -121.94f);
bezierVertex(-1.473f, -121.878f, -1.469f, -121.816f, -1.469f, -121.755f);
bezierVertex(-1.438f, -118.669f, -1.406f, -115.583f, -1.374f, -112.497f);
bezierVertex(-1.372f, -112.332f, -1.372f, -112.332f, -1.209f, -112.37f);
bezierVertex(0.902f, -112.875f, 3.016f, -113.38f, 5.129f, -113.88f);
bezierVertex(5.272f, -113.914f, 5.309f, -113.969f, 5.308f, -114.116f);
bezierVertex(5.263f, -118.03f, 5.224f, -121.945f, 5.184f, -125.86f);
bezierVertex(5.733f, -125.792f, 6.274f, -125.686f, 6.812f, -125.569f);
bezierVertex(8.409f, -125.224f, 9.943f, -124.699f, 11.396f, -123.947f);
bezierVertex(12.601f, -123.324f, 13.705f, -122.56f, 14.64f, -121.572f);
bezierVertex(15.453f, -120.713f, 16.084f, -119.741f, 16.399f, -118.591f);
bezierVertex(16.826f, -117.026f, 16.585f, -115.545f, 15.801f, -114.142f);
bezierVertex(15.123f, -112.925f, 14.157f, -111.968f, 13.036f, -111.161f);
bezierVertex(11.377f, -109.964f, 9.523f, -109.181f, 7.558f, -108.644f);
bezierVertex(7.085f, -108.515f, 6.608f, -108.405f, 6.127f, -108.309f);
bezierVertex(5.601f, -109.04f, 4.939f, -109.604f, 4.102f, -109.953f);
bezierVertex(3.73f, -110.108f, 3.342f, -110.203f, 2.944f, -110.258f);
bezierVertex(2.242f, -110.356f, 1.563f, -110.269f, 0.899f, -110.033f);
bezierVertex(0.383f, -109.85f, -0.082f, -109.579f, -0.501f, -109.221f);
bezierVertex(-1.087f, -108.721f, -1.523f, -108.119f, -1.797f, -107.402f);
bezierVertex(-1.935f, -107.038f, -2.024f, -106.661f, -2.066f, -106.269f);
bezierVertex(-2.101f, -105.939f, -2.113f, -105.617f, -2.076f, -105.29f);
bezierVertex(-2.029f, -104.911f, -1.94f, -104.539f, -1.816f, -104.177f);
endShape();
fill(0);
noStroke();
beginShape();
vertex(0.091f, -105.749f);
bezierVertex(0.079f, -107.015f, 1.106f, -108.088f, 2.348f, -108.101f);
bezierVertex(3.609f, -108.116f, 4.674f, -107.069f, 4.689f, -105.801f);
bezierVertex(4.705f, -104.541f, 3.665f, -103.481f, 2.399f, -103.469f);
bezierVertex(1.151f, -103.458f, 0.105f, -104.491f, 0.091f, -105.749f);
endShape();
noFill();
stroke(0, 168, 181);
strokeWeight(1);
line(-4.767f, -158.816f, 16.026f, -158.816f);
popMatrix();

      break;
    }
  }
  
  public void gamer_2() {
    switch(seleccion_personaje_2) {
      case 4:
      
pushMatrix();
translate(953, 405);
fill(0);
noStroke();
rect(-31.085f, -225.483f, 73.43f, 119.702f);
fill(127, 74, 57);
beginShape();
vertex(-23.544f, -182.954f);
bezierVertex(-18.586f, -170.31f, -12.41f, -163.414f, -12.41f, -163.414f);
bezierVertex(-12.41f, -163.414f, -0.954f, -148.472f, 0, -139.276f);
vertex(10.842f, -139.276f);
vertex(34.287f, -182.954f);
vertex(34.287f, -219.736f);
vertex(-23.544f, -219.736f);
vertex(-23.544f, -182.954f);
endShape();
fill(114, 37, 14);
beginShape();
vertex(5.865f, -165.912f);
vertex(10.842f, -174.532f);
vertex(15.818f, -165.912f);
//vertex(-680);
endShape(CLOSE);
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(-21.496f, -178.172f);
vertex(31.721f, -178.172f);
vertex(34.287f, -182.954f);
vertex(34.287f, -194.893f);
vertex(-23.544f, -195.189f);
vertex(-23.544f, -182.954f);
//vertex(-680);
endShape(CLOSE);
fill(0);
noStroke();
ellipse(-2.919f, -186.533f, 4.598f, 4.598f);
ellipse(14.649f, -186.83f, 4.598f, 4.598f);
ellipse(-4.61f, -220.892f, 59.324f, 24.305f);
ellipse(18.539f, -209.356f, 51.193f, 47.559f);
fill(127, 74, 57);
rect(0.583f, -139.276f, 10.052f, 9.264f);
fill(0, 168, 181);
beginShape();
vertex(-23.544f, -130.013f);
vertex(31.667f, -130.013f);
bezierVertex(31.667f, -130.013f, 72.334f, -78.334f, 74.334f, -55);
bezierVertex(74.334f, -55, 64.184f, -49, 59.259f, -49);
bezierVertex(59.259f, -49, 37.122f, -103.605f, 25.395f, -114.969f);
vertex(10.842f, -61.559f);
vertex(-15, -61.559f);
vertex(-19.667f, -114.015f);
bezierVertex(-19.667f, -114.015f, -43, -62.999f, -51.667f, -56.333f);
vertex(-68.334f, -65.008f);
vertex(-23.544f, -130.013f);
endShape();
fill(0);
beginShape();
vertex(74.334f, -55);
bezierVertex(74.517f, -32.38f, 71.068f, -6.636f, 68.77f, -9.163f);
bezierVertex(68.77f, -9.163f, 65.994f, -33.14f, 59.259f, -49);
vertex(74.334f, -55);
endShape();
beginShape();
vertex(-68.326f, -62.626f);
bezierVertex(-68.509f, -40.006f, -65.06f, -14.262f, -62.762f, -16.789f);
bezierVertex(-62.762f, -16.789f, -59.986f, -40.766f, -53.251f, -56.626f);
vertex(-68.326f, -62.626f);
endShape();
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
ellipse(-68.333f, -9.277f, 12.949f, 12.949f);
strokeWeight(2);
ellipse(66.8f, -0.001f, 12.949f, 12.949f);
fill(0, 71, 130);
noStroke();
beginShape();
vertex(-15, -61.56f);
vertex(10.842f, -61.56f);
vertex(10.052f, -49);
vertex(-15, -49);
//vertex(-680);
endShape(CLOSE);
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(-14.148f, -50.074f);
vertex(-2.079f, -29.169f);
vertex(9.99f, -50.074f);
//vertex(-680);
endShape(CLOSE);
fill(0, 168, 181);
noStroke();
beginShape();
vertex(-2.079f, -29.169f);
vertex(10.842f, 12.199f);
vertex(23.16f, 0);
vertex(9.99f, -50.074f);
//vertex(-680);
endShape(CLOSE);
beginShape();
vertex(-2.38f, -29.169f);
vertex(-15.301f, 12.199f);
vertex(-27.62f, 0);
vertex(-14.45f, -50.074f);
//vertex(-680);
endShape(CLOSE);
fill(0);
beginShape();
vertex(10.842f, 12.199f);
vertex(23.16f, 0);
vertex(28.54f, 12.199f);
//vertex(-680);
endShape(CLOSE);
beginShape();
vertex(-14.695f, 12.199f);
vertex(-27.013f, 0);
vertex(-32.393f, 12.199f);
//vertex(-680);
endShape(CLOSE);
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(26.781f, 5.954f);
bezierVertex(26.964f, 28.574f, 23.515f, 54.317f, 21.217f, 51.791f);
bezierVertex(21.217f, 51.791f, 18.441f, 27.814f, 11.706f, 11.954f);
vertex(26.781f, 5.954f);
endShape();
strokeWeight(2);
beginShape();
vertex(-31.078f, 5.954f);
bezierVertex(-31.261f, 28.574f, -27.812f, 54.317f, -25.514f, 51.791f);
bezierVertex(-25.514f, 51.791f, -22.738f, 27.814f, -16.003f, 11.954f);
vertex(-31.078f, 5.954f);
endShape();
fill(0);
noStroke();
beginShape();
vertex(20.118f, 44.188f);
vertex(10.052f, 67.176f);
bezierVertex(10.052f, 67.176f, 8.945f, 72.218f, 26.788f, 72.218f);
vertex(20.118f, 44.188f);
endShape();
beginShape();
vertex(-25.249f, 44.188f);
vertex(-15.183f, 67.176f);
bezierVertex(-15.183f, 67.176f, -14.076f, 72.218f, -31.919f, 72.218f);
vertex(-25.249f, 44.188f);
endShape();
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(9.834f, 67.936f);
vertex(18.413f, 98.025f);
vertex(26.992f, 67.936f);
//vertex(-680);
endShape(CLOSE);
strokeWeight(2);
beginShape();
vertex(-14.965f, 67.936f);
vertex(-23.544f, 98.025f);
vertex(-32.123f, 67.936f);
//vertex(-680);
endShape(CLOSE);
noStroke();
beginShape();
vertex(18.413f, 88.44f);
vertex(11.706f, 109.705f);
vertex(34.287f, 109.705f);
//vertex(-680);
endShape(CLOSE);
beginShape();
vertex(-22.206f, 87.811f);
vertex(-15.499f, 109.075f);
vertex(-38.08f, 109.075f);
//vertex(-680);
endShape(CLOSE);
fill(0, 71, 130);
beginShape();
vertex(19.974f, -115.773f);
bezierVertex(19.978f, -115.402f, 19.983f, -115.03f, 19.986f, -114.66f);
bezierVertex(19.933f, -114.521f, 19.944f, -114.372f, 19.926f, -114.23f);
bezierVertex(19.768f, -113.036f, 19.347f, -111.938f, 18.709f, -110.922f);
bezierVertex(17.729f, -109.36f, 16.404f, -108.141f, 14.878f, -107.134f);
bezierVertex(12.325f, -105.448f, 9.502f, -104.462f, 6.509f, -103.92f);
bezierVertex(6.516f, -103.943f, 6.518f, -103.967f, 6.526f, -103.989f);
bezierVertex(6.727f, -104.469f, 6.837f, -104.967f, 6.88f, -105.488f);
bezierVertex(6.932f, -106.08f, 6.844f, -106.647f, 6.668f, -107.205f);
bezierVertex(6.543f, -107.599f, 6.345f, -107.959f, 6.128f, -108.309f);
bezierVertex(6.608f, -108.405f, 7.086f, -108.515f, 7.559f, -108.644f);
bezierVertex(9.524f, -109.181f, 11.377f, -109.963f, 13.037f, -111.161f);
bezierVertex(14.158f, -111.969f, 15.124f, -112.925f, 15.802f, -114.142f);
bezierVertex(16.585f, -115.544f, 16.826f, -117.026f, 16.4f, -118.591f);
bezierVertex(16.086f, -119.741f, 15.455f, -120.713f, 14.641f, -121.572f);
bezierVertex(13.705f, -122.56f, 12.602f, -123.324f, 11.397f, -123.947f);
bezierVertex(9.944f, -124.698f, 8.41f, -125.223f, 6.813f, -125.569f);
bezierVertex(6.275f, -125.686f, 5.734f, -125.792f, 5.185f, -125.86f);
bezierVertex(5.162f, -126.029f, 5.225f, -126.199f, 5.195f, -126.37f);
bezierVertex(5.309f, -126.361f, 5.423f, -126.356f, 5.534f, -126.34f);
bezierVertex(6.751f, -126.173f, 7.955f, -125.942f, 9.138f, -125.611f);
bezierVertex(11.262f, -125.015f, 13.274f, -124.169f, 15.108f, -122.931f);
bezierVertex(16.353f, -122.091f, 17.462f, -121.105f, 18.348f, -119.884f);
bezierVertex(19.14f, -118.794f, 19.688f, -117.6f, 19.897f, -116.26f);
bezierVertex(19.921f, -116.097f, 19.913f, -115.929f, 19.974f, -115.773f);
endShape();
fill(0, 17, 234);
beginShape();
vertex(5.193f, -126.369f);
bezierVertex(5.223f, -126.198f, 5.16f, -126.029f, 5.183f, -125.859f);
bezierVertex(5.223f, -121.943f, 5.262f, -118.028f, 5.307f, -114.115f);
bezierVertex(5.308f, -113.968f, 5.271f, -113.913f, 5.128f, -113.879f);
bezierVertex(3.015f, -113.379f, 0.901f, -112.874f, -1.21f, -112.369f);
bezierVertex(-1.373f, -112.331f, -1.373f, -112.331f, -1.375f, -112.496f);
bezierVertex(-1.406f, -115.582f, -1.438f, -118.668f, -1.47f, -121.754f);
bezierVertex(-1.47f, -121.816f, -1.474f, -121.877f, -1.475f, -121.939f);
bezierVertex(-1.49f, -123.413f, -1.504f, -124.885f, -1.52f, -126.36f);
bezierVertex(-1.27f, -126.416f, -1.017f, -126.421f, -0.765f, -126.455f);
bezierVertex(-0.72f, -126.461f, -0.67f, -126.438f, -0.633f, -126.484f);
bezierVertex(0.844f, -126.499f, 2.321f, -126.514f, 3.796f, -126.529f);
bezierVertex(3.934f, -126.479f, 4.076f, -126.493f, 4.215f, -126.478f);
bezierVertex(4.542f, -126.443f, 4.87f, -126.431f, 5.193f, -126.369f);
endShape();
beginShape();
vertex(6.509f, -103.92f);
bezierVertex(6.34f, -103.628f, 6.188f, -103.327f, 5.979f, -103.06f);
bezierVertex(5.2f, -102.069f, 4.194f, -101.481f, 2.943f, -101.307f);
bezierVertex(2.914f, -101.302f, 2.877f, -101.313f, 2.857f, -101.276f);
bezierVertex(2.598f, -101.274f, 2.34f, -101.271f, 2.085f, -101.269f);
bezierVertex(1.844f, -101.32f, 1.598f, -101.331f, 1.356f, -101.39f);
bezierVertex(0.124f, -101.694f, -0.812f, -102.396f, -1.473f, -103.472f);
bezierVertex(-1.505f, -103.525f, -1.539f, -103.577f, -1.572f, -103.629f);
bezierVertex(-1.652f, -103.812f, -1.733f, -103.995f, -1.816f, -104.178f);
bezierVertex(-1.94f, -104.539f, -2.029f, -104.911f, -2.075f, -105.291f);
bezierVertex(-2.112f, -105.618f, -2.1f, -105.94f, -2.065f, -106.27f);
bezierVertex(-2.023f, -106.662f, -1.934f, -107.039f, -1.796f, -107.403f);
bezierVertex(-1.523f, -108.12f, -1.086f, -108.723f, -0.5f, -109.222f);
bezierVertex(-0.081f, -109.579f, 0.385f, -109.851f, 0.9f, -110.034f);
bezierVertex(1.564f, -110.27f, 2.243f, -110.357f, 2.945f, -110.259f);
bezierVertex(3.343f, -110.204f, 3.731f, -110.109f, 4.103f, -109.954f);
bezierVertex(4.94f, -109.606f, 5.602f, -109.041f, 6.128f, -108.31f);
bezierVertex(6.345f, -107.959f, 6.543f, -107.6f, 6.668f, -107.206f);
bezierVertex(6.844f, -106.648f, 6.932f, -106.081f, 6.88f, -105.489f);
bezierVertex(6.836f, -104.968f, 6.727f, -104.47f, 6.526f, -103.99f);
bezierVertex(6.518f, -103.967f, 6.516f, -103.943f, 6.509f, -103.92f);
endShape();
beginShape();
vertex(0.091f, -105.749f);
bezierVertex(0.106f, -104.492f, 1.152f, -103.458f, 2.399f, -103.469f);
bezierVertex(3.665f, -103.48f, 4.705f, -104.54f, 4.689f, -105.801f);
bezierVertex(4.674f, -107.07f, 3.609f, -108.116f, 2.348f, -108.101f);
bezierVertex(1.105f, -108.087f, 0.079f, -107.014f, 0.091f, -105.749f);
endShape();
fill(0, 71, 130);
beginShape();
vertex(-1.816f, -104.177f);
bezierVertex(-1.733f, -103.994f, -1.652f, -103.811f, -1.572f, -103.628f);
bezierVertex(-2.03f, -103.648f, -2.478f, -103.726f, -2.929f, -103.798f);
bezierVertex(-4.547f, -104.057f, -6.132f, -104.454f, -7.671f, -105.025f);
bezierVertex(-9.53f, -105.715f, -11.271f, -106.62f, -12.821f, -107.868f);
bezierVertex(-14.141f, -108.932f, -15.243f, -110.181f, -15.961f, -111.736f);
bezierVertex(-16.269f, -112.405f, -16.489f, -113.103f, -16.587f, -113.833f);
bezierVertex(-16.627f, -114.128f, -16.59f, -114.433f, -16.611f, -114.732f);
bezierVertex(-16.751f, -116.793f, -15.952f, -118.524f, -14.715f, -120.092f);
bezierVertex(-13.597f, -121.509f, -12.191f, -122.591f, -10.636f, -123.49f);
bezierVertex(-8.745f, -124.585f, -6.714f, -125.325f, -4.593f, -125.832f);
bezierVertex(-3.624f, -126.062f, -2.647f, -126.231f, -1.659f, -126.353f);
bezierVertex(-1.612f, -126.359f, -1.564f, -126.358f, -1.517f, -126.359f);
bezierVertex(-1.501f, -124.884f, -1.487f, -123.412f, -1.472f, -121.938f);
bezierVertex(-1.529f, -121.933f, -1.585f, -121.93f, -1.642f, -121.921f);
bezierVertex(-3.133f, -121.699f, -4.592f, -121.35f, -6.003f, -120.823f);
bezierVertex(-7.516f, -120.259f, -8.934f, -119.527f, -10.197f, -118.513f);
bezierVertex(-11.166f, -117.738f, -11.993f, -116.84f, -12.57f, -115.73f);
bezierVertex(-13.247f, -114.429f, -13.46f, -113.06f, -13.113f, -111.623f);
bezierVertex(-12.832f, -110.446f, -12.218f, -109.449f, -11.408f, -108.564f);
bezierVertex(-10.394f, -107.459f, -9.174f, -106.631f, -7.84f, -105.966f);
bezierVertex(-6.379f, -105.238f, -4.84f, -104.746f, -3.246f, -104.415f);
bezierVertex(-2.772f, -104.318f, -2.298f, -104.227f, -1.816f, -104.177f);
endShape();
fill(243, 241, 241);
stroke(0, 0, 0);
strokeWeight(2);
beginShape();
vertex(-1.816f, -104.177f);
bezierVertex(-2.297f, -104.227f, -2.772f, -104.318f, -3.248f, -104.417f);
bezierVertex(-4.842f, -104.748f, -6.381f, -105.24f, -7.842f, -105.968f);
bezierVertex(-9.176f, -106.633f, -10.397f, -107.46f, -11.41f, -108.566f);
bezierVertex(-12.221f, -109.45f, -12.834f, -110.448f, -13.115f, -111.625f);
bezierVertex(-13.462f, -113.062f, -13.249f, -114.431f, -12.572f, -115.732f);
bezierVertex(-11.995f, -116.842f, -11.168f, -117.74f, -10.199f, -118.515f);
bezierVertex(-8.935f, -119.528f, -7.517f, -120.26f, -6.005f, -120.825f);
bezierVertex(-4.594f, -121.352f, -3.135f, -121.701f, -1.644f, -121.923f);
bezierVertex(-1.587f, -121.931f, -1.531f, -121.935f, -1.474f, -121.94f);
bezierVertex(-1.473f, -121.878f, -1.469f, -121.816f, -1.469f, -121.755f);
bezierVertex(-1.438f, -118.669f, -1.406f, -115.583f, -1.374f, -112.497f);
bezierVertex(-1.372f, -112.332f, -1.372f, -112.332f, -1.209f, -112.37f);
bezierVertex(0.902f, -112.875f, 3.016f, -113.38f, 5.129f, -113.88f);
bezierVertex(5.272f, -113.914f, 5.309f, -113.969f, 5.308f, -114.116f);
bezierVertex(5.263f, -118.03f, 5.224f, -121.945f, 5.184f, -125.86f);
bezierVertex(5.733f, -125.792f, 6.274f, -125.686f, 6.812f, -125.569f);
bezierVertex(8.409f, -125.224f, 9.943f, -124.699f, 11.396f, -123.947f);
bezierVertex(12.601f, -123.324f, 13.705f, -122.56f, 14.64f, -121.572f);
bezierVertex(15.453f, -120.713f, 16.084f, -119.741f, 16.399f, -118.591f);
bezierVertex(16.826f, -117.026f, 16.585f, -115.545f, 15.801f, -114.142f);
bezierVertex(15.123f, -112.925f, 14.157f, -111.968f, 13.036f, -111.161f);
bezierVertex(11.377f, -109.964f, 9.523f, -109.181f, 7.558f, -108.644f);
bezierVertex(7.085f, -108.515f, 6.608f, -108.405f, 6.127f, -108.309f);
bezierVertex(5.601f, -109.04f, 4.939f, -109.604f, 4.102f, -109.953f);
bezierVertex(3.73f, -110.108f, 3.342f, -110.203f, 2.944f, -110.258f);
bezierVertex(2.242f, -110.356f, 1.563f, -110.269f, 0.899f, -110.033f);
bezierVertex(0.383f, -109.85f, -0.082f, -109.579f, -0.501f, -109.221f);
bezierVertex(-1.087f, -108.721f, -1.523f, -108.119f, -1.797f, -107.402f);
bezierVertex(-1.935f, -107.038f, -2.024f, -106.661f, -2.066f, -106.269f);
bezierVertex(-2.101f, -105.939f, -2.113f, -105.617f, -2.076f, -105.29f);
bezierVertex(-2.029f, -104.911f, -1.94f, -104.539f, -1.816f, -104.177f);
endShape();
fill(0);
noStroke();
beginShape();
vertex(0.091f, -105.749f);
bezierVertex(0.079f, -107.015f, 1.106f, -108.088f, 2.348f, -108.101f);
bezierVertex(3.609f, -108.116f, 4.674f, -107.069f, 4.689f, -105.801f);
bezierVertex(4.705f, -104.541f, 3.665f, -103.481f, 2.399f, -103.469f);
bezierVertex(1.151f, -103.458f, 0.105f, -104.491f, 0.091f, -105.749f);
endShape();
noFill();
stroke(0, 168, 181);
strokeWeight(1);
line(-4.767f, -158.816f, 16.026f, -158.816f);
popMatrix();

      break;
    }
  }
  
  public int danio(){
    return danio;
  }
}
  public void settings() {  size(1360, 700); }
  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--present", "--window-color=#666666", "--stop-color=#cccccc", "The_Incredibles" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
